// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v62.Client;
using EdFi.OdsApi.Sdk.v62.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v62.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IMagnetSpecialProgramEmphasisSchoolDescriptorsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        MagnetSpecialProgramEmphasisSchoolDescriptorsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse"/>&gt;</returns>
        Task<IDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse> DeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse?> DeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>&gt;</returns>
        Task<IDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse> DeletesMagnetSpecialProgramEmphasisSchoolDescriptorsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>?&gt;</returns>
        Task<IDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse?> DeletesMagnetSpecialProgramEmphasisSchoolDescriptorsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptorId">A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>&gt;</returns>
        Task<IGetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse> GetMagnetSpecialProgramEmphasisSchoolDescriptorsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<int> magnetSpecialProgramEmphasisSchoolDescriptorId = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptorId">A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>?&gt;</returns>
        Task<IGetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse?> GetMagnetSpecialProgramEmphasisSchoolDescriptorsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<int> magnetSpecialProgramEmphasisSchoolDescriptorId = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse"/>&gt;</returns>
        Task<IGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse> GetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse"/>?&gt;</returns>
        Task<IGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse?> GetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>&gt;</returns>
        Task<IKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse> KeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse?> KeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">The JSON representation of the \&quot;magnetSpecialProgramEmphasisSchoolDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse"/>&gt;</returns>
        Task<IPostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse> PostMagnetSpecialProgramEmphasisSchoolDescriptorAsync(EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">The JSON representation of the \&quot;magnetSpecialProgramEmphasisSchoolDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse"/>?&gt;</returns>
        Task<IPostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse?> PostMagnetSpecialProgramEmphasisSchoolDescriptorOrDefaultAsync(EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">The JSON representation of the \&quot;magnetSpecialProgramEmphasisSchoolDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse"/>&gt;</returns>
        Task<IPutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse> PutMagnetSpecialProgramEmphasisSchoolDescriptorAsync(string id, EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">The JSON representation of the \&quot;magnetSpecialProgramEmphasisSchoolDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse"/>?&gt;</returns>
        Task<IPutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse?> PutMagnetSpecialProgramEmphasisSchoolDescriptorOrDefaultAsync(string id, EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse"/>
    /// </summary>
    public interface IDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse : EdFi.OdsApi.Sdk.v62.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>
    /// </summary>
    public interface IDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse : EdFi.OdsApi.Sdk.v62.Client.IApiResponse, IOk<List<TrackedChangesEdFiMagnetSpecialProgramEmphasisSchoolDescriptorDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }
    }

    /// <summary>
    /// The <see cref="IGetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>
    /// </summary>
    public interface IGetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse : EdFi.OdsApi.Sdk.v62.Client.IApiResponse, IOk<List<EdFiMagnetSpecialProgramEmphasisSchoolDescriptor>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }
    }

    /// <summary>
    /// The <see cref="IGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse"/>
    /// </summary>
    public interface IGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse : EdFi.OdsApi.Sdk.v62.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v62.Models.All.EdFiMagnetSpecialProgramEmphasisSchoolDescriptor?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>
    /// </summary>
    public interface IKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse : EdFi.OdsApi.Sdk.v62.Client.IApiResponse, IOk<List<TrackedChangesEdFiMagnetSpecialProgramEmphasisSchoolDescriptorKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }
    }

    /// <summary>
    /// The <see cref="IPostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse"/>
    /// </summary>
    public interface IPostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse : EdFi.OdsApi.Sdk.v62.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse"/>
    /// </summary>
    public interface IPutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse : EdFi.OdsApi.Sdk.v62.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class MagnetSpecialProgramEmphasisSchoolDescriptorsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById;

        internal void ExecuteOnDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById(MagnetSpecialProgramEmphasisSchoolDescriptorsApi.DeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse apiResponse)
        {
            OnDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById(Exception exception)
        {
            OnErrorDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesMagnetSpecialProgramEmphasisSchoolDescriptors;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesMagnetSpecialProgramEmphasisSchoolDescriptors;

        internal void ExecuteOnDeletesMagnetSpecialProgramEmphasisSchoolDescriptors(MagnetSpecialProgramEmphasisSchoolDescriptorsApi.DeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse apiResponse)
        {
            OnDeletesMagnetSpecialProgramEmphasisSchoolDescriptors?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesMagnetSpecialProgramEmphasisSchoolDescriptors(Exception exception)
        {
            OnErrorDeletesMagnetSpecialProgramEmphasisSchoolDescriptors?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMagnetSpecialProgramEmphasisSchoolDescriptors;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptors;

        internal void ExecuteOnGetMagnetSpecialProgramEmphasisSchoolDescriptors(MagnetSpecialProgramEmphasisSchoolDescriptorsApi.GetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse apiResponse)
        {
            OnGetMagnetSpecialProgramEmphasisSchoolDescriptors?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptors(Exception exception)
        {
            OnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptors?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMagnetSpecialProgramEmphasisSchoolDescriptorsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptorsById;

        internal void ExecuteOnGetMagnetSpecialProgramEmphasisSchoolDescriptorsById(MagnetSpecialProgramEmphasisSchoolDescriptorsApi.GetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse apiResponse)
        {
            OnGetMagnetSpecialProgramEmphasisSchoolDescriptorsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptorsById(Exception exception)
        {
            OnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptorsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors;

        internal void ExecuteOnKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors(MagnetSpecialProgramEmphasisSchoolDescriptorsApi.KeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse apiResponse)
        {
            OnKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors(Exception exception)
        {
            OnErrorKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostMagnetSpecialProgramEmphasisSchoolDescriptor;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostMagnetSpecialProgramEmphasisSchoolDescriptor;

        internal void ExecuteOnPostMagnetSpecialProgramEmphasisSchoolDescriptor(MagnetSpecialProgramEmphasisSchoolDescriptorsApi.PostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse apiResponse)
        {
            OnPostMagnetSpecialProgramEmphasisSchoolDescriptor?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostMagnetSpecialProgramEmphasisSchoolDescriptor(Exception exception)
        {
            OnErrorPostMagnetSpecialProgramEmphasisSchoolDescriptor?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutMagnetSpecialProgramEmphasisSchoolDescriptor;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutMagnetSpecialProgramEmphasisSchoolDescriptor;

        internal void ExecuteOnPutMagnetSpecialProgramEmphasisSchoolDescriptor(MagnetSpecialProgramEmphasisSchoolDescriptorsApi.PutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse apiResponse)
        {
            OnPutMagnetSpecialProgramEmphasisSchoolDescriptor?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutMagnetSpecialProgramEmphasisSchoolDescriptor(Exception exception)
        {
            OnErrorPutMagnetSpecialProgramEmphasisSchoolDescriptor?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class MagnetSpecialProgramEmphasisSchoolDescriptorsApi : IMagnetSpecialProgramEmphasisSchoolDescriptorsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<MagnetSpecialProgramEmphasisSchoolDescriptorsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public MagnetSpecialProgramEmphasisSchoolDescriptorsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MagnetSpecialProgramEmphasisSchoolDescriptorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MagnetSpecialProgramEmphasisSchoolDescriptorsApi(ILogger<MagnetSpecialProgramEmphasisSchoolDescriptorsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, MagnetSpecialProgramEmphasisSchoolDescriptorsApiEvents magnetSpecialProgramEmphasisSchoolDescriptorsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<MagnetSpecialProgramEmphasisSchoolDescriptorsApi>();
            HttpClient = httpClient;
            Events = magnetSpecialProgramEmphasisSchoolDescriptorsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdDefaultImplementation(IDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById(ref bool suppressDefaultLog, IDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse?> DeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse> DeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById(id, ifMatch);

                FormatDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse>();

                        DeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdDefaultImplementation(e, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteMagnetSpecialProgramEmphasisSchoolDescriptorById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse"/>
        /// </summary>
        public partial class DeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse : EdFi.OdsApi.Sdk.v62.Client.ApiResponse, IDeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse(ILogger<DeleteMagnetSpecialProgramEmphasisSchoolDescriptorByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesMagnetSpecialProgramEmphasisSchoolDescriptors(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> snapshotIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="snapshotIdentifier"></param>
        /// <returns></returns>
        private void ValidateDeletesMagnetSpecialProgramEmphasisSchoolDescriptors(Option<string> snapshotIdentifier)
        {
            if (snapshotIdentifier.IsSet && snapshotIdentifier.Value == null)
                throw new ArgumentNullException(nameof(snapshotIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        private void AfterDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsDefaultImplementation(IDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterDeletesMagnetSpecialProgramEmphasisSchoolDescriptors(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void AfterDeletesMagnetSpecialProgramEmphasisSchoolDescriptors(ref bool suppressDefaultLog, IDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        private void OnErrorDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesMagnetSpecialProgramEmphasisSchoolDescriptors(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void OnErrorDeletesMagnetSpecialProgramEmphasisSchoolDescriptors(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>&gt;</returns>
        public async Task<IDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse?> DeletesMagnetSpecialProgramEmphasisSchoolDescriptorsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesMagnetSpecialProgramEmphasisSchoolDescriptorsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>&gt;</returns>
        public async Task<IDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse> DeletesMagnetSpecialProgramEmphasisSchoolDescriptorsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeletesMagnetSpecialProgramEmphasisSchoolDescriptors(snapshotIdentifier);

                FormatDeletesMagnetSpecialProgramEmphasisSchoolDescriptors(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref snapshotIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (snapshotIdentifier.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse>();

                        DeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);

                        Events.ExecuteOnDeletesMagnetSpecialProgramEmphasisSchoolDescriptors(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsDefaultImplementation(e, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);
                Events.ExecuteOnErrorDeletesMagnetSpecialProgramEmphasisSchoolDescriptors(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>
        /// </summary>
        public partial class DeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse : EdFi.OdsApi.Sdk.v62.Client.ApiResponse, IDeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse(ILogger<DeletesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiMagnetSpecialProgramEmphasisSchoolDescriptorDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiMagnetSpecialProgramEmphasisSchoolDescriptorDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiMagnetSpecialProgramEmphasisSchoolDescriptorDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetMagnetSpecialProgramEmphasisSchoolDescriptors(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<int> magnetSpecialProgramEmphasisSchoolDescriptorId, ref Option<string> snapshotIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="snapshotIdentifier"></param>
        /// <returns></returns>
        private void ValidateGetMagnetSpecialProgramEmphasisSchoolDescriptors(Option<string> snapshotIdentifier)
        {
            if (snapshotIdentifier.IsSet && snapshotIdentifier.Value == null)
                throw new ArgumentNullException(nameof(snapshotIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptorId"></param>
        /// <param name="snapshotIdentifier"></param>
        private void AfterGetMagnetSpecialProgramEmphasisSchoolDescriptorsDefaultImplementation(IGetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<int> magnetSpecialProgramEmphasisSchoolDescriptorId, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterGetMagnetSpecialProgramEmphasisSchoolDescriptors(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, magnetSpecialProgramEmphasisSchoolDescriptorId, snapshotIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptorId"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void AfterGetMagnetSpecialProgramEmphasisSchoolDescriptors(ref bool suppressDefaultLog, IGetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<int> magnetSpecialProgramEmphasisSchoolDescriptorId, Option<string> snapshotIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptorId"></param>
        /// <param name="snapshotIdentifier"></param>
        private void OnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptorsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<int> magnetSpecialProgramEmphasisSchoolDescriptorId, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptors(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, magnetSpecialProgramEmphasisSchoolDescriptorId, snapshotIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptorId"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void OnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptors(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<int> magnetSpecialProgramEmphasisSchoolDescriptorId, Option<string> snapshotIdentifier);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptorId">A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>&gt;</returns>
        public async Task<IGetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse?> GetMagnetSpecialProgramEmphasisSchoolDescriptorsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<int> magnetSpecialProgramEmphasisSchoolDescriptorId = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMagnetSpecialProgramEmphasisSchoolDescriptorsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, magnetSpecialProgramEmphasisSchoolDescriptorId, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptorId">A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>&gt;</returns>
        public async Task<IGetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse> GetMagnetSpecialProgramEmphasisSchoolDescriptorsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<int> magnetSpecialProgramEmphasisSchoolDescriptorId = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetMagnetSpecialProgramEmphasisSchoolDescriptors(snapshotIdentifier);

                FormatGetMagnetSpecialProgramEmphasisSchoolDescriptors(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref magnetSpecialProgramEmphasisSchoolDescriptorId, ref snapshotIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (magnetSpecialProgramEmphasisSchoolDescriptorId.IsSet)
                        parseQueryStringLocalVar["magnetSpecialProgramEmphasisSchoolDescriptorId"] = ClientUtils.ParameterToString(magnetSpecialProgramEmphasisSchoolDescriptorId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (snapshotIdentifier.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse>();

                        GetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMagnetSpecialProgramEmphasisSchoolDescriptorsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, magnetSpecialProgramEmphasisSchoolDescriptorId, snapshotIdentifier);

                        Events.ExecuteOnGetMagnetSpecialProgramEmphasisSchoolDescriptors(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptorsDefaultImplementation(e, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, magnetSpecialProgramEmphasisSchoolDescriptorId, snapshotIdentifier);
                Events.ExecuteOnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptors(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>
        /// </summary>
        public partial class GetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse : EdFi.OdsApi.Sdk.v62.Client.ApiResponse, IGetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse(ILogger<GetMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiMagnetSpecialProgramEmphasisSchoolDescriptor>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiMagnetSpecialProgramEmphasisSchoolDescriptor>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiMagnetSpecialProgramEmphasisSchoolDescriptor>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetMagnetSpecialProgramEmphasisSchoolDescriptorsById(ref string id, ref Option<string> ifNoneMatch, ref Option<string> snapshotIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="snapshotIdentifier"></param>
        /// <returns></returns>
        private void ValidateGetMagnetSpecialProgramEmphasisSchoolDescriptorsById(string id, Option<string> ifNoneMatch, Option<string> snapshotIdentifier)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));

            if (snapshotIdentifier.IsSet && snapshotIdentifier.Value == null)
                throw new ArgumentNullException(nameof(snapshotIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="snapshotIdentifier"></param>
        private void AfterGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdDefaultImplementation(IGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterGetMagnetSpecialProgramEmphasisSchoolDescriptorsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, snapshotIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void AfterGetMagnetSpecialProgramEmphasisSchoolDescriptorsById(ref bool suppressDefaultLog, IGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<string> snapshotIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="snapshotIdentifier"></param>
        private void OnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptorsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, snapshotIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void OnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptorsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<string> snapshotIdentifier);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse?> GetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdAsync(id, ifNoneMatch, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse> GetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetMagnetSpecialProgramEmphasisSchoolDescriptorsById(id, ifNoneMatch, snapshotIdentifier);

                FormatGetMagnetSpecialProgramEmphasisSchoolDescriptorsById(ref id, ref ifNoneMatch, ref snapshotIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (snapshotIdentifier.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse>();

                        GetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, snapshotIdentifier);

                        Events.ExecuteOnGetMagnetSpecialProgramEmphasisSchoolDescriptorsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdDefaultImplementation(e, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, snapshotIdentifier);
                Events.ExecuteOnErrorGetMagnetSpecialProgramEmphasisSchoolDescriptorsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse"/>
        /// </summary>
        public partial class GetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse : EdFi.OdsApi.Sdk.v62.Client.ApiResponse, IGetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse(ILogger<GetMagnetSpecialProgramEmphasisSchoolDescriptorsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v62.Models.All.EdFiMagnetSpecialProgramEmphasisSchoolDescriptor? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v62.Models.All.EdFiMagnetSpecialProgramEmphasisSchoolDescriptor>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v62.Models.All.EdFiMagnetSpecialProgramEmphasisSchoolDescriptor? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> snapshotIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="snapshotIdentifier"></param>
        /// <returns></returns>
        private void ValidateKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors(Option<string> snapshotIdentifier)
        {
            if (snapshotIdentifier.IsSet && snapshotIdentifier.Value == null)
                throw new ArgumentNullException(nameof(snapshotIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        private void AfterKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsDefaultImplementation(IKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void AfterKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors(ref bool suppressDefaultLog, IKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        private void OnErrorKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void OnErrorKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse?> KeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse> KeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors(snapshotIdentifier);

                FormatKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref snapshotIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (snapshotIdentifier.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse>();

                        KeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);

                        Events.ExecuteOnKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsDefaultImplementation(e, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);
                Events.ExecuteOnErrorKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptors(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>
        /// </summary>
        public partial class KeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse : EdFi.OdsApi.Sdk.v62.Client.ApiResponse, IKeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse(ILogger<KeyChangesMagnetSpecialProgramEmphasisSchoolDescriptorsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiMagnetSpecialProgramEmphasisSchoolDescriptorKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiMagnetSpecialProgramEmphasisSchoolDescriptorKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiMagnetSpecialProgramEmphasisSchoolDescriptorKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostMagnetSpecialProgramEmphasisSchoolDescriptor(EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <returns></returns>
        private void ValidatePostMagnetSpecialProgramEmphasisSchoolDescriptor(EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor)
        {
            if (magnetSpecialProgramEmphasisSchoolDescriptor == null)
                throw new ArgumentNullException(nameof(magnetSpecialProgramEmphasisSchoolDescriptor));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        private void AfterPostMagnetSpecialProgramEmphasisSchoolDescriptorDefaultImplementation(IPostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse apiResponseLocalVar, EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor)
        {
            bool suppressDefaultLog = false;
            AfterPostMagnetSpecialProgramEmphasisSchoolDescriptor(ref suppressDefaultLog, apiResponseLocalVar, magnetSpecialProgramEmphasisSchoolDescriptor);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        partial void AfterPostMagnetSpecialProgramEmphasisSchoolDescriptor(ref bool suppressDefaultLog, IPostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse apiResponseLocalVar, EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        private void OnErrorPostMagnetSpecialProgramEmphasisSchoolDescriptorDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostMagnetSpecialProgramEmphasisSchoolDescriptor(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, magnetSpecialProgramEmphasisSchoolDescriptor);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        partial void OnErrorPostMagnetSpecialProgramEmphasisSchoolDescriptor(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">The JSON representation of the \&quot;magnetSpecialProgramEmphasisSchoolDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse"/>&gt;</returns>
        public async Task<IPostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse?> PostMagnetSpecialProgramEmphasisSchoolDescriptorOrDefaultAsync(EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostMagnetSpecialProgramEmphasisSchoolDescriptorAsync(magnetSpecialProgramEmphasisSchoolDescriptor, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">The JSON representation of the \&quot;magnetSpecialProgramEmphasisSchoolDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse"/>&gt;</returns>
        public async Task<IPostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse> PostMagnetSpecialProgramEmphasisSchoolDescriptorAsync(EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostMagnetSpecialProgramEmphasisSchoolDescriptor(magnetSpecialProgramEmphasisSchoolDescriptor);

                FormatPostMagnetSpecialProgramEmphasisSchoolDescriptor(magnetSpecialProgramEmphasisSchoolDescriptor);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors");

                    httpRequestMessageLocalVar.Content = (magnetSpecialProgramEmphasisSchoolDescriptor as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(magnetSpecialProgramEmphasisSchoolDescriptor, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse>();

                        PostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostMagnetSpecialProgramEmphasisSchoolDescriptorDefaultImplementation(apiResponseLocalVar, magnetSpecialProgramEmphasisSchoolDescriptor);

                        Events.ExecuteOnPostMagnetSpecialProgramEmphasisSchoolDescriptor(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostMagnetSpecialProgramEmphasisSchoolDescriptorDefaultImplementation(e, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors", uriBuilderLocalVar.Path, magnetSpecialProgramEmphasisSchoolDescriptor);
                Events.ExecuteOnErrorPostMagnetSpecialProgramEmphasisSchoolDescriptor(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse"/>
        /// </summary>
        public partial class PostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse : EdFi.OdsApi.Sdk.v62.Client.ApiResponse, IPostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse(ILogger<PostMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutMagnetSpecialProgramEmphasisSchoolDescriptor(ref string id, EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutMagnetSpecialProgramEmphasisSchoolDescriptor(string id, EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (magnetSpecialProgramEmphasisSchoolDescriptor == null)
                throw new ArgumentNullException(nameof(magnetSpecialProgramEmphasisSchoolDescriptor));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutMagnetSpecialProgramEmphasisSchoolDescriptorDefaultImplementation(IPutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse apiResponseLocalVar, string id, EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutMagnetSpecialProgramEmphasisSchoolDescriptor(ref suppressDefaultLog, apiResponseLocalVar, id, magnetSpecialProgramEmphasisSchoolDescriptor, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutMagnetSpecialProgramEmphasisSchoolDescriptor(ref bool suppressDefaultLog, IPutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse apiResponseLocalVar, string id, EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutMagnetSpecialProgramEmphasisSchoolDescriptorDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutMagnetSpecialProgramEmphasisSchoolDescriptor(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, magnetSpecialProgramEmphasisSchoolDescriptor, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutMagnetSpecialProgramEmphasisSchoolDescriptor(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">The JSON representation of the \&quot;magnetSpecialProgramEmphasisSchoolDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse"/>&gt;</returns>
        public async Task<IPutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse?> PutMagnetSpecialProgramEmphasisSchoolDescriptorOrDefaultAsync(string id, EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutMagnetSpecialProgramEmphasisSchoolDescriptorAsync(id, magnetSpecialProgramEmphasisSchoolDescriptor, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="magnetSpecialProgramEmphasisSchoolDescriptor">The JSON representation of the \&quot;magnetSpecialProgramEmphasisSchoolDescriptor\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse"/>&gt;</returns>
        public async Task<IPutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse> PutMagnetSpecialProgramEmphasisSchoolDescriptorAsync(string id, EdFiMagnetSpecialProgramEmphasisSchoolDescriptor magnetSpecialProgramEmphasisSchoolDescriptor, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutMagnetSpecialProgramEmphasisSchoolDescriptor(id, magnetSpecialProgramEmphasisSchoolDescriptor, ifMatch);

                FormatPutMagnetSpecialProgramEmphasisSchoolDescriptor(ref id, magnetSpecialProgramEmphasisSchoolDescriptor, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (magnetSpecialProgramEmphasisSchoolDescriptor as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(magnetSpecialProgramEmphasisSchoolDescriptor, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse>();

                        PutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutMagnetSpecialProgramEmphasisSchoolDescriptorDefaultImplementation(apiResponseLocalVar, id, magnetSpecialProgramEmphasisSchoolDescriptor, ifMatch);

                        Events.ExecuteOnPutMagnetSpecialProgramEmphasisSchoolDescriptor(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutMagnetSpecialProgramEmphasisSchoolDescriptorDefaultImplementation(e, "/ed-fi/magnetSpecialProgramEmphasisSchoolDescriptors/{id}", uriBuilderLocalVar.Path, id, magnetSpecialProgramEmphasisSchoolDescriptor, ifMatch);
                Events.ExecuteOnErrorPutMagnetSpecialProgramEmphasisSchoolDescriptor(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse"/>
        /// </summary>
        public partial class PutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse : EdFi.OdsApi.Sdk.v62.Client.ApiResponse, IPutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse(ILogger<PutMagnetSpecialProgramEmphasisSchoolDescriptorApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
