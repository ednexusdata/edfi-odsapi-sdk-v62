// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.OdsApi.Sdk.v62.Client;
using EdFi.OdsApi.Sdk.v62.Models.All;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.OdsApi.Sdk.v62.Apis.All
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStudentAssessmentsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StudentAssessmentsApiEvents Events { get; }

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentAssessmentByIdApiResponse"/>&gt;</returns>
        Task<IDeleteStudentAssessmentByIdApiResponse> DeleteStudentAssessmentByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentAssessmentByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteStudentAssessmentByIdApiResponse?> DeleteStudentAssessmentByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentAssessmentsApiResponse"/>&gt;</returns>
        Task<IDeletesStudentAssessmentsApiResponse> DeletesStudentAssessmentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves deleted resources based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources that have been deleted.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentAssessmentsApiResponse"/>?&gt;</returns>
        Task<IDeletesStudentAssessmentsApiResponse?> DeletesStudentAssessmentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="studentAssessmentIdentifier">A unique number or alphanumeric code assigned to an assessment administered to a student. (optional)</param>
        /// <param name="assessmentIdentifier">A unique number or alphanumeric code assigned to an assessment. (optional)</param>
        /// <param name="varNamespace">Namespace for the assessment. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="reportedSchoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The school year for which the assessment was administered to a student. Among other uses, handles cases in which a student takes a prior-year exam in a subsequent school year during an exam re-test. (optional)</param>
        /// <param name="administrationEnvironmentDescriptor">The environment in which the test was administered. (optional)</param>
        /// <param name="eventCircumstanceDescriptor">An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc. (optional)</param>
        /// <param name="whenAssessedGradeLevelDescriptor">The grade level of a student when assessed. (optional)</param>
        /// <param name="administrationLanguageDescriptor">The language in which an assessment is written and/or administered. (optional)</param>
        /// <param name="platformTypeDescriptor">The platform with which the assessment was delivered to the student during the assessment session. (optional)</param>
        /// <param name="reasonNotTestedDescriptor">The primary reason student is not tested. (optional)</param>
        /// <param name="retestIndicatorDescriptor">Indicator if the test was a retake. (optional)</param>
        /// <param name="administrationDate">The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones. (optional)</param>
        /// <param name="administrationEndDate">The date and time an assessment administration ended. (optional)</param>
        /// <param name="assessedMinutes">Reported time student was assessed in minutes. (optional)</param>
        /// <param name="eventDescription">Describes special events that occur before during or after the assessment session that may impact use of results. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="reportedSchoolIdentifier">A reported school identifier for the school the enrollment at the time of the assessment used when the assigned SchoolId is not known by the assessment vendor. (optional)</param>
        /// <param name="serialNumber">The unique number for the assessment form or answer document. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentAssessmentsApiResponse"/>&gt;</returns>
        Task<IGetStudentAssessmentsApiResponse> GetStudentAssessmentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> studentAssessmentIdentifier = default, Option<string> assessmentIdentifier = default, Option<string> varNamespace = default, Option<string> studentUniqueId = default, Option<int> reportedSchoolId = default, Option<int> schoolYear = default, Option<string> administrationEnvironmentDescriptor = default, Option<string> eventCircumstanceDescriptor = default, Option<string> whenAssessedGradeLevelDescriptor = default, Option<string> administrationLanguageDescriptor = default, Option<string> platformTypeDescriptor = default, Option<string> reasonNotTestedDescriptor = default, Option<string> retestIndicatorDescriptor = default, Option<DateTime> administrationDate = default, Option<DateTime> administrationEndDate = default, Option<int> assessedMinutes = default, Option<string> eventDescription = default, Option<string> id = default, Option<string> reportedSchoolIdentifier = default, Option<string> serialNumber = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="studentAssessmentIdentifier">A unique number or alphanumeric code assigned to an assessment administered to a student. (optional)</param>
        /// <param name="assessmentIdentifier">A unique number or alphanumeric code assigned to an assessment. (optional)</param>
        /// <param name="varNamespace">Namespace for the assessment. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="reportedSchoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The school year for which the assessment was administered to a student. Among other uses, handles cases in which a student takes a prior-year exam in a subsequent school year during an exam re-test. (optional)</param>
        /// <param name="administrationEnvironmentDescriptor">The environment in which the test was administered. (optional)</param>
        /// <param name="eventCircumstanceDescriptor">An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc. (optional)</param>
        /// <param name="whenAssessedGradeLevelDescriptor">The grade level of a student when assessed. (optional)</param>
        /// <param name="administrationLanguageDescriptor">The language in which an assessment is written and/or administered. (optional)</param>
        /// <param name="platformTypeDescriptor">The platform with which the assessment was delivered to the student during the assessment session. (optional)</param>
        /// <param name="reasonNotTestedDescriptor">The primary reason student is not tested. (optional)</param>
        /// <param name="retestIndicatorDescriptor">Indicator if the test was a retake. (optional)</param>
        /// <param name="administrationDate">The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones. (optional)</param>
        /// <param name="administrationEndDate">The date and time an assessment administration ended. (optional)</param>
        /// <param name="assessedMinutes">Reported time student was assessed in minutes. (optional)</param>
        /// <param name="eventDescription">Describes special events that occur before during or after the assessment session that may impact use of results. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="reportedSchoolIdentifier">A reported school identifier for the school the enrollment at the time of the assessment used when the assigned SchoolId is not known by the assessment vendor. (optional)</param>
        /// <param name="serialNumber">The unique number for the assessment form or answer document. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentAssessmentsApiResponse"/>?&gt;</returns>
        Task<IGetStudentAssessmentsApiResponse?> GetStudentAssessmentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> studentAssessmentIdentifier = default, Option<string> assessmentIdentifier = default, Option<string> varNamespace = default, Option<string> studentUniqueId = default, Option<int> reportedSchoolId = default, Option<int> schoolYear = default, Option<string> administrationEnvironmentDescriptor = default, Option<string> eventCircumstanceDescriptor = default, Option<string> whenAssessedGradeLevelDescriptor = default, Option<string> administrationLanguageDescriptor = default, Option<string> platformTypeDescriptor = default, Option<string> reasonNotTestedDescriptor = default, Option<string> retestIndicatorDescriptor = default, Option<DateTime> administrationDate = default, Option<DateTime> administrationEndDate = default, Option<int> assessedMinutes = default, Option<string> eventDescription = default, Option<string> id = default, Option<string> reportedSchoolIdentifier = default, Option<string> serialNumber = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentAssessmentsByIdApiResponse"/>&gt;</returns>
        Task<IGetStudentAssessmentsByIdApiResponse> GetStudentAssessmentsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentAssessmentsByIdApiResponse"/>?&gt;</returns>
        Task<IGetStudentAssessmentsByIdApiResponse?> GetStudentAssessmentsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentAssessmentsApiResponse"/>&gt;</returns>
        Task<IKeyChangesStudentAssessmentsApiResponse> KeyChangesStudentAssessmentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves resources key changes based on change version.
        /// </summary>
        /// <remarks>
        /// This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentAssessmentsApiResponse"/>?&gt;</returns>
        Task<IKeyChangesStudentAssessmentsApiResponse?> KeyChangesStudentAssessmentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentAssessment">The JSON representation of the \&quot;studentAssessment\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentAssessmentApiResponse"/>&gt;</returns>
        Task<IPostStudentAssessmentApiResponse> PostStudentAssessmentAsync(EdFiStudentAssessment studentAssessment, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="studentAssessment">The JSON representation of the \&quot;studentAssessment\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentAssessmentApiResponse"/>?&gt;</returns>
        Task<IPostStudentAssessmentApiResponse?> PostStudentAssessmentOrDefaultAsync(EdFiStudentAssessment studentAssessment, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="studentAssessment">The JSON representation of the \&quot;studentAssessment\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentAssessmentApiResponse"/>&gt;</returns>
        Task<IPutStudentAssessmentApiResponse> PutStudentAssessmentAsync(string id, EdFiStudentAssessment studentAssessment, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="studentAssessment">The JSON representation of the \&quot;studentAssessment\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentAssessmentApiResponse"/>?&gt;</returns>
        Task<IPutStudentAssessmentApiResponse?> PutStudentAssessmentOrDefaultAsync(string id, EdFiStudentAssessment studentAssessment, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteStudentAssessmentByIdApiResponse"/>
    /// </summary>
    public interface IDeleteStudentAssessmentByIdApiResponse : EdFi.OdsApi.Sdk.v62.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeletesStudentAssessmentsApiResponse"/>
    /// </summary>
    public interface IDeletesStudentAssessmentsApiResponse : EdFi.OdsApi.Sdk.v62.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentAssessmentDelete>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentAssessmentsApiResponse"/>
    /// </summary>
    public interface IGetStudentAssessmentsApiResponse : EdFi.OdsApi.Sdk.v62.Client.IApiResponse, IOk<List<EdFiStudentAssessment>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }
    }

    /// <summary>
    /// The <see cref="IGetStudentAssessmentsByIdApiResponse"/>
    /// </summary>
    public interface IGetStudentAssessmentsByIdApiResponse : EdFi.OdsApi.Sdk.v62.Client.IApiResponse, IOk<EdFi.OdsApi.Sdk.v62.Models.All.EdFiStudentAssessment?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }
    }

    /// <summary>
    /// The <see cref="IKeyChangesStudentAssessmentsApiResponse"/>
    /// </summary>
    public interface IKeyChangesStudentAssessmentsApiResponse : EdFi.OdsApi.Sdk.v62.Client.IApiResponse, IOk<List<TrackedChangesEdFiStudentAssessmentKeyChange>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 304 NotModified
        /// </summary>
        /// <returns></returns>
        bool IsNotModified { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }
    }

    /// <summary>
    /// The <see cref="IPostStudentAssessmentApiResponse"/>
    /// </summary>
    public interface IPostStudentAssessmentApiResponse : EdFi.OdsApi.Sdk.v62.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutStudentAssessmentApiResponse"/>
    /// </summary>
    public interface IPutStudentAssessmentApiResponse : EdFi.OdsApi.Sdk.v62.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 412 PreconditionFailed
        /// </summary>
        /// <returns></returns>
        bool IsPreconditionFailed { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StudentAssessmentsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteStudentAssessmentById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteStudentAssessmentById;

        internal void ExecuteOnDeleteStudentAssessmentById(StudentAssessmentsApi.DeleteStudentAssessmentByIdApiResponse apiResponse)
        {
            OnDeleteStudentAssessmentById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteStudentAssessmentById(Exception exception)
        {
            OnErrorDeleteStudentAssessmentById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletesStudentAssessments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletesStudentAssessments;

        internal void ExecuteOnDeletesStudentAssessments(StudentAssessmentsApi.DeletesStudentAssessmentsApiResponse apiResponse)
        {
            OnDeletesStudentAssessments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletesStudentAssessments(Exception exception)
        {
            OnErrorDeletesStudentAssessments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentAssessments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentAssessments;

        internal void ExecuteOnGetStudentAssessments(StudentAssessmentsApi.GetStudentAssessmentsApiResponse apiResponse)
        {
            OnGetStudentAssessments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentAssessments(Exception exception)
        {
            OnErrorGetStudentAssessments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStudentAssessmentsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStudentAssessmentsById;

        internal void ExecuteOnGetStudentAssessmentsById(StudentAssessmentsApi.GetStudentAssessmentsByIdApiResponse apiResponse)
        {
            OnGetStudentAssessmentsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStudentAssessmentsById(Exception exception)
        {
            OnErrorGetStudentAssessmentsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnKeyChangesStudentAssessments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorKeyChangesStudentAssessments;

        internal void ExecuteOnKeyChangesStudentAssessments(StudentAssessmentsApi.KeyChangesStudentAssessmentsApiResponse apiResponse)
        {
            OnKeyChangesStudentAssessments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorKeyChangesStudentAssessments(Exception exception)
        {
            OnErrorKeyChangesStudentAssessments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostStudentAssessment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostStudentAssessment;

        internal void ExecuteOnPostStudentAssessment(StudentAssessmentsApi.PostStudentAssessmentApiResponse apiResponse)
        {
            OnPostStudentAssessment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostStudentAssessment(Exception exception)
        {
            OnErrorPostStudentAssessment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutStudentAssessment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutStudentAssessment;

        internal void ExecuteOnPutStudentAssessment(StudentAssessmentsApi.PutStudentAssessmentApiResponse apiResponse)
        {
            OnPutStudentAssessment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutStudentAssessment(Exception exception)
        {
            OnErrorPutStudentAssessment?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StudentAssessmentsApi : IStudentAssessmentsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StudentAssessmentsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StudentAssessmentsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentAssessmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StudentAssessmentsApi(ILogger<StudentAssessmentsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StudentAssessmentsApiEvents studentAssessmentsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StudentAssessmentsApi>();
            HttpClient = httpClient;
            Events = studentAssessmentsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteStudentAssessmentById(ref string id, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidateDeleteStudentAssessmentById(string id, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void AfterDeleteStudentAssessmentByIdDefaultImplementation(IDeleteStudentAssessmentByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterDeleteStudentAssessmentById(ref suppressDefaultLog, apiResponseLocalVar, id, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void AfterDeleteStudentAssessmentById(ref bool suppressDefaultLog, IDeleteStudentAssessmentByIdApiResponse apiResponseLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorDeleteStudentAssessmentByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteStudentAssessmentById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorDeleteStudentAssessmentById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifMatch);

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentAssessmentByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentAssessmentByIdApiResponse?> DeleteStudentAssessmentByIdOrDefaultAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteStudentAssessmentByIdAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteStudentAssessmentByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteStudentAssessmentByIdApiResponse> DeleteStudentAssessmentByIdAsync(string id, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteStudentAssessmentById(id, ifMatch);

                FormatDeleteStudentAssessmentById(ref id, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentAssessments/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentAssessments/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteStudentAssessmentByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteStudentAssessmentByIdApiResponse>();

                        DeleteStudentAssessmentByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentAssessments/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteStudentAssessmentByIdDefaultImplementation(apiResponseLocalVar, id, ifMatch);

                        Events.ExecuteOnDeleteStudentAssessmentById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteStudentAssessmentByIdDefaultImplementation(e, "/ed-fi/studentAssessments/{id}", uriBuilderLocalVar.Path, id, ifMatch);
                Events.ExecuteOnErrorDeleteStudentAssessmentById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteStudentAssessmentByIdApiResponse"/>
        /// </summary>
        public partial class DeleteStudentAssessmentByIdApiResponse : EdFi.OdsApi.Sdk.v62.Client.ApiResponse, IDeleteStudentAssessmentByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteStudentAssessmentByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteStudentAssessmentByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteStudentAssessmentByIdApiResponse(ILogger<DeleteStudentAssessmentByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletesStudentAssessments(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> snapshotIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="snapshotIdentifier"></param>
        /// <returns></returns>
        private void ValidateDeletesStudentAssessments(Option<string> snapshotIdentifier)
        {
            if (snapshotIdentifier.IsSet && snapshotIdentifier.Value == null)
                throw new ArgumentNullException(nameof(snapshotIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        private void AfterDeletesStudentAssessmentsDefaultImplementation(IDeletesStudentAssessmentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterDeletesStudentAssessments(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void AfterDeletesStudentAssessments(ref bool suppressDefaultLog, IDeletesStudentAssessmentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        private void OnErrorDeletesStudentAssessmentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletesStudentAssessments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void OnErrorDeletesStudentAssessments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier);

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentAssessmentsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentAssessmentsApiResponse?> DeletesStudentAssessmentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletesStudentAssessmentsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves deleted resources based on change version. This operation is used to retrieve identifying information about resources that have been deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletesStudentAssessmentsApiResponse"/>&gt;</returns>
        public async Task<IDeletesStudentAssessmentsApiResponse> DeletesStudentAssessmentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeletesStudentAssessments(snapshotIdentifier);

                FormatDeletesStudentAssessments(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref snapshotIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentAssessments/deletes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentAssessments/deletes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (snapshotIdentifier.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletesStudentAssessmentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletesStudentAssessmentsApiResponse>();

                        DeletesStudentAssessmentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentAssessments/deletes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletesStudentAssessmentsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);

                        Events.ExecuteOnDeletesStudentAssessments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletesStudentAssessmentsDefaultImplementation(e, "/ed-fi/studentAssessments/deletes", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);
                Events.ExecuteOnErrorDeletesStudentAssessments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletesStudentAssessmentsApiResponse"/>
        /// </summary>
        public partial class DeletesStudentAssessmentsApiResponse : EdFi.OdsApi.Sdk.v62.Client.ApiResponse, IDeletesStudentAssessmentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletesStudentAssessmentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletesStudentAssessmentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletesStudentAssessmentsApiResponse(ILogger<DeletesStudentAssessmentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentAssessmentDelete>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentAssessmentDelete>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentAssessmentDelete>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentAssessments(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> studentAssessmentIdentifier, ref Option<string> assessmentIdentifier, ref Option<string> varNamespace, ref Option<string> studentUniqueId, ref Option<int> reportedSchoolId, ref Option<int> schoolYear, ref Option<string> administrationEnvironmentDescriptor, ref Option<string> eventCircumstanceDescriptor, ref Option<string> whenAssessedGradeLevelDescriptor, ref Option<string> administrationLanguageDescriptor, ref Option<string> platformTypeDescriptor, ref Option<string> reasonNotTestedDescriptor, ref Option<string> retestIndicatorDescriptor, ref Option<DateTime> administrationDate, ref Option<DateTime> administrationEndDate, ref Option<int> assessedMinutes, ref Option<string> eventDescription, ref Option<string> id, ref Option<string> reportedSchoolIdentifier, ref Option<string> serialNumber, ref Option<string> snapshotIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="studentAssessmentIdentifier"></param>
        /// <param name="assessmentIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="administrationEnvironmentDescriptor"></param>
        /// <param name="eventCircumstanceDescriptor"></param>
        /// <param name="whenAssessedGradeLevelDescriptor"></param>
        /// <param name="administrationLanguageDescriptor"></param>
        /// <param name="platformTypeDescriptor"></param>
        /// <param name="reasonNotTestedDescriptor"></param>
        /// <param name="retestIndicatorDescriptor"></param>
        /// <param name="eventDescription"></param>
        /// <param name="id"></param>
        /// <param name="reportedSchoolIdentifier"></param>
        /// <param name="serialNumber"></param>
        /// <param name="snapshotIdentifier"></param>
        /// <returns></returns>
        private void ValidateGetStudentAssessments(Option<string> studentAssessmentIdentifier, Option<string> assessmentIdentifier, Option<string> varNamespace, Option<string> studentUniqueId, Option<string> administrationEnvironmentDescriptor, Option<string> eventCircumstanceDescriptor, Option<string> whenAssessedGradeLevelDescriptor, Option<string> administrationLanguageDescriptor, Option<string> platformTypeDescriptor, Option<string> reasonNotTestedDescriptor, Option<string> retestIndicatorDescriptor, Option<string> eventDescription, Option<string> id, Option<string> reportedSchoolIdentifier, Option<string> serialNumber, Option<string> snapshotIdentifier)
        {
            if (studentAssessmentIdentifier.IsSet && studentAssessmentIdentifier.Value == null)
                throw new ArgumentNullException(nameof(studentAssessmentIdentifier));

            if (assessmentIdentifier.IsSet && assessmentIdentifier.Value == null)
                throw new ArgumentNullException(nameof(assessmentIdentifier));

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace));

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId));

            if (administrationEnvironmentDescriptor.IsSet && administrationEnvironmentDescriptor.Value == null)
                throw new ArgumentNullException(nameof(administrationEnvironmentDescriptor));

            if (eventCircumstanceDescriptor.IsSet && eventCircumstanceDescriptor.Value == null)
                throw new ArgumentNullException(nameof(eventCircumstanceDescriptor));

            if (whenAssessedGradeLevelDescriptor.IsSet && whenAssessedGradeLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(whenAssessedGradeLevelDescriptor));

            if (administrationLanguageDescriptor.IsSet && administrationLanguageDescriptor.Value == null)
                throw new ArgumentNullException(nameof(administrationLanguageDescriptor));

            if (platformTypeDescriptor.IsSet && platformTypeDescriptor.Value == null)
                throw new ArgumentNullException(nameof(platformTypeDescriptor));

            if (reasonNotTestedDescriptor.IsSet && reasonNotTestedDescriptor.Value == null)
                throw new ArgumentNullException(nameof(reasonNotTestedDescriptor));

            if (retestIndicatorDescriptor.IsSet && retestIndicatorDescriptor.Value == null)
                throw new ArgumentNullException(nameof(retestIndicatorDescriptor));

            if (eventDescription.IsSet && eventDescription.Value == null)
                throw new ArgumentNullException(nameof(eventDescription));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (reportedSchoolIdentifier.IsSet && reportedSchoolIdentifier.Value == null)
                throw new ArgumentNullException(nameof(reportedSchoolIdentifier));

            if (serialNumber.IsSet && serialNumber.Value == null)
                throw new ArgumentNullException(nameof(serialNumber));

            if (snapshotIdentifier.IsSet && snapshotIdentifier.Value == null)
                throw new ArgumentNullException(nameof(snapshotIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="studentAssessmentIdentifier"></param>
        /// <param name="assessmentIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="reportedSchoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="administrationEnvironmentDescriptor"></param>
        /// <param name="eventCircumstanceDescriptor"></param>
        /// <param name="whenAssessedGradeLevelDescriptor"></param>
        /// <param name="administrationLanguageDescriptor"></param>
        /// <param name="platformTypeDescriptor"></param>
        /// <param name="reasonNotTestedDescriptor"></param>
        /// <param name="retestIndicatorDescriptor"></param>
        /// <param name="administrationDate"></param>
        /// <param name="administrationEndDate"></param>
        /// <param name="assessedMinutes"></param>
        /// <param name="eventDescription"></param>
        /// <param name="id"></param>
        /// <param name="reportedSchoolIdentifier"></param>
        /// <param name="serialNumber"></param>
        /// <param name="snapshotIdentifier"></param>
        private void AfterGetStudentAssessmentsDefaultImplementation(IGetStudentAssessmentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> studentAssessmentIdentifier, Option<string> assessmentIdentifier, Option<string> varNamespace, Option<string> studentUniqueId, Option<int> reportedSchoolId, Option<int> schoolYear, Option<string> administrationEnvironmentDescriptor, Option<string> eventCircumstanceDescriptor, Option<string> whenAssessedGradeLevelDescriptor, Option<string> administrationLanguageDescriptor, Option<string> platformTypeDescriptor, Option<string> reasonNotTestedDescriptor, Option<string> retestIndicatorDescriptor, Option<DateTime> administrationDate, Option<DateTime> administrationEndDate, Option<int> assessedMinutes, Option<string> eventDescription, Option<string> id, Option<string> reportedSchoolIdentifier, Option<string> serialNumber, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentAssessments(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, studentAssessmentIdentifier, assessmentIdentifier, varNamespace, studentUniqueId, reportedSchoolId, schoolYear, administrationEnvironmentDescriptor, eventCircumstanceDescriptor, whenAssessedGradeLevelDescriptor, administrationLanguageDescriptor, platformTypeDescriptor, reasonNotTestedDescriptor, retestIndicatorDescriptor, administrationDate, administrationEndDate, assessedMinutes, eventDescription, id, reportedSchoolIdentifier, serialNumber, snapshotIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="studentAssessmentIdentifier"></param>
        /// <param name="assessmentIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="reportedSchoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="administrationEnvironmentDescriptor"></param>
        /// <param name="eventCircumstanceDescriptor"></param>
        /// <param name="whenAssessedGradeLevelDescriptor"></param>
        /// <param name="administrationLanguageDescriptor"></param>
        /// <param name="platformTypeDescriptor"></param>
        /// <param name="reasonNotTestedDescriptor"></param>
        /// <param name="retestIndicatorDescriptor"></param>
        /// <param name="administrationDate"></param>
        /// <param name="administrationEndDate"></param>
        /// <param name="assessedMinutes"></param>
        /// <param name="eventDescription"></param>
        /// <param name="id"></param>
        /// <param name="reportedSchoolIdentifier"></param>
        /// <param name="serialNumber"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void AfterGetStudentAssessments(ref bool suppressDefaultLog, IGetStudentAssessmentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> studentAssessmentIdentifier, Option<string> assessmentIdentifier, Option<string> varNamespace, Option<string> studentUniqueId, Option<int> reportedSchoolId, Option<int> schoolYear, Option<string> administrationEnvironmentDescriptor, Option<string> eventCircumstanceDescriptor, Option<string> whenAssessedGradeLevelDescriptor, Option<string> administrationLanguageDescriptor, Option<string> platformTypeDescriptor, Option<string> reasonNotTestedDescriptor, Option<string> retestIndicatorDescriptor, Option<DateTime> administrationDate, Option<DateTime> administrationEndDate, Option<int> assessedMinutes, Option<string> eventDescription, Option<string> id, Option<string> reportedSchoolIdentifier, Option<string> serialNumber, Option<string> snapshotIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="studentAssessmentIdentifier"></param>
        /// <param name="assessmentIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="reportedSchoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="administrationEnvironmentDescriptor"></param>
        /// <param name="eventCircumstanceDescriptor"></param>
        /// <param name="whenAssessedGradeLevelDescriptor"></param>
        /// <param name="administrationLanguageDescriptor"></param>
        /// <param name="platformTypeDescriptor"></param>
        /// <param name="reasonNotTestedDescriptor"></param>
        /// <param name="retestIndicatorDescriptor"></param>
        /// <param name="administrationDate"></param>
        /// <param name="administrationEndDate"></param>
        /// <param name="assessedMinutes"></param>
        /// <param name="eventDescription"></param>
        /// <param name="id"></param>
        /// <param name="reportedSchoolIdentifier"></param>
        /// <param name="serialNumber"></param>
        /// <param name="snapshotIdentifier"></param>
        private void OnErrorGetStudentAssessmentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> studentAssessmentIdentifier, Option<string> assessmentIdentifier, Option<string> varNamespace, Option<string> studentUniqueId, Option<int> reportedSchoolId, Option<int> schoolYear, Option<string> administrationEnvironmentDescriptor, Option<string> eventCircumstanceDescriptor, Option<string> whenAssessedGradeLevelDescriptor, Option<string> administrationLanguageDescriptor, Option<string> platformTypeDescriptor, Option<string> reasonNotTestedDescriptor, Option<string> retestIndicatorDescriptor, Option<DateTime> administrationDate, Option<DateTime> administrationEndDate, Option<int> assessedMinutes, Option<string> eventDescription, Option<string> id, Option<string> reportedSchoolIdentifier, Option<string> serialNumber, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentAssessments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, studentAssessmentIdentifier, assessmentIdentifier, varNamespace, studentUniqueId, reportedSchoolId, schoolYear, administrationEnvironmentDescriptor, eventCircumstanceDescriptor, whenAssessedGradeLevelDescriptor, administrationLanguageDescriptor, platformTypeDescriptor, reasonNotTestedDescriptor, retestIndicatorDescriptor, administrationDate, administrationEndDate, assessedMinutes, eventDescription, id, reportedSchoolIdentifier, serialNumber, snapshotIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="studentAssessmentIdentifier"></param>
        /// <param name="assessmentIdentifier"></param>
        /// <param name="varNamespace"></param>
        /// <param name="studentUniqueId"></param>
        /// <param name="reportedSchoolId"></param>
        /// <param name="schoolYear"></param>
        /// <param name="administrationEnvironmentDescriptor"></param>
        /// <param name="eventCircumstanceDescriptor"></param>
        /// <param name="whenAssessedGradeLevelDescriptor"></param>
        /// <param name="administrationLanguageDescriptor"></param>
        /// <param name="platformTypeDescriptor"></param>
        /// <param name="reasonNotTestedDescriptor"></param>
        /// <param name="retestIndicatorDescriptor"></param>
        /// <param name="administrationDate"></param>
        /// <param name="administrationEndDate"></param>
        /// <param name="assessedMinutes"></param>
        /// <param name="eventDescription"></param>
        /// <param name="id"></param>
        /// <param name="reportedSchoolIdentifier"></param>
        /// <param name="serialNumber"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void OnErrorGetStudentAssessments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> studentAssessmentIdentifier, Option<string> assessmentIdentifier, Option<string> varNamespace, Option<string> studentUniqueId, Option<int> reportedSchoolId, Option<int> schoolYear, Option<string> administrationEnvironmentDescriptor, Option<string> eventCircumstanceDescriptor, Option<string> whenAssessedGradeLevelDescriptor, Option<string> administrationLanguageDescriptor, Option<string> platformTypeDescriptor, Option<string> reasonNotTestedDescriptor, Option<string> retestIndicatorDescriptor, Option<DateTime> administrationDate, Option<DateTime> administrationEndDate, Option<int> assessedMinutes, Option<string> eventDescription, Option<string> id, Option<string> reportedSchoolIdentifier, Option<string> serialNumber, Option<string> snapshotIdentifier);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="studentAssessmentIdentifier">A unique number or alphanumeric code assigned to an assessment administered to a student. (optional)</param>
        /// <param name="assessmentIdentifier">A unique number or alphanumeric code assigned to an assessment. (optional)</param>
        /// <param name="varNamespace">Namespace for the assessment. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="reportedSchoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The school year for which the assessment was administered to a student. Among other uses, handles cases in which a student takes a prior-year exam in a subsequent school year during an exam re-test. (optional)</param>
        /// <param name="administrationEnvironmentDescriptor">The environment in which the test was administered. (optional)</param>
        /// <param name="eventCircumstanceDescriptor">An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc. (optional)</param>
        /// <param name="whenAssessedGradeLevelDescriptor">The grade level of a student when assessed. (optional)</param>
        /// <param name="administrationLanguageDescriptor">The language in which an assessment is written and/or administered. (optional)</param>
        /// <param name="platformTypeDescriptor">The platform with which the assessment was delivered to the student during the assessment session. (optional)</param>
        /// <param name="reasonNotTestedDescriptor">The primary reason student is not tested. (optional)</param>
        /// <param name="retestIndicatorDescriptor">Indicator if the test was a retake. (optional)</param>
        /// <param name="administrationDate">The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones. (optional)</param>
        /// <param name="administrationEndDate">The date and time an assessment administration ended. (optional)</param>
        /// <param name="assessedMinutes">Reported time student was assessed in minutes. (optional)</param>
        /// <param name="eventDescription">Describes special events that occur before during or after the assessment session that may impact use of results. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="reportedSchoolIdentifier">A reported school identifier for the school the enrollment at the time of the assessment used when the assigned SchoolId is not known by the assessment vendor. (optional)</param>
        /// <param name="serialNumber">The unique number for the assessment form or answer document. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentAssessmentsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentAssessmentsApiResponse?> GetStudentAssessmentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> studentAssessmentIdentifier = default, Option<string> assessmentIdentifier = default, Option<string> varNamespace = default, Option<string> studentUniqueId = default, Option<int> reportedSchoolId = default, Option<int> schoolYear = default, Option<string> administrationEnvironmentDescriptor = default, Option<string> eventCircumstanceDescriptor = default, Option<string> whenAssessedGradeLevelDescriptor = default, Option<string> administrationLanguageDescriptor = default, Option<string> platformTypeDescriptor = default, Option<string> reasonNotTestedDescriptor = default, Option<string> retestIndicatorDescriptor = default, Option<DateTime> administrationDate = default, Option<DateTime> administrationEndDate = default, Option<int> assessedMinutes = default, Option<string> eventDescription = default, Option<string> id = default, Option<string> reportedSchoolIdentifier = default, Option<string> serialNumber = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentAssessmentsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, studentAssessmentIdentifier, assessmentIdentifier, varNamespace, studentUniqueId, reportedSchoolId, schoolYear, administrationEnvironmentDescriptor, eventCircumstanceDescriptor, whenAssessedGradeLevelDescriptor, administrationLanguageDescriptor, platformTypeDescriptor, reasonNotTestedDescriptor, retestIndicatorDescriptor, administrationDate, administrationEndDate, assessedMinutes, eventDescription, id, reportedSchoolIdentifier, serialNumber, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="studentAssessmentIdentifier">A unique number or alphanumeric code assigned to an assessment administered to a student. (optional)</param>
        /// <param name="assessmentIdentifier">A unique number or alphanumeric code assigned to an assessment. (optional)</param>
        /// <param name="varNamespace">Namespace for the assessment. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="reportedSchoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The school year for which the assessment was administered to a student. Among other uses, handles cases in which a student takes a prior-year exam in a subsequent school year during an exam re-test. (optional)</param>
        /// <param name="administrationEnvironmentDescriptor">The environment in which the test was administered. (optional)</param>
        /// <param name="eventCircumstanceDescriptor">An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc. (optional)</param>
        /// <param name="whenAssessedGradeLevelDescriptor">The grade level of a student when assessed. (optional)</param>
        /// <param name="administrationLanguageDescriptor">The language in which an assessment is written and/or administered. (optional)</param>
        /// <param name="platformTypeDescriptor">The platform with which the assessment was delivered to the student during the assessment session. (optional)</param>
        /// <param name="reasonNotTestedDescriptor">The primary reason student is not tested. (optional)</param>
        /// <param name="retestIndicatorDescriptor">Indicator if the test was a retake. (optional)</param>
        /// <param name="administrationDate">The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones. (optional)</param>
        /// <param name="administrationEndDate">The date and time an assessment administration ended. (optional)</param>
        /// <param name="assessedMinutes">Reported time student was assessed in minutes. (optional)</param>
        /// <param name="eventDescription">Describes special events that occur before during or after the assessment session that may impact use of results. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="reportedSchoolIdentifier">A reported school identifier for the school the enrollment at the time of the assessment used when the assigned SchoolId is not known by the assessment vendor. (optional)</param>
        /// <param name="serialNumber">The unique number for the assessment form or answer document. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentAssessmentsApiResponse"/>&gt;</returns>
        public async Task<IGetStudentAssessmentsApiResponse> GetStudentAssessmentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> studentAssessmentIdentifier = default, Option<string> assessmentIdentifier = default, Option<string> varNamespace = default, Option<string> studentUniqueId = default, Option<int> reportedSchoolId = default, Option<int> schoolYear = default, Option<string> administrationEnvironmentDescriptor = default, Option<string> eventCircumstanceDescriptor = default, Option<string> whenAssessedGradeLevelDescriptor = default, Option<string> administrationLanguageDescriptor = default, Option<string> platformTypeDescriptor = default, Option<string> reasonNotTestedDescriptor = default, Option<string> retestIndicatorDescriptor = default, Option<DateTime> administrationDate = default, Option<DateTime> administrationEndDate = default, Option<int> assessedMinutes = default, Option<string> eventDescription = default, Option<string> id = default, Option<string> reportedSchoolIdentifier = default, Option<string> serialNumber = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentAssessments(studentAssessmentIdentifier, assessmentIdentifier, varNamespace, studentUniqueId, administrationEnvironmentDescriptor, eventCircumstanceDescriptor, whenAssessedGradeLevelDescriptor, administrationLanguageDescriptor, platformTypeDescriptor, reasonNotTestedDescriptor, retestIndicatorDescriptor, eventDescription, id, reportedSchoolIdentifier, serialNumber, snapshotIdentifier);

                FormatGetStudentAssessments(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref studentAssessmentIdentifier, ref assessmentIdentifier, ref varNamespace, ref studentUniqueId, ref reportedSchoolId, ref schoolYear, ref administrationEnvironmentDescriptor, ref eventCircumstanceDescriptor, ref whenAssessedGradeLevelDescriptor, ref administrationLanguageDescriptor, ref platformTypeDescriptor, ref reasonNotTestedDescriptor, ref retestIndicatorDescriptor, ref administrationDate, ref administrationEndDate, ref assessedMinutes, ref eventDescription, ref id, ref reportedSchoolIdentifier, ref serialNumber, ref snapshotIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentAssessments"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentAssessments");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    if (studentAssessmentIdentifier.IsSet)
                        parseQueryStringLocalVar["studentAssessmentIdentifier"] = ClientUtils.ParameterToString(studentAssessmentIdentifier.Value);

                    if (assessmentIdentifier.IsSet)
                        parseQueryStringLocalVar["assessmentIdentifier"] = ClientUtils.ParameterToString(assessmentIdentifier.Value);

                    if (varNamespace.IsSet)
                        parseQueryStringLocalVar["namespace"] = ClientUtils.ParameterToString(varNamespace.Value);

                    if (studentUniqueId.IsSet)
                        parseQueryStringLocalVar["studentUniqueId"] = ClientUtils.ParameterToString(studentUniqueId.Value);

                    if (reportedSchoolId.IsSet)
                        parseQueryStringLocalVar["reportedSchoolId"] = ClientUtils.ParameterToString(reportedSchoolId.Value);

                    if (schoolYear.IsSet)
                        parseQueryStringLocalVar["schoolYear"] = ClientUtils.ParameterToString(schoolYear.Value);

                    if (administrationEnvironmentDescriptor.IsSet)
                        parseQueryStringLocalVar["administrationEnvironmentDescriptor"] = ClientUtils.ParameterToString(administrationEnvironmentDescriptor.Value);

                    if (eventCircumstanceDescriptor.IsSet)
                        parseQueryStringLocalVar["eventCircumstanceDescriptor"] = ClientUtils.ParameterToString(eventCircumstanceDescriptor.Value);

                    if (whenAssessedGradeLevelDescriptor.IsSet)
                        parseQueryStringLocalVar["whenAssessedGradeLevelDescriptor"] = ClientUtils.ParameterToString(whenAssessedGradeLevelDescriptor.Value);

                    if (administrationLanguageDescriptor.IsSet)
                        parseQueryStringLocalVar["administrationLanguageDescriptor"] = ClientUtils.ParameterToString(administrationLanguageDescriptor.Value);

                    if (platformTypeDescriptor.IsSet)
                        parseQueryStringLocalVar["platformTypeDescriptor"] = ClientUtils.ParameterToString(platformTypeDescriptor.Value);

                    if (reasonNotTestedDescriptor.IsSet)
                        parseQueryStringLocalVar["reasonNotTestedDescriptor"] = ClientUtils.ParameterToString(reasonNotTestedDescriptor.Value);

                    if (retestIndicatorDescriptor.IsSet)
                        parseQueryStringLocalVar["retestIndicatorDescriptor"] = ClientUtils.ParameterToString(retestIndicatorDescriptor.Value);

                    if (administrationDate.IsSet)
                        parseQueryStringLocalVar["administrationDate"] = ClientUtils.ParameterToString(administrationDate.Value);

                    if (administrationEndDate.IsSet)
                        parseQueryStringLocalVar["administrationEndDate"] = ClientUtils.ParameterToString(administrationEndDate.Value);

                    if (assessedMinutes.IsSet)
                        parseQueryStringLocalVar["assessedMinutes"] = ClientUtils.ParameterToString(assessedMinutes.Value);

                    if (eventDescription.IsSet)
                        parseQueryStringLocalVar["eventDescription"] = ClientUtils.ParameterToString(eventDescription.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (reportedSchoolIdentifier.IsSet)
                        parseQueryStringLocalVar["reportedSchoolIdentifier"] = ClientUtils.ParameterToString(reportedSchoolIdentifier.Value);

                    if (serialNumber.IsSet)
                        parseQueryStringLocalVar["serialNumber"] = ClientUtils.ParameterToString(serialNumber.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (snapshotIdentifier.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentAssessmentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentAssessmentsApiResponse>();

                        GetStudentAssessmentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentAssessments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentAssessmentsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, studentAssessmentIdentifier, assessmentIdentifier, varNamespace, studentUniqueId, reportedSchoolId, schoolYear, administrationEnvironmentDescriptor, eventCircumstanceDescriptor, whenAssessedGradeLevelDescriptor, administrationLanguageDescriptor, platformTypeDescriptor, reasonNotTestedDescriptor, retestIndicatorDescriptor, administrationDate, administrationEndDate, assessedMinutes, eventDescription, id, reportedSchoolIdentifier, serialNumber, snapshotIdentifier);

                        Events.ExecuteOnGetStudentAssessments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentAssessmentsDefaultImplementation(e, "/ed-fi/studentAssessments", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, studentAssessmentIdentifier, assessmentIdentifier, varNamespace, studentUniqueId, reportedSchoolId, schoolYear, administrationEnvironmentDescriptor, eventCircumstanceDescriptor, whenAssessedGradeLevelDescriptor, administrationLanguageDescriptor, platformTypeDescriptor, reasonNotTestedDescriptor, retestIndicatorDescriptor, administrationDate, administrationEndDate, assessedMinutes, eventDescription, id, reportedSchoolIdentifier, serialNumber, snapshotIdentifier);
                Events.ExecuteOnErrorGetStudentAssessments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentAssessmentsApiResponse"/>
        /// </summary>
        public partial class GetStudentAssessmentsApiResponse : EdFi.OdsApi.Sdk.v62.Client.ApiResponse, IGetStudentAssessmentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentAssessmentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentAssessmentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentAssessmentsApiResponse(ILogger<GetStudentAssessmentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EdFiStudentAssessment>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EdFiStudentAssessment>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EdFiStudentAssessment>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStudentAssessmentsById(ref string id, ref Option<string> ifNoneMatch, ref Option<string> snapshotIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="snapshotIdentifier"></param>
        /// <returns></returns>
        private void ValidateGetStudentAssessmentsById(string id, Option<string> ifNoneMatch, Option<string> snapshotIdentifier)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (ifNoneMatch.IsSet && ifNoneMatch.Value == null)
                throw new ArgumentNullException(nameof(ifNoneMatch));

            if (snapshotIdentifier.IsSet && snapshotIdentifier.Value == null)
                throw new ArgumentNullException(nameof(snapshotIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="snapshotIdentifier"></param>
        private void AfterGetStudentAssessmentsByIdDefaultImplementation(IGetStudentAssessmentsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterGetStudentAssessmentsById(ref suppressDefaultLog, apiResponseLocalVar, id, ifNoneMatch, snapshotIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void AfterGetStudentAssessmentsById(ref bool suppressDefaultLog, IGetStudentAssessmentsByIdApiResponse apiResponseLocalVar, string id, Option<string> ifNoneMatch, Option<string> snapshotIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="snapshotIdentifier"></param>
        private void OnErrorGetStudentAssessmentsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStudentAssessmentsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, ifNoneMatch, snapshotIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void OnErrorGetStudentAssessmentsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> ifNoneMatch, Option<string> snapshotIdentifier);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentAssessmentsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentAssessmentsByIdApiResponse?> GetStudentAssessmentsByIdOrDefaultAsync(string id, Option<string> ifNoneMatch = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStudentAssessmentsByIdAsync(id, ifNoneMatch, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStudentAssessmentsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStudentAssessmentsByIdApiResponse> GetStudentAssessmentsByIdAsync(string id, Option<string> ifNoneMatch = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStudentAssessmentsById(id, ifNoneMatch, snapshotIdentifier);

                FormatGetStudentAssessmentsById(ref id, ref ifNoneMatch, ref snapshotIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentAssessments/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentAssessments/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifNoneMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch.Value));

                    if (snapshotIdentifier.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStudentAssessmentsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStudentAssessmentsByIdApiResponse>();

                        GetStudentAssessmentsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentAssessments/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStudentAssessmentsByIdDefaultImplementation(apiResponseLocalVar, id, ifNoneMatch, snapshotIdentifier);

                        Events.ExecuteOnGetStudentAssessmentsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStudentAssessmentsByIdDefaultImplementation(e, "/ed-fi/studentAssessments/{id}", uriBuilderLocalVar.Path, id, ifNoneMatch, snapshotIdentifier);
                Events.ExecuteOnErrorGetStudentAssessmentsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStudentAssessmentsByIdApiResponse"/>
        /// </summary>
        public partial class GetStudentAssessmentsByIdApiResponse : EdFi.OdsApi.Sdk.v62.Client.ApiResponse, IGetStudentAssessmentsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStudentAssessmentsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStudentAssessmentsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStudentAssessmentsByIdApiResponse(ILogger<GetStudentAssessmentsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.OdsApi.Sdk.v62.Models.All.EdFiStudentAssessment? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.OdsApi.Sdk.v62.Models.All.EdFiStudentAssessment>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.OdsApi.Sdk.v62.Models.All.EdFiStudentAssessment? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatKeyChangesStudentAssessments(ref Option<int> offset, ref Option<int> limit, ref Option<long> minChangeVersion, ref Option<long> maxChangeVersion, ref Option<bool> totalCount, ref Option<string> snapshotIdentifier);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="snapshotIdentifier"></param>
        /// <returns></returns>
        private void ValidateKeyChangesStudentAssessments(Option<string> snapshotIdentifier)
        {
            if (snapshotIdentifier.IsSet && snapshotIdentifier.Value == null)
                throw new ArgumentNullException(nameof(snapshotIdentifier));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        private void AfterKeyChangesStudentAssessmentsDefaultImplementation(IKeyChangesStudentAssessmentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLog = false;
            AfterKeyChangesStudentAssessments(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void AfterKeyChangesStudentAssessments(ref bool suppressDefaultLog, IKeyChangesStudentAssessmentsApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        private void OnErrorKeyChangesStudentAssessmentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorKeyChangesStudentAssessments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="minChangeVersion"></param>
        /// <param name="maxChangeVersion"></param>
        /// <param name="totalCount"></param>
        /// <param name="snapshotIdentifier"></param>
        partial void OnErrorKeyChangesStudentAssessments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<long> minChangeVersion, Option<long> maxChangeVersion, Option<bool> totalCount, Option<string> snapshotIdentifier);

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentAssessmentsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentAssessmentsApiResponse?> KeyChangesStudentAssessmentsOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await KeyChangesStudentAssessmentsAsync(offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves resources key changes based on change version. This operation is used to retrieve identifying information about resources whose key values have been changed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="minChangeVersion">Used in synchronization to set sequence minimum ChangeVersion (optional)</param>
        /// <param name="maxChangeVersion">Used in synchronization to set sequence maximum ChangeVersion (optional)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IKeyChangesStudentAssessmentsApiResponse"/>&gt;</returns>
        public async Task<IKeyChangesStudentAssessmentsApiResponse> KeyChangesStudentAssessmentsAsync(Option<int> offset = default, Option<int> limit = default, Option<long> minChangeVersion = default, Option<long> maxChangeVersion = default, Option<bool> totalCount = default, Option<string> snapshotIdentifier = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateKeyChangesStudentAssessments(snapshotIdentifier);

                FormatKeyChangesStudentAssessments(ref offset, ref limit, ref minChangeVersion, ref maxChangeVersion, ref totalCount, ref snapshotIdentifier);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentAssessments/keyChanges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentAssessments/keyChanges");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (minChangeVersion.IsSet)
                        parseQueryStringLocalVar["minChangeVersion"] = ClientUtils.ParameterToString(minChangeVersion.Value);

                    if (maxChangeVersion.IsSet)
                        parseQueryStringLocalVar["maxChangeVersion"] = ClientUtils.ParameterToString(maxChangeVersion.Value);

                    if (totalCount.IsSet)
                        parseQueryStringLocalVar["totalCount"] = ClientUtils.ParameterToString(totalCount.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (snapshotIdentifier.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<KeyChangesStudentAssessmentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<KeyChangesStudentAssessmentsApiResponse>();

                        KeyChangesStudentAssessmentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentAssessments/keyChanges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterKeyChangesStudentAssessmentsDefaultImplementation(apiResponseLocalVar, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);

                        Events.ExecuteOnKeyChangesStudentAssessments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeyChangesStudentAssessmentsDefaultImplementation(e, "/ed-fi/studentAssessments/keyChanges", uriBuilderLocalVar.Path, offset, limit, minChangeVersion, maxChangeVersion, totalCount, snapshotIdentifier);
                Events.ExecuteOnErrorKeyChangesStudentAssessments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="KeyChangesStudentAssessmentsApiResponse"/>
        /// </summary>
        public partial class KeyChangesStudentAssessmentsApiResponse : EdFi.OdsApi.Sdk.v62.Client.ApiResponse, IKeyChangesStudentAssessmentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<KeyChangesStudentAssessmentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="KeyChangesStudentAssessmentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public KeyChangesStudentAssessmentsApiResponse(ILogger<KeyChangesStudentAssessmentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TrackedChangesEdFiStudentAssessmentKeyChange>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TrackedChangesEdFiStudentAssessmentKeyChange>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TrackedChangesEdFiStudentAssessmentKeyChange>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 304 NotModified
            /// </summary>
            /// <returns></returns>
            public bool IsNotModified => 304 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostStudentAssessment(EdFiStudentAssessment studentAssessment);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="studentAssessment"></param>
        /// <returns></returns>
        private void ValidatePostStudentAssessment(EdFiStudentAssessment studentAssessment)
        {
            if (studentAssessment == null)
                throw new ArgumentNullException(nameof(studentAssessment));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="studentAssessment"></param>
        private void AfterPostStudentAssessmentDefaultImplementation(IPostStudentAssessmentApiResponse apiResponseLocalVar, EdFiStudentAssessment studentAssessment)
        {
            bool suppressDefaultLog = false;
            AfterPostStudentAssessment(ref suppressDefaultLog, apiResponseLocalVar, studentAssessment);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="studentAssessment"></param>
        partial void AfterPostStudentAssessment(ref bool suppressDefaultLog, IPostStudentAssessmentApiResponse apiResponseLocalVar, EdFiStudentAssessment studentAssessment);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="studentAssessment"></param>
        private void OnErrorPostStudentAssessmentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentAssessment studentAssessment)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostStudentAssessment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, studentAssessment);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="studentAssessment"></param>
        partial void OnErrorPostStudentAssessment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EdFiStudentAssessment studentAssessment);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="studentAssessment">The JSON representation of the \&quot;studentAssessment\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentAssessmentApiResponse"/>&gt;</returns>
        public async Task<IPostStudentAssessmentApiResponse?> PostStudentAssessmentOrDefaultAsync(EdFiStudentAssessment studentAssessment, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostStudentAssessmentAsync(studentAssessment, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentAssessment">The JSON representation of the \&quot;studentAssessment\&quot; resource to be created or updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostStudentAssessmentApiResponse"/>&gt;</returns>
        public async Task<IPostStudentAssessmentApiResponse> PostStudentAssessmentAsync(EdFiStudentAssessment studentAssessment, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostStudentAssessment(studentAssessment);

                FormatPostStudentAssessment(studentAssessment);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentAssessments"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentAssessments");

                    httpRequestMessageLocalVar.Content = (studentAssessment as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(studentAssessment, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostStudentAssessmentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostStudentAssessmentApiResponse>();

                        PostStudentAssessmentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentAssessments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostStudentAssessmentDefaultImplementation(apiResponseLocalVar, studentAssessment);

                        Events.ExecuteOnPostStudentAssessment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostStudentAssessmentDefaultImplementation(e, "/ed-fi/studentAssessments", uriBuilderLocalVar.Path, studentAssessment);
                Events.ExecuteOnErrorPostStudentAssessment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostStudentAssessmentApiResponse"/>
        /// </summary>
        public partial class PostStudentAssessmentApiResponse : EdFi.OdsApi.Sdk.v62.Client.ApiResponse, IPostStudentAssessmentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostStudentAssessmentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostStudentAssessmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostStudentAssessmentApiResponse(ILogger<PostStudentAssessmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutStudentAssessment(ref string id, EdFiStudentAssessment studentAssessment, ref Option<string> ifMatch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="studentAssessment"></param>
        /// <param name="ifMatch"></param>
        /// <returns></returns>
        private void ValidatePutStudentAssessment(string id, EdFiStudentAssessment studentAssessment, Option<string> ifMatch)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (studentAssessment == null)
                throw new ArgumentNullException(nameof(studentAssessment));

            if (ifMatch.IsSet && ifMatch.Value == null)
                throw new ArgumentNullException(nameof(ifMatch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="studentAssessment"></param>
        /// <param name="ifMatch"></param>
        private void AfterPutStudentAssessmentDefaultImplementation(IPutStudentAssessmentApiResponse apiResponseLocalVar, string id, EdFiStudentAssessment studentAssessment, Option<string> ifMatch)
        {
            bool suppressDefaultLog = false;
            AfterPutStudentAssessment(ref suppressDefaultLog, apiResponseLocalVar, id, studentAssessment, ifMatch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="studentAssessment"></param>
        /// <param name="ifMatch"></param>
        partial void AfterPutStudentAssessment(ref bool suppressDefaultLog, IPutStudentAssessmentApiResponse apiResponseLocalVar, string id, EdFiStudentAssessment studentAssessment, Option<string> ifMatch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="studentAssessment"></param>
        /// <param name="ifMatch"></param>
        private void OnErrorPutStudentAssessmentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentAssessment studentAssessment, Option<string> ifMatch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutStudentAssessment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, studentAssessment, ifMatch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="studentAssessment"></param>
        /// <param name="ifMatch"></param>
        partial void OnErrorPutStudentAssessment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, EdFiStudentAssessment studentAssessment, Option<string> ifMatch);

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="studentAssessment">The JSON representation of the \&quot;studentAssessment\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentAssessmentApiResponse"/>&gt;</returns>
        public async Task<IPutStudentAssessmentApiResponse?> PutStudentAssessmentOrDefaultAsync(string id, EdFiStudentAssessment studentAssessment, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutStudentAssessmentAsync(id, studentAssessment, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates a resource based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation and will not be modified in the database, and so recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="studentAssessment">The JSON representation of the \&quot;studentAssessment\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutStudentAssessmentApiResponse"/>&gt;</returns>
        public async Task<IPutStudentAssessmentApiResponse> PutStudentAssessmentAsync(string id, EdFiStudentAssessment studentAssessment, Option<string> ifMatch = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutStudentAssessment(id, studentAssessment, ifMatch);

                FormatPutStudentAssessment(ref id, studentAssessment, ref ifMatch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ed-fi/studentAssessments/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ed-fi/studentAssessments/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (ifMatch.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("If-Match", ClientUtils.ParameterToString(ifMatch.Value));

                    httpRequestMessageLocalVar.Content = (studentAssessment as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(studentAssessment, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutStudentAssessmentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutStudentAssessmentApiResponse>();

                        PutStudentAssessmentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ed-fi/studentAssessments/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutStudentAssessmentDefaultImplementation(apiResponseLocalVar, id, studentAssessment, ifMatch);

                        Events.ExecuteOnPutStudentAssessment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutStudentAssessmentDefaultImplementation(e, "/ed-fi/studentAssessments/{id}", uriBuilderLocalVar.Path, id, studentAssessment, ifMatch);
                Events.ExecuteOnErrorPutStudentAssessment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutStudentAssessmentApiResponse"/>
        /// </summary>
        public partial class PutStudentAssessmentApiResponse : EdFi.OdsApi.Sdk.v62.Client.ApiResponse, IPutStudentAssessmentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutStudentAssessmentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutStudentAssessmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutStudentAssessmentApiResponse(ILogger<PutStudentAssessmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 412 PreconditionFailed
            /// </summary>
            /// <returns></returns>
            public bool IsPreconditionFailed => 412 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
