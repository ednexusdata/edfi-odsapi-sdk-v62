// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v62.Client;

namespace EdFi.OdsApi.Sdk.v62.Models.All
{
    /// <summary>
    /// EdFiStudentAcademicRecord
    /// </summary>
    public partial class EdFiStudentAcademicRecord : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentAcademicRecord" /> class.
        /// </summary>
        /// <param name="termDescriptor">The term for the session during the school year.</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="id">id</param>
        /// <param name="academicHonors">An unordered collection of studentAcademicRecordAcademicHonors. Academic distinctions earned by or awarded to the student.</param>
        /// <param name="classRanking">classRanking</param>
        /// <param name="cumulativeAttemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</param>
        /// <param name="cumulativeAttemptedCredits">The value of credits or units of value awarded for the completion of a course.</param>
        /// <param name="cumulativeAttemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course.</param>
        /// <param name="cumulativeEarnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</param>
        /// <param name="cumulativeEarnedCredits">The value of credits or units of value awarded for the completion of a course.</param>
        /// <param name="cumulativeEarnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course.</param>
        /// <param name="cumulativeGradePointAverage">A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.</param>
        /// <param name="cumulativeGradePointsEarned">The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.</param>
        /// <param name="diplomas">An unordered collection of studentAcademicRecordDiplomas. Diploma(s) earned by the student.</param>
        /// <param name="gradePointAverages">An unordered collection of studentAcademicRecordGradePointAverages. The grade point average for an individual computed as the grade points earned divided by the number of credits attempted.</param>
        /// <param name="gradeValueQualifier">The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student&#39;s grade point average (A&#x3D;4, B&#x3D;3, C&#x3D;2, D&#x3D;1 in a four-point system) or letter equivalents for percentage grades (90-100%&#x3D;A, 80-90%&#x3D;B, etc.).</param>
        /// <param name="projectedGraduationDate">The month and year the student is projected to graduate.</param>
        /// <param name="recognitions">An unordered collection of studentAcademicRecordRecognitions. Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.</param>
        /// <param name="reportCards">An unordered collection of studentAcademicRecordReportCards. Report cards for the student.</param>
        /// <param name="sessionAttemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</param>
        /// <param name="sessionAttemptedCredits">The value of credits or units of value awarded for the completion of a course.</param>
        /// <param name="sessionAttemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course.</param>
        /// <param name="sessionEarnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</param>
        /// <param name="sessionEarnedCredits">The value of credits or units of value awarded for the completion of a course.</param>
        /// <param name="sessionEarnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course.</param>
        /// <param name="sessionGradePointAverage">The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.</param>
        /// <param name="sessionGradePointsEarned">The number of grade points an individual earned for this session.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="ext">Extensions to the StudentAcademicRecord entity.</param>
        [JsonConstructor]
        public EdFiStudentAcademicRecord(string termDescriptor, EdFiEducationOrganizationReference educationOrganizationReference, EdFiSchoolYearTypeReference schoolYearTypeReference, EdFiStudentReference studentReference, Option<string?> id = default, Option<List<EdFiStudentAcademicRecordAcademicHonor>?> academicHonors = default, Option<EdFiStudentAcademicRecordClassRanking?> classRanking = default, Option<double?> cumulativeAttemptedCreditConversion = default, Option<double?> cumulativeAttemptedCredits = default, Option<string?> cumulativeAttemptedCreditTypeDescriptor = default, Option<double?> cumulativeEarnedCreditConversion = default, Option<double?> cumulativeEarnedCredits = default, Option<string?> cumulativeEarnedCreditTypeDescriptor = default, Option<double?> cumulativeGradePointAverage = default, Option<double?> cumulativeGradePointsEarned = default, Option<List<EdFiStudentAcademicRecordDiploma>?> diplomas = default, Option<List<EdFiStudentAcademicRecordGradePointAverage>?> gradePointAverages = default, Option<string?> gradeValueQualifier = default, Option<DateOnly?> projectedGraduationDate = default, Option<List<EdFiStudentAcademicRecordRecognition>?> recognitions = default, Option<List<EdFiStudentAcademicRecordReportCard>?> reportCards = default, Option<double?> sessionAttemptedCreditConversion = default, Option<double?> sessionAttemptedCredits = default, Option<string?> sessionAttemptedCreditTypeDescriptor = default, Option<double?> sessionEarnedCreditConversion = default, Option<double?> sessionEarnedCredits = default, Option<string?> sessionEarnedCreditTypeDescriptor = default, Option<double?> sessionGradePointAverage = default, Option<double?> sessionGradePointsEarned = default, Option<string?> etag = default, Option<Object?> ext = default)
        {
            TermDescriptor = termDescriptor;
            EducationOrganizationReference = educationOrganizationReference;
            SchoolYearTypeReference = schoolYearTypeReference;
            StudentReference = studentReference;
            IdOption = id;
            AcademicHonorsOption = academicHonors;
            ClassRankingOption = classRanking;
            CumulativeAttemptedCreditConversionOption = cumulativeAttemptedCreditConversion;
            CumulativeAttemptedCreditsOption = cumulativeAttemptedCredits;
            CumulativeAttemptedCreditTypeDescriptorOption = cumulativeAttemptedCreditTypeDescriptor;
            CumulativeEarnedCreditConversionOption = cumulativeEarnedCreditConversion;
            CumulativeEarnedCreditsOption = cumulativeEarnedCredits;
            CumulativeEarnedCreditTypeDescriptorOption = cumulativeEarnedCreditTypeDescriptor;
            CumulativeGradePointAverageOption = cumulativeGradePointAverage;
            CumulativeGradePointsEarnedOption = cumulativeGradePointsEarned;
            DiplomasOption = diplomas;
            GradePointAveragesOption = gradePointAverages;
            GradeValueQualifierOption = gradeValueQualifier;
            ProjectedGraduationDateOption = projectedGraduationDate;
            RecognitionsOption = recognitions;
            ReportCardsOption = reportCards;
            SessionAttemptedCreditConversionOption = sessionAttemptedCreditConversion;
            SessionAttemptedCreditsOption = sessionAttemptedCredits;
            SessionAttemptedCreditTypeDescriptorOption = sessionAttemptedCreditTypeDescriptor;
            SessionEarnedCreditConversionOption = sessionEarnedCreditConversion;
            SessionEarnedCreditsOption = sessionEarnedCredits;
            SessionEarnedCreditTypeDescriptorOption = sessionEarnedCreditTypeDescriptor;
            SessionGradePointAverageOption = sessionGradePointAverage;
            SessionGradePointsEarnedOption = sessionGradePointsEarned;
            EtagOption = etag;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>
        /// <value>The term for the session during the school year.</value>
        [JsonPropertyName("termDescriptor")]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [JsonPropertyName("educationOrganizationReference")]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [JsonPropertyName("schoolYearTypeReference")]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AcademicHonors
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentAcademicRecordAcademicHonor>?> AcademicHonorsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentAcademicRecordAcademicHonors. Academic distinctions earned by or awarded to the student.
        /// </summary>
        /// <value>An unordered collection of studentAcademicRecordAcademicHonors. Academic distinctions earned by or awarded to the student.</value>
        [JsonPropertyName("academicHonors")]
        public List<EdFiStudentAcademicRecordAcademicHonor>? AcademicHonors { get { return this.AcademicHonorsOption; } set { this.AcademicHonorsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ClassRanking
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiStudentAcademicRecordClassRanking?> ClassRankingOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClassRanking
        /// </summary>
        [JsonPropertyName("classRanking")]
        public EdFiStudentAcademicRecordClassRanking? ClassRanking { get { return this.ClassRankingOption; } set { this.ClassRankingOption = new(value); } }

        /// <summary>
        /// Used to track the state of CumulativeAttemptedCreditConversion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CumulativeAttemptedCreditConversionOption { get; private set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [JsonPropertyName("cumulativeAttemptedCreditConversion")]
        public double? CumulativeAttemptedCreditConversion { get { return this.CumulativeAttemptedCreditConversionOption; } set { this.CumulativeAttemptedCreditConversionOption = new(value); } }

        /// <summary>
        /// Used to track the state of CumulativeAttemptedCredits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CumulativeAttemptedCreditsOption { get; private set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("cumulativeAttemptedCredits")]
        public double? CumulativeAttemptedCredits { get { return this.CumulativeAttemptedCreditsOption; } set { this.CumulativeAttemptedCreditsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CumulativeAttemptedCreditTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CumulativeAttemptedCreditTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("cumulativeAttemptedCreditTypeDescriptor")]
        public string? CumulativeAttemptedCreditTypeDescriptor { get { return this.CumulativeAttemptedCreditTypeDescriptorOption; } set { this.CumulativeAttemptedCreditTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of CumulativeEarnedCreditConversion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CumulativeEarnedCreditConversionOption { get; private set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [JsonPropertyName("cumulativeEarnedCreditConversion")]
        public double? CumulativeEarnedCreditConversion { get { return this.CumulativeEarnedCreditConversionOption; } set { this.CumulativeEarnedCreditConversionOption = new(value); } }

        /// <summary>
        /// Used to track the state of CumulativeEarnedCredits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CumulativeEarnedCreditsOption { get; private set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("cumulativeEarnedCredits")]
        public double? CumulativeEarnedCredits { get { return this.CumulativeEarnedCreditsOption; } set { this.CumulativeEarnedCreditsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CumulativeEarnedCreditTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CumulativeEarnedCreditTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("cumulativeEarnedCreditTypeDescriptor")]
        public string? CumulativeEarnedCreditTypeDescriptor { get { return this.CumulativeEarnedCreditTypeDescriptorOption; } set { this.CumulativeEarnedCreditTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of CumulativeGradePointAverage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CumulativeGradePointAverageOption { get; private set; }

        /// <summary>
        /// A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.
        /// </summary>
        /// <value>A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.</value>
        [JsonPropertyName("cumulativeGradePointAverage")]
        public double? CumulativeGradePointAverage { get { return this.CumulativeGradePointAverageOption; } set { this.CumulativeGradePointAverageOption = new(value); } }

        /// <summary>
        /// Used to track the state of CumulativeGradePointsEarned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CumulativeGradePointsEarnedOption { get; private set; }

        /// <summary>
        /// The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.
        /// </summary>
        /// <value>The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.</value>
        [JsonPropertyName("cumulativeGradePointsEarned")]
        public double? CumulativeGradePointsEarned { get { return this.CumulativeGradePointsEarnedOption; } set { this.CumulativeGradePointsEarnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Diplomas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentAcademicRecordDiploma>?> DiplomasOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentAcademicRecordDiplomas. Diploma(s) earned by the student.
        /// </summary>
        /// <value>An unordered collection of studentAcademicRecordDiplomas. Diploma(s) earned by the student.</value>
        [JsonPropertyName("diplomas")]
        public List<EdFiStudentAcademicRecordDiploma>? Diplomas { get { return this.DiplomasOption; } set { this.DiplomasOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradePointAverages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentAcademicRecordGradePointAverage>?> GradePointAveragesOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentAcademicRecordGradePointAverages. The grade point average for an individual computed as the grade points earned divided by the number of credits attempted.
        /// </summary>
        /// <value>An unordered collection of studentAcademicRecordGradePointAverages. The grade point average for an individual computed as the grade points earned divided by the number of credits attempted.</value>
        [JsonPropertyName("gradePointAverages")]
        public List<EdFiStudentAcademicRecordGradePointAverage>? GradePointAverages { get { return this.GradePointAveragesOption; } set { this.GradePointAveragesOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradeValueQualifier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GradeValueQualifierOption { get; private set; }

        /// <summary>
        /// The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student&#39;s grade point average (A&#x3D;4, B&#x3D;3, C&#x3D;2, D&#x3D;1 in a four-point system) or letter equivalents for percentage grades (90-100%&#x3D;A, 80-90%&#x3D;B, etc.).
        /// </summary>
        /// <value>The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student&#39;s grade point average (A&#x3D;4, B&#x3D;3, C&#x3D;2, D&#x3D;1 in a four-point system) or letter equivalents for percentage grades (90-100%&#x3D;A, 80-90%&#x3D;B, etc.).</value>
        [JsonPropertyName("gradeValueQualifier")]
        public string? GradeValueQualifier { get { return this.GradeValueQualifierOption; } set { this.GradeValueQualifierOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectedGraduationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> ProjectedGraduationDateOption { get; private set; }

        /// <summary>
        /// The month and year the student is projected to graduate.
        /// </summary>
        /// <value>The month and year the student is projected to graduate.</value>
        [JsonPropertyName("projectedGraduationDate")]
        public DateOnly? ProjectedGraduationDate { get { return this.ProjectedGraduationDateOption; } set { this.ProjectedGraduationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Recognitions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentAcademicRecordRecognition>?> RecognitionsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentAcademicRecordRecognitions. Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.
        /// </summary>
        /// <value>An unordered collection of studentAcademicRecordRecognitions. Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.</value>
        [JsonPropertyName("recognitions")]
        public List<EdFiStudentAcademicRecordRecognition>? Recognitions { get { return this.RecognitionsOption; } set { this.RecognitionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReportCards
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentAcademicRecordReportCard>?> ReportCardsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentAcademicRecordReportCards. Report cards for the student.
        /// </summary>
        /// <value>An unordered collection of studentAcademicRecordReportCards. Report cards for the student.</value>
        [JsonPropertyName("reportCards")]
        public List<EdFiStudentAcademicRecordReportCard>? ReportCards { get { return this.ReportCardsOption; } set { this.ReportCardsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionAttemptedCreditConversion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SessionAttemptedCreditConversionOption { get; private set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [JsonPropertyName("sessionAttemptedCreditConversion")]
        public double? SessionAttemptedCreditConversion { get { return this.SessionAttemptedCreditConversionOption; } set { this.SessionAttemptedCreditConversionOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionAttemptedCredits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SessionAttemptedCreditsOption { get; private set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("sessionAttemptedCredits")]
        public double? SessionAttemptedCredits { get { return this.SessionAttemptedCreditsOption; } set { this.SessionAttemptedCreditsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionAttemptedCreditTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SessionAttemptedCreditTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("sessionAttemptedCreditTypeDescriptor")]
        public string? SessionAttemptedCreditTypeDescriptor { get { return this.SessionAttemptedCreditTypeDescriptorOption; } set { this.SessionAttemptedCreditTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionEarnedCreditConversion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SessionEarnedCreditConversionOption { get; private set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [JsonPropertyName("sessionEarnedCreditConversion")]
        public double? SessionEarnedCreditConversion { get { return this.SessionEarnedCreditConversionOption; } set { this.SessionEarnedCreditConversionOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionEarnedCredits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SessionEarnedCreditsOption { get; private set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("sessionEarnedCredits")]
        public double? SessionEarnedCredits { get { return this.SessionEarnedCreditsOption; } set { this.SessionEarnedCreditsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionEarnedCreditTypeDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SessionEarnedCreditTypeDescriptorOption { get; private set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [JsonPropertyName("sessionEarnedCreditTypeDescriptor")]
        public string? SessionEarnedCreditTypeDescriptor { get { return this.SessionEarnedCreditTypeDescriptorOption; } set { this.SessionEarnedCreditTypeDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionGradePointAverage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SessionGradePointAverageOption { get; private set; }

        /// <summary>
        /// The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.
        /// </summary>
        /// <value>The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.</value>
        [JsonPropertyName("sessionGradePointAverage")]
        public double? SessionGradePointAverage { get { return this.SessionGradePointAverageOption; } set { this.SessionGradePointAverageOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionGradePointsEarned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SessionGradePointsEarnedOption { get; private set; }

        /// <summary>
        /// The number of grade points an individual earned for this session.
        /// </summary>
        /// <value>The number of grade points an individual earned for this session.</value>
        [JsonPropertyName("sessionGradePointsEarned")]
        public double? SessionGradePointsEarned { get { return this.SessionGradePointsEarnedOption; } set { this.SessionGradePointsEarnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentAcademicRecord entity.
        /// </summary>
        /// <value>Extensions to the StudentAcademicRecord entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentAcademicRecord {\n");
            sb.Append("  TermDescriptor: ").Append(TermDescriptor).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AcademicHonors: ").Append(AcademicHonors).Append("\n");
            sb.Append("  ClassRanking: ").Append(ClassRanking).Append("\n");
            sb.Append("  CumulativeAttemptedCreditConversion: ").Append(CumulativeAttemptedCreditConversion).Append("\n");
            sb.Append("  CumulativeAttemptedCredits: ").Append(CumulativeAttemptedCredits).Append("\n");
            sb.Append("  CumulativeAttemptedCreditTypeDescriptor: ").Append(CumulativeAttemptedCreditTypeDescriptor).Append("\n");
            sb.Append("  CumulativeEarnedCreditConversion: ").Append(CumulativeEarnedCreditConversion).Append("\n");
            sb.Append("  CumulativeEarnedCredits: ").Append(CumulativeEarnedCredits).Append("\n");
            sb.Append("  CumulativeEarnedCreditTypeDescriptor: ").Append(CumulativeEarnedCreditTypeDescriptor).Append("\n");
            sb.Append("  CumulativeGradePointAverage: ").Append(CumulativeGradePointAverage).Append("\n");
            sb.Append("  CumulativeGradePointsEarned: ").Append(CumulativeGradePointsEarned).Append("\n");
            sb.Append("  Diplomas: ").Append(Diplomas).Append("\n");
            sb.Append("  GradePointAverages: ").Append(GradePointAverages).Append("\n");
            sb.Append("  GradeValueQualifier: ").Append(GradeValueQualifier).Append("\n");
            sb.Append("  ProjectedGraduationDate: ").Append(ProjectedGraduationDate).Append("\n");
            sb.Append("  Recognitions: ").Append(Recognitions).Append("\n");
            sb.Append("  ReportCards: ").Append(ReportCards).Append("\n");
            sb.Append("  SessionAttemptedCreditConversion: ").Append(SessionAttemptedCreditConversion).Append("\n");
            sb.Append("  SessionAttemptedCredits: ").Append(SessionAttemptedCredits).Append("\n");
            sb.Append("  SessionAttemptedCreditTypeDescriptor: ").Append(SessionAttemptedCreditTypeDescriptor).Append("\n");
            sb.Append("  SessionEarnedCreditConversion: ").Append(SessionEarnedCreditConversion).Append("\n");
            sb.Append("  SessionEarnedCredits: ").Append(SessionEarnedCredits).Append("\n");
            sb.Append("  SessionEarnedCreditTypeDescriptor: ").Append(SessionEarnedCreditTypeDescriptor).Append("\n");
            sb.Append("  SessionGradePointAverage: ").Append(SessionGradePointAverage).Append("\n");
            sb.Append("  SessionGradePointsEarned: ").Append(SessionGradePointsEarned).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TermDescriptor (string) maxLength
            if (this.TermDescriptor != null && this.TermDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for TermDescriptor, length must be less than 306.", new [] { "TermDescriptor" });
            }

            // CumulativeAttemptedCreditTypeDescriptor (string) maxLength
            if (this.CumulativeAttemptedCreditTypeDescriptor != null && this.CumulativeAttemptedCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CumulativeAttemptedCreditTypeDescriptor, length must be less than 306.", new [] { "CumulativeAttemptedCreditTypeDescriptor" });
            }

            // CumulativeEarnedCreditTypeDescriptor (string) maxLength
            if (this.CumulativeEarnedCreditTypeDescriptor != null && this.CumulativeEarnedCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CumulativeEarnedCreditTypeDescriptor, length must be less than 306.", new [] { "CumulativeEarnedCreditTypeDescriptor" });
            }

            // GradeValueQualifier (string) maxLength
            if (this.GradeValueQualifier != null && this.GradeValueQualifier.Length > 80)
            {
                yield return new ValidationResult("Invalid value for GradeValueQualifier, length must be less than 80.", new [] { "GradeValueQualifier" });
            }

            // SessionAttemptedCreditTypeDescriptor (string) maxLength
            if (this.SessionAttemptedCreditTypeDescriptor != null && this.SessionAttemptedCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SessionAttemptedCreditTypeDescriptor, length must be less than 306.", new [] { "SessionAttemptedCreditTypeDescriptor" });
            }

            // SessionEarnedCreditTypeDescriptor (string) maxLength
            if (this.SessionEarnedCreditTypeDescriptor != null && this.SessionEarnedCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SessionEarnedCreditTypeDescriptor, length must be less than 306.", new [] { "SessionEarnedCreditTypeDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentAcademicRecord" />
    /// </summary>
    public class EdFiStudentAcademicRecordJsonConverter : JsonConverter<EdFiStudentAcademicRecord>
    {
        /// <summary>
        /// The format to use to serialize ProjectedGraduationDate
        /// </summary>
        public static string ProjectedGraduationDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentAcademicRecord" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentAcademicRecord Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> termDescriptor = default;
            Option<EdFiEducationOrganizationReference?> educationOrganizationReference = default;
            Option<EdFiSchoolYearTypeReference?> schoolYearTypeReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> id = default;
            Option<List<EdFiStudentAcademicRecordAcademicHonor>?> academicHonors = default;
            Option<EdFiStudentAcademicRecordClassRanking?> classRanking = default;
            Option<double?> cumulativeAttemptedCreditConversion = default;
            Option<double?> cumulativeAttemptedCredits = default;
            Option<string?> cumulativeAttemptedCreditTypeDescriptor = default;
            Option<double?> cumulativeEarnedCreditConversion = default;
            Option<double?> cumulativeEarnedCredits = default;
            Option<string?> cumulativeEarnedCreditTypeDescriptor = default;
            Option<double?> cumulativeGradePointAverage = default;
            Option<double?> cumulativeGradePointsEarned = default;
            Option<List<EdFiStudentAcademicRecordDiploma>?> diplomas = default;
            Option<List<EdFiStudentAcademicRecordGradePointAverage>?> gradePointAverages = default;
            Option<string?> gradeValueQualifier = default;
            Option<DateOnly?> projectedGraduationDate = default;
            Option<List<EdFiStudentAcademicRecordRecognition>?> recognitions = default;
            Option<List<EdFiStudentAcademicRecordReportCard>?> reportCards = default;
            Option<double?> sessionAttemptedCreditConversion = default;
            Option<double?> sessionAttemptedCredits = default;
            Option<string?> sessionAttemptedCreditTypeDescriptor = default;
            Option<double?> sessionEarnedCreditConversion = default;
            Option<double?> sessionEarnedCredits = default;
            Option<string?> sessionEarnedCreditTypeDescriptor = default;
            Option<double?> sessionGradePointAverage = default;
            Option<double?> sessionGradePointsEarned = default;
            Option<string?> etag = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "termDescriptor":
                            termDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "educationOrganizationReference":
                            educationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "schoolYearTypeReference":
                            schoolYearTypeReference = new Option<EdFiSchoolYearTypeReference?>(JsonSerializer.Deserialize<EdFiSchoolYearTypeReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "academicHonors":
                            academicHonors = new Option<List<EdFiStudentAcademicRecordAcademicHonor>?>(JsonSerializer.Deserialize<List<EdFiStudentAcademicRecordAcademicHonor>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "classRanking":
                            classRanking = new Option<EdFiStudentAcademicRecordClassRanking?>(JsonSerializer.Deserialize<EdFiStudentAcademicRecordClassRanking>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "cumulativeAttemptedCreditConversion":
                            cumulativeAttemptedCreditConversion = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "cumulativeAttemptedCredits":
                            cumulativeAttemptedCredits = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "cumulativeAttemptedCreditTypeDescriptor":
                            cumulativeAttemptedCreditTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "cumulativeEarnedCreditConversion":
                            cumulativeEarnedCreditConversion = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "cumulativeEarnedCredits":
                            cumulativeEarnedCredits = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "cumulativeEarnedCreditTypeDescriptor":
                            cumulativeEarnedCreditTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "cumulativeGradePointAverage":
                            cumulativeGradePointAverage = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "cumulativeGradePointsEarned":
                            cumulativeGradePointsEarned = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "diplomas":
                            diplomas = new Option<List<EdFiStudentAcademicRecordDiploma>?>(JsonSerializer.Deserialize<List<EdFiStudentAcademicRecordDiploma>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "gradePointAverages":
                            gradePointAverages = new Option<List<EdFiStudentAcademicRecordGradePointAverage>?>(JsonSerializer.Deserialize<List<EdFiStudentAcademicRecordGradePointAverage>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "gradeValueQualifier":
                            gradeValueQualifier = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "projectedGraduationDate":
                            projectedGraduationDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recognitions":
                            recognitions = new Option<List<EdFiStudentAcademicRecordRecognition>?>(JsonSerializer.Deserialize<List<EdFiStudentAcademicRecordRecognition>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reportCards":
                            reportCards = new Option<List<EdFiStudentAcademicRecordReportCard>?>(JsonSerializer.Deserialize<List<EdFiStudentAcademicRecordReportCard>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sessionAttemptedCreditConversion":
                            sessionAttemptedCreditConversion = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "sessionAttemptedCredits":
                            sessionAttemptedCredits = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "sessionAttemptedCreditTypeDescriptor":
                            sessionAttemptedCreditTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sessionEarnedCreditConversion":
                            sessionEarnedCreditConversion = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "sessionEarnedCredits":
                            sessionEarnedCredits = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "sessionEarnedCreditTypeDescriptor":
                            sessionEarnedCreditTypeDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sessionGradePointAverage":
                            sessionGradePointAverage = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "sessionGradePointsEarned":
                            sessionGradePointsEarned = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!termDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAcademicRecord.", nameof(termDescriptor));

            if (!educationOrganizationReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAcademicRecord.", nameof(educationOrganizationReference));

            if (!schoolYearTypeReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAcademicRecord.", nameof(schoolYearTypeReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentAcademicRecord.", nameof(studentReference));

            if (termDescriptor.IsSet && termDescriptor.Value == null)
                throw new ArgumentNullException(nameof(termDescriptor), "Property is not nullable for class EdFiStudentAcademicRecord.");

            if (educationOrganizationReference.IsSet && educationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationReference), "Property is not nullable for class EdFiStudentAcademicRecord.");

            if (schoolYearTypeReference.IsSet && schoolYearTypeReference.Value == null)
                throw new ArgumentNullException(nameof(schoolYearTypeReference), "Property is not nullable for class EdFiStudentAcademicRecord.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentAcademicRecord.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentAcademicRecord.");

            if (academicHonors.IsSet && academicHonors.Value == null)
                throw new ArgumentNullException(nameof(academicHonors), "Property is not nullable for class EdFiStudentAcademicRecord.");

            if (classRanking.IsSet && classRanking.Value == null)
                throw new ArgumentNullException(nameof(classRanking), "Property is not nullable for class EdFiStudentAcademicRecord.");

            if (diplomas.IsSet && diplomas.Value == null)
                throw new ArgumentNullException(nameof(diplomas), "Property is not nullable for class EdFiStudentAcademicRecord.");

            if (gradePointAverages.IsSet && gradePointAverages.Value == null)
                throw new ArgumentNullException(nameof(gradePointAverages), "Property is not nullable for class EdFiStudentAcademicRecord.");

            if (recognitions.IsSet && recognitions.Value == null)
                throw new ArgumentNullException(nameof(recognitions), "Property is not nullable for class EdFiStudentAcademicRecord.");

            if (reportCards.IsSet && reportCards.Value == null)
                throw new ArgumentNullException(nameof(reportCards), "Property is not nullable for class EdFiStudentAcademicRecord.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentAcademicRecord.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentAcademicRecord.");

            return new EdFiStudentAcademicRecord(termDescriptor.Value!, educationOrganizationReference.Value!, schoolYearTypeReference.Value!, studentReference.Value!, id, academicHonors, classRanking, cumulativeAttemptedCreditConversion, cumulativeAttemptedCredits, cumulativeAttemptedCreditTypeDescriptor, cumulativeEarnedCreditConversion, cumulativeEarnedCredits, cumulativeEarnedCreditTypeDescriptor, cumulativeGradePointAverage, cumulativeGradePointsEarned, diplomas, gradePointAverages, gradeValueQualifier, projectedGraduationDate, recognitions, reportCards, sessionAttemptedCreditConversion, sessionAttemptedCredits, sessionAttemptedCreditTypeDescriptor, sessionEarnedCreditConversion, sessionEarnedCredits, sessionEarnedCreditTypeDescriptor, sessionGradePointAverage, sessionGradePointsEarned, etag, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentAcademicRecord" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentAcademicRecord"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentAcademicRecord edFiStudentAcademicRecord, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentAcademicRecord, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentAcademicRecord" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentAcademicRecord"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentAcademicRecord edFiStudentAcademicRecord, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentAcademicRecord.TermDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentAcademicRecord.TermDescriptor), "Property is required for class EdFiStudentAcademicRecord.");

            if (edFiStudentAcademicRecord.EducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiStudentAcademicRecord.EducationOrganizationReference), "Property is required for class EdFiStudentAcademicRecord.");

            if (edFiStudentAcademicRecord.SchoolYearTypeReference == null)
                throw new ArgumentNullException(nameof(edFiStudentAcademicRecord.SchoolYearTypeReference), "Property is required for class EdFiStudentAcademicRecord.");

            if (edFiStudentAcademicRecord.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentAcademicRecord.StudentReference), "Property is required for class EdFiStudentAcademicRecord.");

            if (edFiStudentAcademicRecord.IdOption.IsSet && edFiStudentAcademicRecord.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentAcademicRecord.Id), "Property is required for class EdFiStudentAcademicRecord.");

            if (edFiStudentAcademicRecord.AcademicHonorsOption.IsSet && edFiStudentAcademicRecord.AcademicHonors == null)
                throw new ArgumentNullException(nameof(edFiStudentAcademicRecord.AcademicHonors), "Property is required for class EdFiStudentAcademicRecord.");

            if (edFiStudentAcademicRecord.ClassRankingOption.IsSet && edFiStudentAcademicRecord.ClassRanking == null)
                throw new ArgumentNullException(nameof(edFiStudentAcademicRecord.ClassRanking), "Property is required for class EdFiStudentAcademicRecord.");

            if (edFiStudentAcademicRecord.DiplomasOption.IsSet && edFiStudentAcademicRecord.Diplomas == null)
                throw new ArgumentNullException(nameof(edFiStudentAcademicRecord.Diplomas), "Property is required for class EdFiStudentAcademicRecord.");

            if (edFiStudentAcademicRecord.GradePointAveragesOption.IsSet && edFiStudentAcademicRecord.GradePointAverages == null)
                throw new ArgumentNullException(nameof(edFiStudentAcademicRecord.GradePointAverages), "Property is required for class EdFiStudentAcademicRecord.");

            if (edFiStudentAcademicRecord.RecognitionsOption.IsSet && edFiStudentAcademicRecord.Recognitions == null)
                throw new ArgumentNullException(nameof(edFiStudentAcademicRecord.Recognitions), "Property is required for class EdFiStudentAcademicRecord.");

            if (edFiStudentAcademicRecord.ReportCardsOption.IsSet && edFiStudentAcademicRecord.ReportCards == null)
                throw new ArgumentNullException(nameof(edFiStudentAcademicRecord.ReportCards), "Property is required for class EdFiStudentAcademicRecord.");

            if (edFiStudentAcademicRecord.EtagOption.IsSet && edFiStudentAcademicRecord.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentAcademicRecord.Etag), "Property is required for class EdFiStudentAcademicRecord.");

            if (edFiStudentAcademicRecord.ExtOption.IsSet && edFiStudentAcademicRecord.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentAcademicRecord.Ext), "Property is required for class EdFiStudentAcademicRecord.");

            writer.WriteString("termDescriptor", edFiStudentAcademicRecord.TermDescriptor);

            writer.WritePropertyName("educationOrganizationReference");
            JsonSerializer.Serialize(writer, edFiStudentAcademicRecord.EducationOrganizationReference, jsonSerializerOptions);
            writer.WritePropertyName("schoolYearTypeReference");
            JsonSerializer.Serialize(writer, edFiStudentAcademicRecord.SchoolYearTypeReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentAcademicRecord.StudentReference, jsonSerializerOptions);
            if (edFiStudentAcademicRecord.IdOption.IsSet)
                writer.WriteString("id", edFiStudentAcademicRecord.Id);

            if (edFiStudentAcademicRecord.AcademicHonorsOption.IsSet)
            {
                writer.WritePropertyName("academicHonors");
                JsonSerializer.Serialize(writer, edFiStudentAcademicRecord.AcademicHonors, jsonSerializerOptions);
            }
            if (edFiStudentAcademicRecord.ClassRankingOption.IsSet)
            {
                writer.WritePropertyName("classRanking");
                JsonSerializer.Serialize(writer, edFiStudentAcademicRecord.ClassRanking, jsonSerializerOptions);
            }
            if (edFiStudentAcademicRecord.CumulativeAttemptedCreditConversionOption.IsSet)
                if (edFiStudentAcademicRecord.CumulativeAttemptedCreditConversionOption.Value != null)
                    writer.WriteNumber("cumulativeAttemptedCreditConversion", edFiStudentAcademicRecord.CumulativeAttemptedCreditConversionOption.Value!.Value);
                else
                    writer.WriteNull("cumulativeAttemptedCreditConversion");

            if (edFiStudentAcademicRecord.CumulativeAttemptedCreditsOption.IsSet)
                if (edFiStudentAcademicRecord.CumulativeAttemptedCreditsOption.Value != null)
                    writer.WriteNumber("cumulativeAttemptedCredits", edFiStudentAcademicRecord.CumulativeAttemptedCreditsOption.Value!.Value);
                else
                    writer.WriteNull("cumulativeAttemptedCredits");

            if (edFiStudentAcademicRecord.CumulativeAttemptedCreditTypeDescriptorOption.IsSet)
                if (edFiStudentAcademicRecord.CumulativeAttemptedCreditTypeDescriptorOption.Value != null)
                    writer.WriteString("cumulativeAttemptedCreditTypeDescriptor", edFiStudentAcademicRecord.CumulativeAttemptedCreditTypeDescriptor);
                else
                    writer.WriteNull("cumulativeAttemptedCreditTypeDescriptor");

            if (edFiStudentAcademicRecord.CumulativeEarnedCreditConversionOption.IsSet)
                if (edFiStudentAcademicRecord.CumulativeEarnedCreditConversionOption.Value != null)
                    writer.WriteNumber("cumulativeEarnedCreditConversion", edFiStudentAcademicRecord.CumulativeEarnedCreditConversionOption.Value!.Value);
                else
                    writer.WriteNull("cumulativeEarnedCreditConversion");

            if (edFiStudentAcademicRecord.CumulativeEarnedCreditsOption.IsSet)
                if (edFiStudentAcademicRecord.CumulativeEarnedCreditsOption.Value != null)
                    writer.WriteNumber("cumulativeEarnedCredits", edFiStudentAcademicRecord.CumulativeEarnedCreditsOption.Value!.Value);
                else
                    writer.WriteNull("cumulativeEarnedCredits");

            if (edFiStudentAcademicRecord.CumulativeEarnedCreditTypeDescriptorOption.IsSet)
                if (edFiStudentAcademicRecord.CumulativeEarnedCreditTypeDescriptorOption.Value != null)
                    writer.WriteString("cumulativeEarnedCreditTypeDescriptor", edFiStudentAcademicRecord.CumulativeEarnedCreditTypeDescriptor);
                else
                    writer.WriteNull("cumulativeEarnedCreditTypeDescriptor");

            if (edFiStudentAcademicRecord.CumulativeGradePointAverageOption.IsSet)
                if (edFiStudentAcademicRecord.CumulativeGradePointAverageOption.Value != null)
                    writer.WriteNumber("cumulativeGradePointAverage", edFiStudentAcademicRecord.CumulativeGradePointAverageOption.Value!.Value);
                else
                    writer.WriteNull("cumulativeGradePointAverage");

            if (edFiStudentAcademicRecord.CumulativeGradePointsEarnedOption.IsSet)
                if (edFiStudentAcademicRecord.CumulativeGradePointsEarnedOption.Value != null)
                    writer.WriteNumber("cumulativeGradePointsEarned", edFiStudentAcademicRecord.CumulativeGradePointsEarnedOption.Value!.Value);
                else
                    writer.WriteNull("cumulativeGradePointsEarned");

            if (edFiStudentAcademicRecord.DiplomasOption.IsSet)
            {
                writer.WritePropertyName("diplomas");
                JsonSerializer.Serialize(writer, edFiStudentAcademicRecord.Diplomas, jsonSerializerOptions);
            }
            if (edFiStudentAcademicRecord.GradePointAveragesOption.IsSet)
            {
                writer.WritePropertyName("gradePointAverages");
                JsonSerializer.Serialize(writer, edFiStudentAcademicRecord.GradePointAverages, jsonSerializerOptions);
            }
            if (edFiStudentAcademicRecord.GradeValueQualifierOption.IsSet)
                if (edFiStudentAcademicRecord.GradeValueQualifierOption.Value != null)
                    writer.WriteString("gradeValueQualifier", edFiStudentAcademicRecord.GradeValueQualifier);
                else
                    writer.WriteNull("gradeValueQualifier");

            if (edFiStudentAcademicRecord.ProjectedGraduationDateOption.IsSet)
                if (edFiStudentAcademicRecord.ProjectedGraduationDateOption.Value != null)
                    writer.WriteString("projectedGraduationDate", edFiStudentAcademicRecord.ProjectedGraduationDateOption.Value!.Value.ToString(ProjectedGraduationDateFormat));
                else
                    writer.WriteNull("projectedGraduationDate");

            if (edFiStudentAcademicRecord.RecognitionsOption.IsSet)
            {
                writer.WritePropertyName("recognitions");
                JsonSerializer.Serialize(writer, edFiStudentAcademicRecord.Recognitions, jsonSerializerOptions);
            }
            if (edFiStudentAcademicRecord.ReportCardsOption.IsSet)
            {
                writer.WritePropertyName("reportCards");
                JsonSerializer.Serialize(writer, edFiStudentAcademicRecord.ReportCards, jsonSerializerOptions);
            }
            if (edFiStudentAcademicRecord.SessionAttemptedCreditConversionOption.IsSet)
                if (edFiStudentAcademicRecord.SessionAttemptedCreditConversionOption.Value != null)
                    writer.WriteNumber("sessionAttemptedCreditConversion", edFiStudentAcademicRecord.SessionAttemptedCreditConversionOption.Value!.Value);
                else
                    writer.WriteNull("sessionAttemptedCreditConversion");

            if (edFiStudentAcademicRecord.SessionAttemptedCreditsOption.IsSet)
                if (edFiStudentAcademicRecord.SessionAttemptedCreditsOption.Value != null)
                    writer.WriteNumber("sessionAttemptedCredits", edFiStudentAcademicRecord.SessionAttemptedCreditsOption.Value!.Value);
                else
                    writer.WriteNull("sessionAttemptedCredits");

            if (edFiStudentAcademicRecord.SessionAttemptedCreditTypeDescriptorOption.IsSet)
                if (edFiStudentAcademicRecord.SessionAttemptedCreditTypeDescriptorOption.Value != null)
                    writer.WriteString("sessionAttemptedCreditTypeDescriptor", edFiStudentAcademicRecord.SessionAttemptedCreditTypeDescriptor);
                else
                    writer.WriteNull("sessionAttemptedCreditTypeDescriptor");

            if (edFiStudentAcademicRecord.SessionEarnedCreditConversionOption.IsSet)
                if (edFiStudentAcademicRecord.SessionEarnedCreditConversionOption.Value != null)
                    writer.WriteNumber("sessionEarnedCreditConversion", edFiStudentAcademicRecord.SessionEarnedCreditConversionOption.Value!.Value);
                else
                    writer.WriteNull("sessionEarnedCreditConversion");

            if (edFiStudentAcademicRecord.SessionEarnedCreditsOption.IsSet)
                if (edFiStudentAcademicRecord.SessionEarnedCreditsOption.Value != null)
                    writer.WriteNumber("sessionEarnedCredits", edFiStudentAcademicRecord.SessionEarnedCreditsOption.Value!.Value);
                else
                    writer.WriteNull("sessionEarnedCredits");

            if (edFiStudentAcademicRecord.SessionEarnedCreditTypeDescriptorOption.IsSet)
                if (edFiStudentAcademicRecord.SessionEarnedCreditTypeDescriptorOption.Value != null)
                    writer.WriteString("sessionEarnedCreditTypeDescriptor", edFiStudentAcademicRecord.SessionEarnedCreditTypeDescriptor);
                else
                    writer.WriteNull("sessionEarnedCreditTypeDescriptor");

            if (edFiStudentAcademicRecord.SessionGradePointAverageOption.IsSet)
                if (edFiStudentAcademicRecord.SessionGradePointAverageOption.Value != null)
                    writer.WriteNumber("sessionGradePointAverage", edFiStudentAcademicRecord.SessionGradePointAverageOption.Value!.Value);
                else
                    writer.WriteNull("sessionGradePointAverage");

            if (edFiStudentAcademicRecord.SessionGradePointsEarnedOption.IsSet)
                if (edFiStudentAcademicRecord.SessionGradePointsEarnedOption.Value != null)
                    writer.WriteNumber("sessionGradePointsEarned", edFiStudentAcademicRecord.SessionGradePointsEarnedOption.Value!.Value);
                else
                    writer.WriteNull("sessionGradePointsEarned");

            if (edFiStudentAcademicRecord.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentAcademicRecord.Etag);

            if (edFiStudentAcademicRecord.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentAcademicRecord.Ext, jsonSerializerOptions);
            }
        }
    }
}
