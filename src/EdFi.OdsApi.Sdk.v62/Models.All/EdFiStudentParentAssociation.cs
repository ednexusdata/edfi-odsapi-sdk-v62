// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v62.Client;

namespace EdFi.OdsApi.Sdk.v62.Models.All
{
    /// <summary>
    /// EdFiStudentParentAssociation
    /// </summary>
    public partial class EdFiStudentParentAssociation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentParentAssociation" /> class.
        /// </summary>
        /// <param name="parentReference">parentReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="id">id</param>
        /// <param name="contactPriority">The numeric order of the preferred sequence or priority of contact.</param>
        /// <param name="contactRestrictions">Restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual).</param>
        /// <param name="emergencyContactStatus">Indicator of whether the person is a designated emergency contact for the student.</param>
        /// <param name="legalGuardian">Indicator of whether the person is a legal guardian for the student.</param>
        /// <param name="livesWith">Indicator of whether the student lives with the associated parent.</param>
        /// <param name="primaryContactStatus">Indicator of whether the person is a primary parental contact for the student.</param>
        /// <param name="relationDescriptor">The nature of an individual&#39;s relationship to a student, primarily used to capture family relationships.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="ext">Extensions to the StudentParentAssociation entity.</param>
        [JsonConstructor]
        public EdFiStudentParentAssociation(EdFiParentReference parentReference, EdFiStudentReference studentReference, Option<string?> id = default, Option<int?> contactPriority = default, Option<string?> contactRestrictions = default, Option<bool?> emergencyContactStatus = default, Option<bool?> legalGuardian = default, Option<bool?> livesWith = default, Option<bool?> primaryContactStatus = default, Option<string?> relationDescriptor = default, Option<string?> etag = default, Option<Object?> ext = default)
        {
            ParentReference = parentReference;
            StudentReference = studentReference;
            IdOption = id;
            ContactPriorityOption = contactPriority;
            ContactRestrictionsOption = contactRestrictions;
            EmergencyContactStatusOption = emergencyContactStatus;
            LegalGuardianOption = legalGuardian;
            LivesWithOption = livesWith;
            PrimaryContactStatusOption = primaryContactStatus;
            RelationDescriptorOption = relationDescriptor;
            EtagOption = etag;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ParentReference
        /// </summary>
        [JsonPropertyName("parentReference")]
        public EdFiParentReference ParentReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContactPriority
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ContactPriorityOption { get; private set; }

        /// <summary>
        /// The numeric order of the preferred sequence or priority of contact.
        /// </summary>
        /// <value>The numeric order of the preferred sequence or priority of contact.</value>
        [JsonPropertyName("contactPriority")]
        public int? ContactPriority { get { return this.ContactPriorityOption; } set { this.ContactPriorityOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContactRestrictions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContactRestrictionsOption { get; private set; }

        /// <summary>
        /// Restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual).
        /// </summary>
        /// <value>Restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual).</value>
        [JsonPropertyName("contactRestrictions")]
        public string? ContactRestrictions { get { return this.ContactRestrictionsOption; } set { this.ContactRestrictionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmergencyContactStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EmergencyContactStatusOption { get; private set; }

        /// <summary>
        /// Indicator of whether the person is a designated emergency contact for the student.
        /// </summary>
        /// <value>Indicator of whether the person is a designated emergency contact for the student.</value>
        [JsonPropertyName("emergencyContactStatus")]
        public bool? EmergencyContactStatus { get { return this.EmergencyContactStatusOption; } set { this.EmergencyContactStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of LegalGuardian
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> LegalGuardianOption { get; private set; }

        /// <summary>
        /// Indicator of whether the person is a legal guardian for the student.
        /// </summary>
        /// <value>Indicator of whether the person is a legal guardian for the student.</value>
        [JsonPropertyName("legalGuardian")]
        public bool? LegalGuardian { get { return this.LegalGuardianOption; } set { this.LegalGuardianOption = new(value); } }

        /// <summary>
        /// Used to track the state of LivesWith
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> LivesWithOption { get; private set; }

        /// <summary>
        /// Indicator of whether the student lives with the associated parent.
        /// </summary>
        /// <value>Indicator of whether the student lives with the associated parent.</value>
        [JsonPropertyName("livesWith")]
        public bool? LivesWith { get { return this.LivesWithOption; } set { this.LivesWithOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrimaryContactStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PrimaryContactStatusOption { get; private set; }

        /// <summary>
        /// Indicator of whether the person is a primary parental contact for the student.
        /// </summary>
        /// <value>Indicator of whether the person is a primary parental contact for the student.</value>
        [JsonPropertyName("primaryContactStatus")]
        public bool? PrimaryContactStatus { get { return this.PrimaryContactStatusOption; } set { this.PrimaryContactStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of RelationDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RelationDescriptorOption { get; private set; }

        /// <summary>
        /// The nature of an individual&#39;s relationship to a student, primarily used to capture family relationships.
        /// </summary>
        /// <value>The nature of an individual&#39;s relationship to a student, primarily used to capture family relationships.</value>
        [JsonPropertyName("relationDescriptor")]
        public string? RelationDescriptor { get { return this.RelationDescriptorOption; } set { this.RelationDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentParentAssociation entity.
        /// </summary>
        /// <value>Extensions to the StudentParentAssociation entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentParentAssociation {\n");
            sb.Append("  ParentReference: ").Append(ParentReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContactPriority: ").Append(ContactPriority).Append("\n");
            sb.Append("  ContactRestrictions: ").Append(ContactRestrictions).Append("\n");
            sb.Append("  EmergencyContactStatus: ").Append(EmergencyContactStatus).Append("\n");
            sb.Append("  LegalGuardian: ").Append(LegalGuardian).Append("\n");
            sb.Append("  LivesWith: ").Append(LivesWith).Append("\n");
            sb.Append("  PrimaryContactStatus: ").Append(PrimaryContactStatus).Append("\n");
            sb.Append("  RelationDescriptor: ").Append(RelationDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContactRestrictions (string) maxLength
            if (this.ContactRestrictions != null && this.ContactRestrictions.Length > 250)
            {
                yield return new ValidationResult("Invalid value for ContactRestrictions, length must be less than 250.", new [] { "ContactRestrictions" });
            }

            // RelationDescriptor (string) maxLength
            if (this.RelationDescriptor != null && this.RelationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for RelationDescriptor, length must be less than 306.", new [] { "RelationDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentParentAssociation" />
    /// </summary>
    public class EdFiStudentParentAssociationJsonConverter : JsonConverter<EdFiStudentParentAssociation>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentParentAssociation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentParentAssociation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EdFiParentReference?> parentReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> id = default;
            Option<int?> contactPriority = default;
            Option<string?> contactRestrictions = default;
            Option<bool?> emergencyContactStatus = default;
            Option<bool?> legalGuardian = default;
            Option<bool?> livesWith = default;
            Option<bool?> primaryContactStatus = default;
            Option<string?> relationDescriptor = default;
            Option<string?> etag = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "parentReference":
                            parentReference = new Option<EdFiParentReference?>(JsonSerializer.Deserialize<EdFiParentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "contactPriority":
                            contactPriority = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "contactRestrictions":
                            contactRestrictions = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "emergencyContactStatus":
                            emergencyContactStatus = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "legalGuardian":
                            legalGuardian = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "livesWith":
                            livesWith = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "primaryContactStatus":
                            primaryContactStatus = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "relationDescriptor":
                            relationDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!parentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentParentAssociation.", nameof(parentReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentParentAssociation.", nameof(studentReference));

            if (parentReference.IsSet && parentReference.Value == null)
                throw new ArgumentNullException(nameof(parentReference), "Property is not nullable for class EdFiStudentParentAssociation.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentParentAssociation.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentParentAssociation.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentParentAssociation.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentParentAssociation.");

            return new EdFiStudentParentAssociation(parentReference.Value!, studentReference.Value!, id, contactPriority, contactRestrictions, emergencyContactStatus, legalGuardian, livesWith, primaryContactStatus, relationDescriptor, etag, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentParentAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentParentAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentParentAssociation edFiStudentParentAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentParentAssociation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentParentAssociation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentParentAssociation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentParentAssociation edFiStudentParentAssociation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentParentAssociation.ParentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentParentAssociation.ParentReference), "Property is required for class EdFiStudentParentAssociation.");

            if (edFiStudentParentAssociation.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentParentAssociation.StudentReference), "Property is required for class EdFiStudentParentAssociation.");

            if (edFiStudentParentAssociation.IdOption.IsSet && edFiStudentParentAssociation.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentParentAssociation.Id), "Property is required for class EdFiStudentParentAssociation.");

            if (edFiStudentParentAssociation.EtagOption.IsSet && edFiStudentParentAssociation.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentParentAssociation.Etag), "Property is required for class EdFiStudentParentAssociation.");

            if (edFiStudentParentAssociation.ExtOption.IsSet && edFiStudentParentAssociation.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentParentAssociation.Ext), "Property is required for class EdFiStudentParentAssociation.");

            writer.WritePropertyName("parentReference");
            JsonSerializer.Serialize(writer, edFiStudentParentAssociation.ParentReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentParentAssociation.StudentReference, jsonSerializerOptions);
            if (edFiStudentParentAssociation.IdOption.IsSet)
                writer.WriteString("id", edFiStudentParentAssociation.Id);

            if (edFiStudentParentAssociation.ContactPriorityOption.IsSet)
                if (edFiStudentParentAssociation.ContactPriorityOption.Value != null)
                    writer.WriteNumber("contactPriority", edFiStudentParentAssociation.ContactPriorityOption.Value!.Value);
                else
                    writer.WriteNull("contactPriority");

            if (edFiStudentParentAssociation.ContactRestrictionsOption.IsSet)
                if (edFiStudentParentAssociation.ContactRestrictionsOption.Value != null)
                    writer.WriteString("contactRestrictions", edFiStudentParentAssociation.ContactRestrictions);
                else
                    writer.WriteNull("contactRestrictions");

            if (edFiStudentParentAssociation.EmergencyContactStatusOption.IsSet)
                if (edFiStudentParentAssociation.EmergencyContactStatusOption.Value != null)
                    writer.WriteBoolean("emergencyContactStatus", edFiStudentParentAssociation.EmergencyContactStatusOption.Value!.Value);
                else
                    writer.WriteNull("emergencyContactStatus");

            if (edFiStudentParentAssociation.LegalGuardianOption.IsSet)
                if (edFiStudentParentAssociation.LegalGuardianOption.Value != null)
                    writer.WriteBoolean("legalGuardian", edFiStudentParentAssociation.LegalGuardianOption.Value!.Value);
                else
                    writer.WriteNull("legalGuardian");

            if (edFiStudentParentAssociation.LivesWithOption.IsSet)
                if (edFiStudentParentAssociation.LivesWithOption.Value != null)
                    writer.WriteBoolean("livesWith", edFiStudentParentAssociation.LivesWithOption.Value!.Value);
                else
                    writer.WriteNull("livesWith");

            if (edFiStudentParentAssociation.PrimaryContactStatusOption.IsSet)
                if (edFiStudentParentAssociation.PrimaryContactStatusOption.Value != null)
                    writer.WriteBoolean("primaryContactStatus", edFiStudentParentAssociation.PrimaryContactStatusOption.Value!.Value);
                else
                    writer.WriteNull("primaryContactStatus");

            if (edFiStudentParentAssociation.RelationDescriptorOption.IsSet)
                if (edFiStudentParentAssociation.RelationDescriptorOption.Value != null)
                    writer.WriteString("relationDescriptor", edFiStudentParentAssociation.RelationDescriptor);
                else
                    writer.WriteNull("relationDescriptor");

            if (edFiStudentParentAssociation.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentParentAssociation.Etag);

            if (edFiStudentParentAssociation.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentParentAssociation.Ext, jsonSerializerOptions);
            }
        }
    }
}
