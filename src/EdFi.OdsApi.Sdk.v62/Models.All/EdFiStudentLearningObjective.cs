// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v62.Client;

namespace EdFi.OdsApi.Sdk.v62.Models.All
{
    /// <summary>
    /// EdFiStudentLearningObjective
    /// </summary>
    public partial class EdFiStudentLearningObjective : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentLearningObjective" /> class.
        /// </summary>
        /// <param name="gradingPeriodReference">gradingPeriodReference</param>
        /// <param name="learningObjectiveReference">learningObjectiveReference</param>
        /// <param name="studentReference">studentReference</param>
        /// <param name="competencyLevelDescriptor">The competency level assessed for the student for the referenced learning objective.</param>
        /// <param name="id">id</param>
        /// <param name="diagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score.</param>
        /// <param name="generalStudentProgramAssociations">An unordered collection of studentLearningObjectiveGeneralStudentProgramAssociations. Relates the Student and Program associated with the LearningObjective.</param>
        /// <param name="studentSectionAssociations">An unordered collection of studentLearningObjectiveStudentSectionAssociations. Relates the Student and Section associated with the LearningObjective.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="ext">Extensions to the StudentLearningObjective entity.</param>
        [JsonConstructor]
        public EdFiStudentLearningObjective(EdFiGradingPeriodReference gradingPeriodReference, EdFiLearningObjectiveReference learningObjectiveReference, EdFiStudentReference studentReference, string competencyLevelDescriptor, Option<string?> id = default, Option<string?> diagnosticStatement = default, Option<List<EdFiStudentLearningObjectiveGeneralStudentProgramAssociation>?> generalStudentProgramAssociations = default, Option<List<EdFiStudentLearningObjectiveStudentSectionAssociation>?> studentSectionAssociations = default, Option<string?> etag = default, Option<Object?> ext = default)
        {
            GradingPeriodReference = gradingPeriodReference;
            LearningObjectiveReference = learningObjectiveReference;
            StudentReference = studentReference;
            CompetencyLevelDescriptor = competencyLevelDescriptor;
            IdOption = id;
            DiagnosticStatementOption = diagnosticStatement;
            GeneralStudentProgramAssociationsOption = generalStudentProgramAssociations;
            StudentSectionAssociationsOption = studentSectionAssociations;
            EtagOption = etag;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets GradingPeriodReference
        /// </summary>
        [JsonPropertyName("gradingPeriodReference")]
        public EdFiGradingPeriodReference GradingPeriodReference { get; set; }

        /// <summary>
        /// Gets or Sets LearningObjectiveReference
        /// </summary>
        [JsonPropertyName("learningObjectiveReference")]
        public EdFiLearningObjectiveReference LearningObjectiveReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [JsonPropertyName("studentReference")]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// The competency level assessed for the student for the referenced learning objective.
        /// </summary>
        /// <value>The competency level assessed for the student for the referenced learning objective.</value>
        [JsonPropertyName("competencyLevelDescriptor")]
        public string CompetencyLevelDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DiagnosticStatement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DiagnosticStatementOption { get; private set; }

        /// <summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        /// </summary>
        /// <value>A statement provided by the teacher that provides information in addition to the grade or assessment score.</value>
        [JsonPropertyName("diagnosticStatement")]
        public string? DiagnosticStatement { get { return this.DiagnosticStatementOption; } set { this.DiagnosticStatementOption = new(value); } }

        /// <summary>
        /// Used to track the state of GeneralStudentProgramAssociations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentLearningObjectiveGeneralStudentProgramAssociation>?> GeneralStudentProgramAssociationsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentLearningObjectiveGeneralStudentProgramAssociations. Relates the Student and Program associated with the LearningObjective.
        /// </summary>
        /// <value>An unordered collection of studentLearningObjectiveGeneralStudentProgramAssociations. Relates the Student and Program associated with the LearningObjective.</value>
        [JsonPropertyName("generalStudentProgramAssociations")]
        public List<EdFiStudentLearningObjectiveGeneralStudentProgramAssociation>? GeneralStudentProgramAssociations { get { return this.GeneralStudentProgramAssociationsOption; } set { this.GeneralStudentProgramAssociationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudentSectionAssociations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiStudentLearningObjectiveStudentSectionAssociation>?> StudentSectionAssociationsOption { get; private set; }

        /// <summary>
        /// An unordered collection of studentLearningObjectiveStudentSectionAssociations. Relates the Student and Section associated with the LearningObjective.
        /// </summary>
        /// <value>An unordered collection of studentLearningObjectiveStudentSectionAssociations. Relates the Student and Section associated with the LearningObjective.</value>
        [JsonPropertyName("studentSectionAssociations")]
        public List<EdFiStudentLearningObjectiveStudentSectionAssociation>? StudentSectionAssociations { get { return this.StudentSectionAssociationsOption; } set { this.StudentSectionAssociationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentLearningObjective entity.
        /// </summary>
        /// <value>Extensions to the StudentLearningObjective entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentLearningObjective {\n");
            sb.Append("  GradingPeriodReference: ").Append(GradingPeriodReference).Append("\n");
            sb.Append("  LearningObjectiveReference: ").Append(LearningObjectiveReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  CompetencyLevelDescriptor: ").Append(CompetencyLevelDescriptor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DiagnosticStatement: ").Append(DiagnosticStatement).Append("\n");
            sb.Append("  GeneralStudentProgramAssociations: ").Append(GeneralStudentProgramAssociations).Append("\n");
            sb.Append("  StudentSectionAssociations: ").Append(StudentSectionAssociations).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CompetencyLevelDescriptor (string) maxLength
            if (this.CompetencyLevelDescriptor != null && this.CompetencyLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CompetencyLevelDescriptor, length must be less than 306.", new [] { "CompetencyLevelDescriptor" });
            }

            // DiagnosticStatement (string) maxLength
            if (this.DiagnosticStatement != null && this.DiagnosticStatement.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for DiagnosticStatement, length must be less than 1024.", new [] { "DiagnosticStatement" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentLearningObjective" />
    /// </summary>
    public class EdFiStudentLearningObjectiveJsonConverter : JsonConverter<EdFiStudentLearningObjective>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentLearningObjective" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentLearningObjective Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EdFiGradingPeriodReference?> gradingPeriodReference = default;
            Option<EdFiLearningObjectiveReference?> learningObjectiveReference = default;
            Option<EdFiStudentReference?> studentReference = default;
            Option<string?> competencyLevelDescriptor = default;
            Option<string?> id = default;
            Option<string?> diagnosticStatement = default;
            Option<List<EdFiStudentLearningObjectiveGeneralStudentProgramAssociation>?> generalStudentProgramAssociations = default;
            Option<List<EdFiStudentLearningObjectiveStudentSectionAssociation>?> studentSectionAssociations = default;
            Option<string?> etag = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "gradingPeriodReference":
                            gradingPeriodReference = new Option<EdFiGradingPeriodReference?>(JsonSerializer.Deserialize<EdFiGradingPeriodReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "learningObjectiveReference":
                            learningObjectiveReference = new Option<EdFiLearningObjectiveReference?>(JsonSerializer.Deserialize<EdFiLearningObjectiveReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentReference":
                            studentReference = new Option<EdFiStudentReference?>(JsonSerializer.Deserialize<EdFiStudentReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "competencyLevelDescriptor":
                            competencyLevelDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "diagnosticStatement":
                            diagnosticStatement = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "generalStudentProgramAssociations":
                            generalStudentProgramAssociations = new Option<List<EdFiStudentLearningObjectiveGeneralStudentProgramAssociation>?>(JsonSerializer.Deserialize<List<EdFiStudentLearningObjectiveGeneralStudentProgramAssociation>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "studentSectionAssociations":
                            studentSectionAssociations = new Option<List<EdFiStudentLearningObjectiveStudentSectionAssociation>?>(JsonSerializer.Deserialize<List<EdFiStudentLearningObjectiveStudentSectionAssociation>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!gradingPeriodReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentLearningObjective.", nameof(gradingPeriodReference));

            if (!learningObjectiveReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentLearningObjective.", nameof(learningObjectiveReference));

            if (!studentReference.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentLearningObjective.", nameof(studentReference));

            if (!competencyLevelDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentLearningObjective.", nameof(competencyLevelDescriptor));

            if (gradingPeriodReference.IsSet && gradingPeriodReference.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodReference), "Property is not nullable for class EdFiStudentLearningObjective.");

            if (learningObjectiveReference.IsSet && learningObjectiveReference.Value == null)
                throw new ArgumentNullException(nameof(learningObjectiveReference), "Property is not nullable for class EdFiStudentLearningObjective.");

            if (studentReference.IsSet && studentReference.Value == null)
                throw new ArgumentNullException(nameof(studentReference), "Property is not nullable for class EdFiStudentLearningObjective.");

            if (competencyLevelDescriptor.IsSet && competencyLevelDescriptor.Value == null)
                throw new ArgumentNullException(nameof(competencyLevelDescriptor), "Property is not nullable for class EdFiStudentLearningObjective.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiStudentLearningObjective.");

            if (generalStudentProgramAssociations.IsSet && generalStudentProgramAssociations.Value == null)
                throw new ArgumentNullException(nameof(generalStudentProgramAssociations), "Property is not nullable for class EdFiStudentLearningObjective.");

            if (studentSectionAssociations.IsSet && studentSectionAssociations.Value == null)
                throw new ArgumentNullException(nameof(studentSectionAssociations), "Property is not nullable for class EdFiStudentLearningObjective.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiStudentLearningObjective.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentLearningObjective.");

            return new EdFiStudentLearningObjective(gradingPeriodReference.Value!, learningObjectiveReference.Value!, studentReference.Value!, competencyLevelDescriptor.Value!, id, diagnosticStatement, generalStudentProgramAssociations, studentSectionAssociations, etag, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentLearningObjective" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentLearningObjective"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentLearningObjective edFiStudentLearningObjective, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentLearningObjective, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentLearningObjective" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentLearningObjective"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentLearningObjective edFiStudentLearningObjective, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentLearningObjective.GradingPeriodReference == null)
                throw new ArgumentNullException(nameof(edFiStudentLearningObjective.GradingPeriodReference), "Property is required for class EdFiStudentLearningObjective.");

            if (edFiStudentLearningObjective.LearningObjectiveReference == null)
                throw new ArgumentNullException(nameof(edFiStudentLearningObjective.LearningObjectiveReference), "Property is required for class EdFiStudentLearningObjective.");

            if (edFiStudentLearningObjective.StudentReference == null)
                throw new ArgumentNullException(nameof(edFiStudentLearningObjective.StudentReference), "Property is required for class EdFiStudentLearningObjective.");

            if (edFiStudentLearningObjective.CompetencyLevelDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentLearningObjective.CompetencyLevelDescriptor), "Property is required for class EdFiStudentLearningObjective.");

            if (edFiStudentLearningObjective.IdOption.IsSet && edFiStudentLearningObjective.Id == null)
                throw new ArgumentNullException(nameof(edFiStudentLearningObjective.Id), "Property is required for class EdFiStudentLearningObjective.");

            if (edFiStudentLearningObjective.GeneralStudentProgramAssociationsOption.IsSet && edFiStudentLearningObjective.GeneralStudentProgramAssociations == null)
                throw new ArgumentNullException(nameof(edFiStudentLearningObjective.GeneralStudentProgramAssociations), "Property is required for class EdFiStudentLearningObjective.");

            if (edFiStudentLearningObjective.StudentSectionAssociationsOption.IsSet && edFiStudentLearningObjective.StudentSectionAssociations == null)
                throw new ArgumentNullException(nameof(edFiStudentLearningObjective.StudentSectionAssociations), "Property is required for class EdFiStudentLearningObjective.");

            if (edFiStudentLearningObjective.EtagOption.IsSet && edFiStudentLearningObjective.Etag == null)
                throw new ArgumentNullException(nameof(edFiStudentLearningObjective.Etag), "Property is required for class EdFiStudentLearningObjective.");

            if (edFiStudentLearningObjective.ExtOption.IsSet && edFiStudentLearningObjective.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentLearningObjective.Ext), "Property is required for class EdFiStudentLearningObjective.");

            writer.WritePropertyName("gradingPeriodReference");
            JsonSerializer.Serialize(writer, edFiStudentLearningObjective.GradingPeriodReference, jsonSerializerOptions);
            writer.WritePropertyName("learningObjectiveReference");
            JsonSerializer.Serialize(writer, edFiStudentLearningObjective.LearningObjectiveReference, jsonSerializerOptions);
            writer.WritePropertyName("studentReference");
            JsonSerializer.Serialize(writer, edFiStudentLearningObjective.StudentReference, jsonSerializerOptions);
            writer.WriteString("competencyLevelDescriptor", edFiStudentLearningObjective.CompetencyLevelDescriptor);

            if (edFiStudentLearningObjective.IdOption.IsSet)
                writer.WriteString("id", edFiStudentLearningObjective.Id);

            if (edFiStudentLearningObjective.DiagnosticStatementOption.IsSet)
                if (edFiStudentLearningObjective.DiagnosticStatementOption.Value != null)
                    writer.WriteString("diagnosticStatement", edFiStudentLearningObjective.DiagnosticStatement);
                else
                    writer.WriteNull("diagnosticStatement");

            if (edFiStudentLearningObjective.GeneralStudentProgramAssociationsOption.IsSet)
            {
                writer.WritePropertyName("generalStudentProgramAssociations");
                JsonSerializer.Serialize(writer, edFiStudentLearningObjective.GeneralStudentProgramAssociations, jsonSerializerOptions);
            }
            if (edFiStudentLearningObjective.StudentSectionAssociationsOption.IsSet)
            {
                writer.WritePropertyName("studentSectionAssociations");
                JsonSerializer.Serialize(writer, edFiStudentLearningObjective.StudentSectionAssociations, jsonSerializerOptions);
            }
            if (edFiStudentLearningObjective.EtagOption.IsSet)
                writer.WriteString("_etag", edFiStudentLearningObjective.Etag);

            if (edFiStudentLearningObjective.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentLearningObjective.Ext, jsonSerializerOptions);
            }
        }
    }
}
