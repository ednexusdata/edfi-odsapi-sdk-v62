// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v62.Client;

namespace EdFi.OdsApi.Sdk.v62.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiStudentLearningObjectiveKey
    /// </summary>
    public partial class TrackedChangesEdFiStudentLearningObjectiveKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiStudentLearningObjectiveKey" /> class.
        /// </summary>
        /// <param name="gradingPeriodDescriptor">The name of the period for which grades are reported.</param>
        /// <param name="gradingPeriodSequence">The sequential order of this period relative to other periods.</param>
        /// <param name="gradingPeriodSchoolId">The identifier assigned to a school.</param>
        /// <param name="gradingPeriodSchoolYear">The identifier for the grading period school year.</param>
        /// <param name="learningObjectiveId">The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).</param>
        /// <param name="namespace">Namespace for the learning objective.</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student.</param>
        [JsonConstructor]
        public TrackedChangesEdFiStudentLearningObjectiveKey(Option<string?> gradingPeriodDescriptor = default, Option<int?> gradingPeriodSequence = default, Option<int?> gradingPeriodSchoolId = default, Option<int?> gradingPeriodSchoolYear = default, Option<string?> learningObjectiveId = default, Option<string?> @namespace = default, Option<string?> studentUniqueId = default)
        {
            GradingPeriodDescriptorOption = gradingPeriodDescriptor;
            GradingPeriodSequenceOption = gradingPeriodSequence;
            GradingPeriodSchoolIdOption = gradingPeriodSchoolId;
            GradingPeriodSchoolYearOption = gradingPeriodSchoolYear;
            LearningObjectiveIdOption = learningObjectiveId;
            NamespaceOption = @namespace;
            StudentUniqueIdOption = studentUniqueId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of GradingPeriodDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GradingPeriodDescriptorOption { get; private set; }

        /// <summary>
        /// The name of the period for which grades are reported.
        /// </summary>
        /// <value>The name of the period for which grades are reported.</value>
        [JsonPropertyName("gradingPeriodDescriptor")]
        public string? GradingPeriodDescriptor { get { return this.GradingPeriodDescriptorOption; } set { this.GradingPeriodDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradingPeriodSequence
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GradingPeriodSequenceOption { get; private set; }

        /// <summary>
        /// The sequential order of this period relative to other periods.
        /// </summary>
        /// <value>The sequential order of this period relative to other periods.</value>
        [JsonPropertyName("gradingPeriodSequence")]
        public int? GradingPeriodSequence { get { return this.GradingPeriodSequenceOption; } set { this.GradingPeriodSequenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradingPeriodSchoolId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GradingPeriodSchoolIdOption { get; private set; }

        /// <summary>
        /// The identifier assigned to a school.
        /// </summary>
        /// <value>The identifier assigned to a school.</value>
        [JsonPropertyName("gradingPeriodSchoolId")]
        public int? GradingPeriodSchoolId { get { return this.GradingPeriodSchoolIdOption; } set { this.GradingPeriodSchoolIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradingPeriodSchoolYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GradingPeriodSchoolYearOption { get; private set; }

        /// <summary>
        /// The identifier for the grading period school year.
        /// </summary>
        /// <value>The identifier for the grading period school year.</value>
        [JsonPropertyName("gradingPeriodSchoolYear")]
        public int? GradingPeriodSchoolYear { get { return this.GradingPeriodSchoolYearOption; } set { this.GradingPeriodSchoolYearOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningObjectiveId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LearningObjectiveIdOption { get; private set; }

        /// <summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        /// </summary>
        /// <value>The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).</value>
        [JsonPropertyName("learningObjectiveId")]
        public string? LearningObjectiveId { get { return this.LearningObjectiveIdOption; } set { this.LearningObjectiveIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Namespace
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NamespaceOption { get; private set; }

        /// <summary>
        /// Namespace for the learning objective.
        /// </summary>
        /// <value>Namespace for the learning objective.</value>
        [JsonPropertyName("namespace")]
        public string? Namespace { get { return this.NamespaceOption; } set { this.NamespaceOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudentUniqueId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudentUniqueIdOption { get; private set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a student.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a student.</value>
        [JsonPropertyName("studentUniqueId")]
        public string? StudentUniqueId { get { return this.StudentUniqueIdOption; } set { this.StudentUniqueIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiStudentLearningObjectiveKey {\n");
            sb.Append("  GradingPeriodDescriptor: ").Append(GradingPeriodDescriptor).Append("\n");
            sb.Append("  GradingPeriodSequence: ").Append(GradingPeriodSequence).Append("\n");
            sb.Append("  GradingPeriodSchoolId: ").Append(GradingPeriodSchoolId).Append("\n");
            sb.Append("  GradingPeriodSchoolYear: ").Append(GradingPeriodSchoolYear).Append("\n");
            sb.Append("  LearningObjectiveId: ").Append(LearningObjectiveId).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  StudentUniqueId: ").Append(StudentUniqueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GradingPeriodDescriptor (string) maxLength
            if (this.GradingPeriodDescriptor != null && this.GradingPeriodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GradingPeriodDescriptor, length must be less than 306.", new [] { "GradingPeriodDescriptor" });
            }

            // LearningObjectiveId (string) maxLength
            if (this.LearningObjectiveId != null && this.LearningObjectiveId.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LearningObjectiveId, length must be less than 60.", new [] { "LearningObjectiveId" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // StudentUniqueId (string) maxLength
            if (this.StudentUniqueId != null && this.StudentUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for StudentUniqueId, length must be less than 32.", new [] { "StudentUniqueId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackedChangesEdFiStudentLearningObjectiveKey" />
    /// </summary>
    public class TrackedChangesEdFiStudentLearningObjectiveKeyJsonConverter : JsonConverter<TrackedChangesEdFiStudentLearningObjectiveKey>
    {
        /// <summary>
        /// Deserializes json to <see cref="TrackedChangesEdFiStudentLearningObjectiveKey" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackedChangesEdFiStudentLearningObjectiveKey Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> gradingPeriodDescriptor = default;
            Option<int?> gradingPeriodSequence = default;
            Option<int?> gradingPeriodSchoolId = default;
            Option<int?> gradingPeriodSchoolYear = default;
            Option<string?> learningObjectiveId = default;
            Option<string?> varNamespace = default;
            Option<string?> studentUniqueId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "gradingPeriodDescriptor":
                            gradingPeriodDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gradingPeriodSequence":
                            gradingPeriodSequence = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "gradingPeriodSchoolId":
                            gradingPeriodSchoolId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "gradingPeriodSchoolYear":
                            gradingPeriodSchoolYear = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "learningObjectiveId":
                            learningObjectiveId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "studentUniqueId":
                            studentUniqueId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (gradingPeriodDescriptor.IsSet && gradingPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodDescriptor), "Property is not nullable for class TrackedChangesEdFiStudentLearningObjectiveKey.");

            if (gradingPeriodSequence.IsSet && gradingPeriodSequence.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodSequence), "Property is not nullable for class TrackedChangesEdFiStudentLearningObjectiveKey.");

            if (gradingPeriodSchoolId.IsSet && gradingPeriodSchoolId.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodSchoolId), "Property is not nullable for class TrackedChangesEdFiStudentLearningObjectiveKey.");

            if (gradingPeriodSchoolYear.IsSet && gradingPeriodSchoolYear.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodSchoolYear), "Property is not nullable for class TrackedChangesEdFiStudentLearningObjectiveKey.");

            if (learningObjectiveId.IsSet && learningObjectiveId.Value == null)
                throw new ArgumentNullException(nameof(learningObjectiveId), "Property is not nullable for class TrackedChangesEdFiStudentLearningObjectiveKey.");

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace), "Property is not nullable for class TrackedChangesEdFiStudentLearningObjectiveKey.");

            if (studentUniqueId.IsSet && studentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(studentUniqueId), "Property is not nullable for class TrackedChangesEdFiStudentLearningObjectiveKey.");

            return new TrackedChangesEdFiStudentLearningObjectiveKey(gradingPeriodDescriptor, gradingPeriodSequence, gradingPeriodSchoolId, gradingPeriodSchoolYear, learningObjectiveId, varNamespace, studentUniqueId);
        }

        /// <summary>
        /// Serializes a <see cref="TrackedChangesEdFiStudentLearningObjectiveKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiStudentLearningObjectiveKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackedChangesEdFiStudentLearningObjectiveKey trackedChangesEdFiStudentLearningObjectiveKey, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackedChangesEdFiStudentLearningObjectiveKey, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackedChangesEdFiStudentLearningObjectiveKey" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackedChangesEdFiStudentLearningObjectiveKey"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackedChangesEdFiStudentLearningObjectiveKey trackedChangesEdFiStudentLearningObjectiveKey, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackedChangesEdFiStudentLearningObjectiveKey.GradingPeriodDescriptorOption.IsSet && trackedChangesEdFiStudentLearningObjectiveKey.GradingPeriodDescriptor == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentLearningObjectiveKey.GradingPeriodDescriptor), "Property is required for class TrackedChangesEdFiStudentLearningObjectiveKey.");

            if (trackedChangesEdFiStudentLearningObjectiveKey.LearningObjectiveIdOption.IsSet && trackedChangesEdFiStudentLearningObjectiveKey.LearningObjectiveId == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentLearningObjectiveKey.LearningObjectiveId), "Property is required for class TrackedChangesEdFiStudentLearningObjectiveKey.");

            if (trackedChangesEdFiStudentLearningObjectiveKey.NamespaceOption.IsSet && trackedChangesEdFiStudentLearningObjectiveKey.Namespace == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentLearningObjectiveKey.Namespace), "Property is required for class TrackedChangesEdFiStudentLearningObjectiveKey.");

            if (trackedChangesEdFiStudentLearningObjectiveKey.StudentUniqueIdOption.IsSet && trackedChangesEdFiStudentLearningObjectiveKey.StudentUniqueId == null)
                throw new ArgumentNullException(nameof(trackedChangesEdFiStudentLearningObjectiveKey.StudentUniqueId), "Property is required for class TrackedChangesEdFiStudentLearningObjectiveKey.");

            if (trackedChangesEdFiStudentLearningObjectiveKey.GradingPeriodDescriptorOption.IsSet)
                writer.WriteString("gradingPeriodDescriptor", trackedChangesEdFiStudentLearningObjectiveKey.GradingPeriodDescriptor);

            if (trackedChangesEdFiStudentLearningObjectiveKey.GradingPeriodSequenceOption.IsSet)
                writer.WriteNumber("gradingPeriodSequence", trackedChangesEdFiStudentLearningObjectiveKey.GradingPeriodSequenceOption.Value!.Value);

            if (trackedChangesEdFiStudentLearningObjectiveKey.GradingPeriodSchoolIdOption.IsSet)
                writer.WriteNumber("gradingPeriodSchoolId", trackedChangesEdFiStudentLearningObjectiveKey.GradingPeriodSchoolIdOption.Value!.Value);

            if (trackedChangesEdFiStudentLearningObjectiveKey.GradingPeriodSchoolYearOption.IsSet)
                writer.WriteNumber("gradingPeriodSchoolYear", trackedChangesEdFiStudentLearningObjectiveKey.GradingPeriodSchoolYearOption.Value!.Value);

            if (trackedChangesEdFiStudentLearningObjectiveKey.LearningObjectiveIdOption.IsSet)
                writer.WriteString("learningObjectiveId", trackedChangesEdFiStudentLearningObjectiveKey.LearningObjectiveId);

            if (trackedChangesEdFiStudentLearningObjectiveKey.NamespaceOption.IsSet)
                writer.WriteString("namespace", trackedChangesEdFiStudentLearningObjectiveKey.Namespace);

            if (trackedChangesEdFiStudentLearningObjectiveKey.StudentUniqueIdOption.IsSet)
                writer.WriteString("studentUniqueId", trackedChangesEdFiStudentLearningObjectiveKey.StudentUniqueId);
        }
    }
}
