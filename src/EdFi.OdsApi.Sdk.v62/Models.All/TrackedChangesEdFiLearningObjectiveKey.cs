/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v62.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v62.Models.All
{
    /// <summary>
    /// TrackedChangesEdFiLearningObjectiveKey
    /// </summary>
    [DataContract(Name = "trackedChanges_edFi_learningObjectiveKey")]
    public partial class TrackedChangesEdFiLearningObjectiveKey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedChangesEdFiLearningObjectiveKey" /> class.
        /// </summary>
        /// <param name="learningObjectiveId">The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A)..</param>
        /// <param name="varNamespace">Namespace for the learning objective..</param>
        public TrackedChangesEdFiLearningObjectiveKey(string learningObjectiveId = default, string varNamespace = default)
        {
            this.LearningObjectiveId = learningObjectiveId;
            this.Namespace = varNamespace;
        }

        /// <summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        /// </summary>
        /// <value>The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).</value>
        [DataMember(Name = "learningObjectiveId", EmitDefaultValue = false)]
        public string LearningObjectiveId { get; set; }

        /// <summary>
        /// Namespace for the learning objective.
        /// </summary>
        /// <value>Namespace for the learning objective.</value>
        [DataMember(Name = "namespace", EmitDefaultValue = false)]
        public string Namespace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedChangesEdFiLearningObjectiveKey {\n");
            sb.Append("  LearningObjectiveId: ").Append(LearningObjectiveId).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LearningObjectiveId (string) maxLength
            if (this.LearningObjectiveId != null && this.LearningObjectiveId.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LearningObjectiveId, length must be less than 60.", new [] { "LearningObjectiveId" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            yield break;
        }
    }

}
