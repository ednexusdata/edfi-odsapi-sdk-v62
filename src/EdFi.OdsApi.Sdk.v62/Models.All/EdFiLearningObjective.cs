// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v62.Client;

namespace EdFi.OdsApi.Sdk.v62.Models.All
{
    /// <summary>
    /// EdFiLearningObjective
    /// </summary>
    public partial class EdFiLearningObjective : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningObjective" /> class.
        /// </summary>
        /// <param name="academicSubjects">An unordered collection of learningObjectiveAcademicSubjects. The description of the content or subject area of an assessment.</param>
        /// <param name="learningObjectiveId">The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).</param>
        /// <param name="namespace">Namespace for the learning objective.</param>
        /// <param name="objective">The designated title of the learning objective.</param>
        /// <param name="id">id</param>
        /// <param name="parentLearningObjectiveReference">parentLearningObjectiveReference</param>
        /// <param name="contentStandard">contentStandard</param>
        /// <param name="description">The description of the learning objective.</param>
        /// <param name="gradeLevels">An unordered collection of learningObjectiveGradeLevels. The grade level for which the learning objective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.</param>
        /// <param name="learningStandards">An unordered collection of learningObjectiveLearningStandards. Learning standard(s) included in this objective.</param>
        /// <param name="nomenclature">Reflects the specific nomenclature used for the learning objective.</param>
        /// <param name="successCriteria">One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the learning objective.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="ext">Extensions to the LearningObjective entity.</param>
        [JsonConstructor]
        public EdFiLearningObjective(List<EdFiLearningObjectiveAcademicSubject> academicSubjects, string learningObjectiveId, string @namespace, string objective, Option<string?> id = default, Option<EdFiLearningObjectiveReference?> parentLearningObjectiveReference = default, Option<EdFiLearningObjectiveContentStandard?> contentStandard = default, Option<string?> description = default, Option<List<EdFiLearningObjectiveGradeLevel>?> gradeLevels = default, Option<List<EdFiLearningObjectiveLearningStandard>?> learningStandards = default, Option<string?> nomenclature = default, Option<string?> successCriteria = default, Option<string?> etag = default, Option<Object?> ext = default)
        {
            AcademicSubjects = academicSubjects;
            LearningObjectiveId = learningObjectiveId;
            Namespace = @namespace;
            Objective = objective;
            IdOption = id;
            ParentLearningObjectiveReferenceOption = parentLearningObjectiveReference;
            ContentStandardOption = contentStandard;
            DescriptionOption = description;
            GradeLevelsOption = gradeLevels;
            LearningStandardsOption = learningStandards;
            NomenclatureOption = nomenclature;
            SuccessCriteriaOption = successCriteria;
            EtagOption = etag;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An unordered collection of learningObjectiveAcademicSubjects. The description of the content or subject area of an assessment.
        /// </summary>
        /// <value>An unordered collection of learningObjectiveAcademicSubjects. The description of the content or subject area of an assessment.</value>
        [JsonPropertyName("academicSubjects")]
        public List<EdFiLearningObjectiveAcademicSubject> AcademicSubjects { get; set; }

        /// <summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        /// </summary>
        /// <value>The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).</value>
        [JsonPropertyName("learningObjectiveId")]
        public string LearningObjectiveId { get; set; }

        /// <summary>
        /// Namespace for the learning objective.
        /// </summary>
        /// <value>Namespace for the learning objective.</value>
        [JsonPropertyName("namespace")]
        public string Namespace { get; set; }

        /// <summary>
        /// The designated title of the learning objective.
        /// </summary>
        /// <value>The designated title of the learning objective.</value>
        [JsonPropertyName("objective")]
        public string Objective { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentLearningObjectiveReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiLearningObjectiveReference?> ParentLearningObjectiveReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentLearningObjectiveReference
        /// </summary>
        [JsonPropertyName("parentLearningObjectiveReference")]
        public EdFiLearningObjectiveReference? ParentLearningObjectiveReference { get { return this.ParentLearningObjectiveReferenceOption; } set { this.ParentLearningObjectiveReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContentStandard
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiLearningObjectiveContentStandard?> ContentStandardOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContentStandard
        /// </summary>
        [JsonPropertyName("contentStandard")]
        public EdFiLearningObjectiveContentStandard? ContentStandard { get { return this.ContentStandardOption; } set { this.ContentStandardOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description of the learning objective.
        /// </summary>
        /// <value>The description of the learning objective.</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of GradeLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiLearningObjectiveGradeLevel>?> GradeLevelsOption { get; private set; }

        /// <summary>
        /// An unordered collection of learningObjectiveGradeLevels. The grade level for which the learning objective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.
        /// </summary>
        /// <value>An unordered collection of learningObjectiveGradeLevels. The grade level for which the learning objective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.</value>
        [JsonPropertyName("gradeLevels")]
        public List<EdFiLearningObjectiveGradeLevel>? GradeLevels { get { return this.GradeLevelsOption; } set { this.GradeLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of LearningStandards
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiLearningObjectiveLearningStandard>?> LearningStandardsOption { get; private set; }

        /// <summary>
        /// An unordered collection of learningObjectiveLearningStandards. Learning standard(s) included in this objective.
        /// </summary>
        /// <value>An unordered collection of learningObjectiveLearningStandards. Learning standard(s) included in this objective.</value>
        [JsonPropertyName("learningStandards")]
        public List<EdFiLearningObjectiveLearningStandard>? LearningStandards { get { return this.LearningStandardsOption; } set { this.LearningStandardsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nomenclature
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NomenclatureOption { get; private set; }

        /// <summary>
        /// Reflects the specific nomenclature used for the learning objective.
        /// </summary>
        /// <value>Reflects the specific nomenclature used for the learning objective.</value>
        [JsonPropertyName("nomenclature")]
        public string? Nomenclature { get { return this.NomenclatureOption; } set { this.NomenclatureOption = new(value); } }

        /// <summary>
        /// Used to track the state of SuccessCriteria
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SuccessCriteriaOption { get; private set; }

        /// <summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the learning objective.
        /// </summary>
        /// <value>One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the learning objective.</value>
        [JsonPropertyName("successCriteria")]
        public string? SuccessCriteria { get { return this.SuccessCriteriaOption; } set { this.SuccessCriteriaOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the LearningObjective entity.
        /// </summary>
        /// <value>Extensions to the LearningObjective entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiLearningObjective {\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  LearningObjectiveId: ").Append(LearningObjectiveId).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Objective: ").Append(Objective).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParentLearningObjectiveReference: ").Append(ParentLearningObjectiveReference).Append("\n");
            sb.Append("  ContentStandard: ").Append(ContentStandard).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  LearningStandards: ").Append(LearningStandards).Append("\n");
            sb.Append("  Nomenclature: ").Append(Nomenclature).Append("\n");
            sb.Append("  SuccessCriteria: ").Append(SuccessCriteria).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LearningObjectiveId (string) maxLength
            if (this.LearningObjectiveId != null && this.LearningObjectiveId.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LearningObjectiveId, length must be less than 60.", new [] { "LearningObjectiveId" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Objective (string) maxLength
            if (this.Objective != null && this.Objective.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Objective, length must be less than 60.", new [] { "Objective" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Nomenclature (string) maxLength
            if (this.Nomenclature != null && this.Nomenclature.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Nomenclature, length must be less than 100.", new [] { "Nomenclature" });
            }

            // SuccessCriteria (string) maxLength
            if (this.SuccessCriteria != null && this.SuccessCriteria.Length > 150)
            {
                yield return new ValidationResult("Invalid value for SuccessCriteria, length must be less than 150.", new [] { "SuccessCriteria" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiLearningObjective" />
    /// </summary>
    public class EdFiLearningObjectiveJsonConverter : JsonConverter<EdFiLearningObjective>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiLearningObjective" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiLearningObjective Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<EdFiLearningObjectiveAcademicSubject>?> academicSubjects = default;
            Option<string?> learningObjectiveId = default;
            Option<string?> varNamespace = default;
            Option<string?> objective = default;
            Option<string?> id = default;
            Option<EdFiLearningObjectiveReference?> parentLearningObjectiveReference = default;
            Option<EdFiLearningObjectiveContentStandard?> contentStandard = default;
            Option<string?> description = default;
            Option<List<EdFiLearningObjectiveGradeLevel>?> gradeLevels = default;
            Option<List<EdFiLearningObjectiveLearningStandard>?> learningStandards = default;
            Option<string?> nomenclature = default;
            Option<string?> successCriteria = default;
            Option<string?> etag = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "academicSubjects":
                            academicSubjects = new Option<List<EdFiLearningObjectiveAcademicSubject>?>(JsonSerializer.Deserialize<List<EdFiLearningObjectiveAcademicSubject>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "learningObjectiveId":
                            learningObjectiveId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "namespace":
                            varNamespace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "objective":
                            objective = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parentLearningObjectiveReference":
                            parentLearningObjectiveReference = new Option<EdFiLearningObjectiveReference?>(JsonSerializer.Deserialize<EdFiLearningObjectiveReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "contentStandard":
                            contentStandard = new Option<EdFiLearningObjectiveContentStandard?>(JsonSerializer.Deserialize<EdFiLearningObjectiveContentStandard>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "gradeLevels":
                            gradeLevels = new Option<List<EdFiLearningObjectiveGradeLevel>?>(JsonSerializer.Deserialize<List<EdFiLearningObjectiveGradeLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "learningStandards":
                            learningStandards = new Option<List<EdFiLearningObjectiveLearningStandard>?>(JsonSerializer.Deserialize<List<EdFiLearningObjectiveLearningStandard>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "nomenclature":
                            nomenclature = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "successCriteria":
                            successCriteria = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!academicSubjects.IsSet)
                throw new ArgumentException("Property is required for class EdFiLearningObjective.", nameof(academicSubjects));

            if (!learningObjectiveId.IsSet)
                throw new ArgumentException("Property is required for class EdFiLearningObjective.", nameof(learningObjectiveId));

            if (!varNamespace.IsSet)
                throw new ArgumentException("Property is required for class EdFiLearningObjective.", nameof(varNamespace));

            if (!objective.IsSet)
                throw new ArgumentException("Property is required for class EdFiLearningObjective.", nameof(objective));

            if (academicSubjects.IsSet && academicSubjects.Value == null)
                throw new ArgumentNullException(nameof(academicSubjects), "Property is not nullable for class EdFiLearningObjective.");

            if (learningObjectiveId.IsSet && learningObjectiveId.Value == null)
                throw new ArgumentNullException(nameof(learningObjectiveId), "Property is not nullable for class EdFiLearningObjective.");

            if (varNamespace.IsSet && varNamespace.Value == null)
                throw new ArgumentNullException(nameof(varNamespace), "Property is not nullable for class EdFiLearningObjective.");

            if (objective.IsSet && objective.Value == null)
                throw new ArgumentNullException(nameof(objective), "Property is not nullable for class EdFiLearningObjective.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiLearningObjective.");

            if (parentLearningObjectiveReference.IsSet && parentLearningObjectiveReference.Value == null)
                throw new ArgumentNullException(nameof(parentLearningObjectiveReference), "Property is not nullable for class EdFiLearningObjective.");

            if (contentStandard.IsSet && contentStandard.Value == null)
                throw new ArgumentNullException(nameof(contentStandard), "Property is not nullable for class EdFiLearningObjective.");

            if (gradeLevels.IsSet && gradeLevels.Value == null)
                throw new ArgumentNullException(nameof(gradeLevels), "Property is not nullable for class EdFiLearningObjective.");

            if (learningStandards.IsSet && learningStandards.Value == null)
                throw new ArgumentNullException(nameof(learningStandards), "Property is not nullable for class EdFiLearningObjective.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiLearningObjective.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiLearningObjective.");

            return new EdFiLearningObjective(academicSubjects.Value!, learningObjectiveId.Value!, varNamespace.Value!, objective.Value!, id, parentLearningObjectiveReference, contentStandard, description, gradeLevels, learningStandards, nomenclature, successCriteria, etag, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiLearningObjective" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLearningObjective"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiLearningObjective edFiLearningObjective, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiLearningObjective, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiLearningObjective" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLearningObjective"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiLearningObjective edFiLearningObjective, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiLearningObjective.AcademicSubjects == null)
                throw new ArgumentNullException(nameof(edFiLearningObjective.AcademicSubjects), "Property is required for class EdFiLearningObjective.");

            if (edFiLearningObjective.LearningObjectiveId == null)
                throw new ArgumentNullException(nameof(edFiLearningObjective.LearningObjectiveId), "Property is required for class EdFiLearningObjective.");

            if (edFiLearningObjective.Namespace == null)
                throw new ArgumentNullException(nameof(edFiLearningObjective.Namespace), "Property is required for class EdFiLearningObjective.");

            if (edFiLearningObjective.Objective == null)
                throw new ArgumentNullException(nameof(edFiLearningObjective.Objective), "Property is required for class EdFiLearningObjective.");

            if (edFiLearningObjective.IdOption.IsSet && edFiLearningObjective.Id == null)
                throw new ArgumentNullException(nameof(edFiLearningObjective.Id), "Property is required for class EdFiLearningObjective.");

            if (edFiLearningObjective.ParentLearningObjectiveReferenceOption.IsSet && edFiLearningObjective.ParentLearningObjectiveReference == null)
                throw new ArgumentNullException(nameof(edFiLearningObjective.ParentLearningObjectiveReference), "Property is required for class EdFiLearningObjective.");

            if (edFiLearningObjective.ContentStandardOption.IsSet && edFiLearningObjective.ContentStandard == null)
                throw new ArgumentNullException(nameof(edFiLearningObjective.ContentStandard), "Property is required for class EdFiLearningObjective.");

            if (edFiLearningObjective.GradeLevelsOption.IsSet && edFiLearningObjective.GradeLevels == null)
                throw new ArgumentNullException(nameof(edFiLearningObjective.GradeLevels), "Property is required for class EdFiLearningObjective.");

            if (edFiLearningObjective.LearningStandardsOption.IsSet && edFiLearningObjective.LearningStandards == null)
                throw new ArgumentNullException(nameof(edFiLearningObjective.LearningStandards), "Property is required for class EdFiLearningObjective.");

            if (edFiLearningObjective.EtagOption.IsSet && edFiLearningObjective.Etag == null)
                throw new ArgumentNullException(nameof(edFiLearningObjective.Etag), "Property is required for class EdFiLearningObjective.");

            if (edFiLearningObjective.ExtOption.IsSet && edFiLearningObjective.Ext == null)
                throw new ArgumentNullException(nameof(edFiLearningObjective.Ext), "Property is required for class EdFiLearningObjective.");

            writer.WritePropertyName("academicSubjects");
            JsonSerializer.Serialize(writer, edFiLearningObjective.AcademicSubjects, jsonSerializerOptions);
            writer.WriteString("learningObjectiveId", edFiLearningObjective.LearningObjectiveId);

            writer.WriteString("namespace", edFiLearningObjective.Namespace);

            writer.WriteString("objective", edFiLearningObjective.Objective);

            if (edFiLearningObjective.IdOption.IsSet)
                writer.WriteString("id", edFiLearningObjective.Id);

            if (edFiLearningObjective.ParentLearningObjectiveReferenceOption.IsSet)
            {
                writer.WritePropertyName("parentLearningObjectiveReference");
                JsonSerializer.Serialize(writer, edFiLearningObjective.ParentLearningObjectiveReference, jsonSerializerOptions);
            }
            if (edFiLearningObjective.ContentStandardOption.IsSet)
            {
                writer.WritePropertyName("contentStandard");
                JsonSerializer.Serialize(writer, edFiLearningObjective.ContentStandard, jsonSerializerOptions);
            }
            if (edFiLearningObjective.DescriptionOption.IsSet)
                if (edFiLearningObjective.DescriptionOption.Value != null)
                    writer.WriteString("description", edFiLearningObjective.Description);
                else
                    writer.WriteNull("description");

            if (edFiLearningObjective.GradeLevelsOption.IsSet)
            {
                writer.WritePropertyName("gradeLevels");
                JsonSerializer.Serialize(writer, edFiLearningObjective.GradeLevels, jsonSerializerOptions);
            }
            if (edFiLearningObjective.LearningStandardsOption.IsSet)
            {
                writer.WritePropertyName("learningStandards");
                JsonSerializer.Serialize(writer, edFiLearningObjective.LearningStandards, jsonSerializerOptions);
            }
            if (edFiLearningObjective.NomenclatureOption.IsSet)
                if (edFiLearningObjective.NomenclatureOption.Value != null)
                    writer.WriteString("nomenclature", edFiLearningObjective.Nomenclature);
                else
                    writer.WriteNull("nomenclature");

            if (edFiLearningObjective.SuccessCriteriaOption.IsSet)
                if (edFiLearningObjective.SuccessCriteriaOption.Value != null)
                    writer.WriteString("successCriteria", edFiLearningObjective.SuccessCriteria);
                else
                    writer.WriteNull("successCriteria");

            if (edFiLearningObjective.EtagOption.IsSet)
                writer.WriteString("_etag", edFiLearningObjective.Etag);

            if (edFiLearningObjective.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiLearningObjective.Ext, jsonSerializerOptions);
            }
        }
    }
}
