/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v62.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v62.Models.All
{
    /// <summary>
    /// EdFiLearningObjective
    /// </summary>
    [DataContract(Name = "edFi_learningObjective")]
    public partial class EdFiLearningObjective : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningObjective" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiLearningObjective() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningObjective" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="academicSubjects">An unordered collection of learningObjectiveAcademicSubjects. The description of the content or subject area of an assessment. (required).</param>
        /// <param name="learningObjectiveId">The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A). (required).</param>
        /// <param name="varNamespace">Namespace for the learning objective. (required).</param>
        /// <param name="parentLearningObjectiveReference">parentLearningObjectiveReference.</param>
        /// <param name="contentStandard">contentStandard.</param>
        /// <param name="description">The description of the learning objective..</param>
        /// <param name="gradeLevels">An unordered collection of learningObjectiveGradeLevels. The grade level for which the learning objective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level..</param>
        /// <param name="learningStandards">An unordered collection of learningObjectiveLearningStandards. Learning standard(s) included in this objective..</param>
        /// <param name="nomenclature">Reflects the specific nomenclature used for the learning objective..</param>
        /// <param name="objective">The designated title of the learning objective. (required).</param>
        /// <param name="successCriteria">One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the learning objective..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="ext">Extensions to the LearningObjective entity..</param>
        public EdFiLearningObjective(string id = default, List<EdFiLearningObjectiveAcademicSubject> academicSubjects = default, string learningObjectiveId = default, string varNamespace = default, EdFiLearningObjectiveReference parentLearningObjectiveReference = default, EdFiLearningObjectiveContentStandard contentStandard = default, string description = default, List<EdFiLearningObjectiveGradeLevel> gradeLevels = default, List<EdFiLearningObjectiveLearningStandard> learningStandards = default, string nomenclature = default, string objective = default, string successCriteria = default, string etag = default, Object ext = default)
        {
            // to ensure "academicSubjects" is required (not null)
            if (academicSubjects == null)
            {
                throw new ArgumentNullException("academicSubjects is a required property for EdFiLearningObjective and cannot be null");
            }
            this.AcademicSubjects = academicSubjects;
            // to ensure "learningObjectiveId" is required (not null)
            if (learningObjectiveId == null)
            {
                throw new ArgumentNullException("learningObjectiveId is a required property for EdFiLearningObjective and cannot be null");
            }
            this.LearningObjectiveId = learningObjectiveId;
            // to ensure "varNamespace" is required (not null)
            if (varNamespace == null)
            {
                throw new ArgumentNullException("varNamespace is a required property for EdFiLearningObjective and cannot be null");
            }
            this.Namespace = varNamespace;
            // to ensure "objective" is required (not null)
            if (objective == null)
            {
                throw new ArgumentNullException("objective is a required property for EdFiLearningObjective and cannot be null");
            }
            this.Objective = objective;
            this.Id = id;
            this.ParentLearningObjectiveReference = parentLearningObjectiveReference;
            this.ContentStandard = contentStandard;
            this.Description = description;
            this.GradeLevels = gradeLevels;
            this.LearningStandards = learningStandards;
            this.Nomenclature = nomenclature;
            this.SuccessCriteria = successCriteria;
            this.Etag = etag;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// An unordered collection of learningObjectiveAcademicSubjects. The description of the content or subject area of an assessment.
        /// </summary>
        /// <value>An unordered collection of learningObjectiveAcademicSubjects. The description of the content or subject area of an assessment.</value>
        [DataMember(Name = "academicSubjects", IsRequired = true, EmitDefaultValue = true)]
        public List<EdFiLearningObjectiveAcademicSubject> AcademicSubjects { get; set; }

        /// <summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        /// </summary>
        /// <value>The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).</value>
        [DataMember(Name = "learningObjectiveId", IsRequired = true, EmitDefaultValue = true)]
        public string LearningObjectiveId { get; set; }

        /// <summary>
        /// Namespace for the learning objective.
        /// </summary>
        /// <value>Namespace for the learning objective.</value>
        [DataMember(Name = "namespace", IsRequired = true, EmitDefaultValue = true)]
        public string Namespace { get; set; }

        /// <summary>
        /// Gets or Sets ParentLearningObjectiveReference
        /// </summary>
        [DataMember(Name = "parentLearningObjectiveReference", EmitDefaultValue = false)]
        public EdFiLearningObjectiveReference ParentLearningObjectiveReference { get; set; }

        /// <summary>
        /// Gets or Sets ContentStandard
        /// </summary>
        [DataMember(Name = "contentStandard", EmitDefaultValue = false)]
        public EdFiLearningObjectiveContentStandard ContentStandard { get; set; }

        /// <summary>
        /// The description of the learning objective.
        /// </summary>
        /// <value>The description of the learning objective.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// An unordered collection of learningObjectiveGradeLevels. The grade level for which the learning objective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.
        /// </summary>
        /// <value>An unordered collection of learningObjectiveGradeLevels. The grade level for which the learning objective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.</value>
        [DataMember(Name = "gradeLevels", EmitDefaultValue = false)]
        public List<EdFiLearningObjectiveGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// An unordered collection of learningObjectiveLearningStandards. Learning standard(s) included in this objective.
        /// </summary>
        /// <value>An unordered collection of learningObjectiveLearningStandards. Learning standard(s) included in this objective.</value>
        [DataMember(Name = "learningStandards", EmitDefaultValue = false)]
        public List<EdFiLearningObjectiveLearningStandard> LearningStandards { get; set; }

        /// <summary>
        /// Reflects the specific nomenclature used for the learning objective.
        /// </summary>
        /// <value>Reflects the specific nomenclature used for the learning objective.</value>
        [DataMember(Name = "nomenclature", EmitDefaultValue = true)]
        public string Nomenclature { get; set; }

        /// <summary>
        /// The designated title of the learning objective.
        /// </summary>
        /// <value>The designated title of the learning objective.</value>
        [DataMember(Name = "objective", IsRequired = true, EmitDefaultValue = true)]
        public string Objective { get; set; }

        /// <summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the learning objective.
        /// </summary>
        /// <value>One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the learning objective.</value>
        [DataMember(Name = "successCriteria", EmitDefaultValue = true)]
        public string SuccessCriteria { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Extensions to the LearningObjective entity.
        /// </summary>
        /// <value>Extensions to the LearningObjective entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiLearningObjective {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  LearningObjectiveId: ").Append(LearningObjectiveId).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  ParentLearningObjectiveReference: ").Append(ParentLearningObjectiveReference).Append("\n");
            sb.Append("  ContentStandard: ").Append(ContentStandard).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  LearningStandards: ").Append(LearningStandards).Append("\n");
            sb.Append("  Nomenclature: ").Append(Nomenclature).Append("\n");
            sb.Append("  Objective: ").Append(Objective).Append("\n");
            sb.Append("  SuccessCriteria: ").Append(SuccessCriteria).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LearningObjectiveId (string) maxLength
            if (this.LearningObjectiveId != null && this.LearningObjectiveId.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LearningObjectiveId, length must be less than 60.", new [] { "LearningObjectiveId" });
            }

            // Namespace (string) maxLength
            if (this.Namespace != null && this.Namespace.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Namespace, length must be less than 255.", new [] { "Namespace" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Nomenclature (string) maxLength
            if (this.Nomenclature != null && this.Nomenclature.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Nomenclature, length must be less than 100.", new [] { "Nomenclature" });
            }

            // Objective (string) maxLength
            if (this.Objective != null && this.Objective.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Objective, length must be less than 60.", new [] { "Objective" });
            }

            // SuccessCriteria (string) maxLength
            if (this.SuccessCriteria != null && this.SuccessCriteria.Length > 150)
            {
                yield return new ValidationResult("Invalid value for SuccessCriteria, length must be less than 150.", new [] { "SuccessCriteria" });
            }

            yield break;
        }
    }

}
