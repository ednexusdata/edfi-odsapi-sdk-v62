/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.OdsApi.Sdk.v62.Client.OpenAPIDateConverter;

namespace EdFi.OdsApi.Sdk.v62.Models.All
{
    /// <summary>
    /// EdFiCourseTranscript
    /// </summary>
    [DataContract(Name = "edFi_courseTranscript")]
    public partial class EdFiCourseTranscript : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCourseTranscript" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiCourseTranscript() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCourseTranscript" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="courseAttemptResultDescriptor">The result from the student&#39;s attempt to take the course. (required).</param>
        /// <param name="courseReference">courseReference (required).</param>
        /// <param name="externalEducationOrganizationReference">externalEducationOrganizationReference.</param>
        /// <param name="studentAcademicRecordReference">studentAcademicRecordReference (required).</param>
        /// <param name="academicSubjects">An unordered collection of courseTranscriptAcademicSubjects. The subject area for the course transcript credits awarded in the course transcript..</param>
        /// <param name="alternativeCourseCode">The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code..</param>
        /// <param name="alternativeCourseIdentificationCodes">An unordered collection of courseTranscriptAlternativeCourseIdentificationCodes. The code that identifies the course, course offering, the code from an external educational organization, or other alternate course code..</param>
        /// <param name="alternativeCourseTitle">The descriptive name given to a course of study offered in the school, if different from the CourseTitle..</param>
        /// <param name="assigningOrganizationIdentificationCode">The organization code or name assigning the course identification code..</param>
        /// <param name="attemptedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units..</param>
        /// <param name="attemptedCredits">The value of credits or units of value awarded for the completion of a course..</param>
        /// <param name="attemptedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course..</param>
        /// <param name="courseCatalogURL">The URL for the course catalog that defines the course identification code..</param>
        /// <param name="courseRepeatCodeDescriptor">Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average..</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts)..</param>
        /// <param name="creditCategories">An unordered collection of courseTranscriptCreditCategories. A categorization for the course transcript credits awarded in the course transcript..</param>
        /// <param name="earnedAdditionalCredits">An unordered collection of courseTranscriptEarnedAdditionalCredits. The number of additional credits a student attempted and could earn for successfully completing a given course..</param>
        /// <param name="earnedCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units..</param>
        /// <param name="earnedCredits">The value of credits or units of value awarded for the completion of a course. (required).</param>
        /// <param name="earnedCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course..</param>
        /// <param name="externalEducationOrganizationNameOfInstitution">Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available..</param>
        /// <param name="finalLetterGradeEarned">The final indicator of student performance in a class as submitted by the instructor..</param>
        /// <param name="finalNumericGradeEarned">The final indicator of student performance in a class as submitted by the instructor..</param>
        /// <param name="methodCreditEarnedDescriptor">The method the credits were earned..</param>
        /// <param name="partialCourseTranscriptAwards">An unordered collection of courseTranscriptPartialCourseTranscriptAwards. A collection of partial credits and/or grades a student earned against the course over the session, used when awards of credit are incremental..</param>
        /// <param name="whenTakenGradeLevelDescriptor">Student&#39;s grade level at time of course..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        /// <param name="ext">Extensions to the CourseTranscript entity..</param>
        public EdFiCourseTranscript(string id = default, string courseAttemptResultDescriptor = default, EdFiCourseReference courseReference = default, EdFiEducationOrganizationReference externalEducationOrganizationReference = default, EdFiStudentAcademicRecordReference studentAcademicRecordReference = default, List<EdFiCourseTranscriptAcademicSubject> academicSubjects = default, string alternativeCourseCode = default, List<EdFiCourseTranscriptAlternativeCourseIdentificationCode> alternativeCourseIdentificationCodes = default, string alternativeCourseTitle = default, string assigningOrganizationIdentificationCode = default, double? attemptedCreditConversion = default, double? attemptedCredits = default, string attemptedCreditTypeDescriptor = default, string courseCatalogURL = default, string courseRepeatCodeDescriptor = default, string courseTitle = default, List<EdFiCourseTranscriptCreditCategory> creditCategories = default, List<EdFiCourseTranscriptEarnedAdditionalCredits> earnedAdditionalCredits = default, double? earnedCreditConversion = default, double earnedCredits = default, string earnedCreditTypeDescriptor = default, string externalEducationOrganizationNameOfInstitution = default, string finalLetterGradeEarned = default, double? finalNumericGradeEarned = default, string methodCreditEarnedDescriptor = default, List<EdFiCourseTranscriptPartialCourseTranscriptAwards> partialCourseTranscriptAwards = default, string whenTakenGradeLevelDescriptor = default, string etag = default, Object ext = default)
        {
            // to ensure "courseAttemptResultDescriptor" is required (not null)
            if (courseAttemptResultDescriptor == null)
            {
                throw new ArgumentNullException("courseAttemptResultDescriptor is a required property for EdFiCourseTranscript and cannot be null");
            }
            this.CourseAttemptResultDescriptor = courseAttemptResultDescriptor;
            // to ensure "courseReference" is required (not null)
            if (courseReference == null)
            {
                throw new ArgumentNullException("courseReference is a required property for EdFiCourseTranscript and cannot be null");
            }
            this.CourseReference = courseReference;
            // to ensure "studentAcademicRecordReference" is required (not null)
            if (studentAcademicRecordReference == null)
            {
                throw new ArgumentNullException("studentAcademicRecordReference is a required property for EdFiCourseTranscript and cannot be null");
            }
            this.StudentAcademicRecordReference = studentAcademicRecordReference;
            this.EarnedCredits = earnedCredits;
            this.Id = id;
            this.ExternalEducationOrganizationReference = externalEducationOrganizationReference;
            this.AcademicSubjects = academicSubjects;
            this.AlternativeCourseCode = alternativeCourseCode;
            this.AlternativeCourseIdentificationCodes = alternativeCourseIdentificationCodes;
            this.AlternativeCourseTitle = alternativeCourseTitle;
            this.AssigningOrganizationIdentificationCode = assigningOrganizationIdentificationCode;
            this.AttemptedCreditConversion = attemptedCreditConversion;
            this.AttemptedCredits = attemptedCredits;
            this.AttemptedCreditTypeDescriptor = attemptedCreditTypeDescriptor;
            this.CourseCatalogURL = courseCatalogURL;
            this.CourseRepeatCodeDescriptor = courseRepeatCodeDescriptor;
            this.CourseTitle = courseTitle;
            this.CreditCategories = creditCategories;
            this.EarnedAdditionalCredits = earnedAdditionalCredits;
            this.EarnedCreditConversion = earnedCreditConversion;
            this.EarnedCreditTypeDescriptor = earnedCreditTypeDescriptor;
            this.ExternalEducationOrganizationNameOfInstitution = externalEducationOrganizationNameOfInstitution;
            this.FinalLetterGradeEarned = finalLetterGradeEarned;
            this.FinalNumericGradeEarned = finalNumericGradeEarned;
            this.MethodCreditEarnedDescriptor = methodCreditEarnedDescriptor;
            this.PartialCourseTranscriptAwards = partialCourseTranscriptAwards;
            this.WhenTakenGradeLevelDescriptor = whenTakenGradeLevelDescriptor;
            this.Etag = etag;
            this.Ext = ext;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The result from the student&#39;s attempt to take the course.
        /// </summary>
        /// <value>The result from the student&#39;s attempt to take the course.</value>
        [DataMember(Name = "courseAttemptResultDescriptor", IsRequired = true, EmitDefaultValue = true)]
        public string CourseAttemptResultDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets CourseReference
        /// </summary>
        [DataMember(Name = "courseReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiCourseReference CourseReference { get; set; }

        /// <summary>
        /// Gets or Sets ExternalEducationOrganizationReference
        /// </summary>
        [DataMember(Name = "externalEducationOrganizationReference", EmitDefaultValue = false)]
        public EdFiEducationOrganizationReference ExternalEducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentAcademicRecordReference
        /// </summary>
        [DataMember(Name = "studentAcademicRecordReference", IsRequired = true, EmitDefaultValue = true)]
        public EdFiStudentAcademicRecordReference StudentAcademicRecordReference { get; set; }

        /// <summary>
        /// An unordered collection of courseTranscriptAcademicSubjects. The subject area for the course transcript credits awarded in the course transcript.
        /// </summary>
        /// <value>An unordered collection of courseTranscriptAcademicSubjects. The subject area for the course transcript credits awarded in the course transcript.</value>
        [DataMember(Name = "academicSubjects", EmitDefaultValue = false)]
        public List<EdFiCourseTranscriptAcademicSubject> AcademicSubjects { get; set; }

        /// <summary>
        /// The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.
        /// </summary>
        /// <value>The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.</value>
        [DataMember(Name = "alternativeCourseCode", EmitDefaultValue = true)]
        public string AlternativeCourseCode { get; set; }

        /// <summary>
        /// An unordered collection of courseTranscriptAlternativeCourseIdentificationCodes. The code that identifies the course, course offering, the code from an external educational organization, or other alternate course code.
        /// </summary>
        /// <value>An unordered collection of courseTranscriptAlternativeCourseIdentificationCodes. The code that identifies the course, course offering, the code from an external educational organization, or other alternate course code.</value>
        [DataMember(Name = "alternativeCourseIdentificationCodes", EmitDefaultValue = false)]
        public List<EdFiCourseTranscriptAlternativeCourseIdentificationCode> AlternativeCourseIdentificationCodes { get; set; }

        /// <summary>
        /// The descriptive name given to a course of study offered in the school, if different from the CourseTitle.
        /// </summary>
        /// <value>The descriptive name given to a course of study offered in the school, if different from the CourseTitle.</value>
        [DataMember(Name = "alternativeCourseTitle", EmitDefaultValue = true)]
        public string AlternativeCourseTitle { get; set; }

        /// <summary>
        /// The organization code or name assigning the course identification code.
        /// </summary>
        /// <value>The organization code or name assigning the course identification code.</value>
        [DataMember(Name = "assigningOrganizationIdentificationCode", EmitDefaultValue = true)]
        public string AssigningOrganizationIdentificationCode { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [DataMember(Name = "attemptedCreditConversion", EmitDefaultValue = true)]
        public double? AttemptedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name = "attemptedCredits", EmitDefaultValue = true)]
        public double? AttemptedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name = "attemptedCreditTypeDescriptor", EmitDefaultValue = true)]
        public string AttemptedCreditTypeDescriptor { get; set; }

        /// <summary>
        /// The URL for the course catalog that defines the course identification code.
        /// </summary>
        /// <value>The URL for the course catalog that defines the course identification code.</value>
        [DataMember(Name = "courseCatalogURL", EmitDefaultValue = true)]
        public string CourseCatalogURL { get; set; }

        /// <summary>
        /// Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average.
        /// </summary>
        /// <value>Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average.</value>
        [DataMember(Name = "courseRepeatCodeDescriptor", EmitDefaultValue = true)]
        public string CourseRepeatCodeDescriptor { get; set; }

        /// <summary>
        /// The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).
        /// </summary>
        /// <value>The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).</value>
        [DataMember(Name = "courseTitle", EmitDefaultValue = true)]
        public string CourseTitle { get; set; }

        /// <summary>
        /// An unordered collection of courseTranscriptCreditCategories. A categorization for the course transcript credits awarded in the course transcript.
        /// </summary>
        /// <value>An unordered collection of courseTranscriptCreditCategories. A categorization for the course transcript credits awarded in the course transcript.</value>
        [DataMember(Name = "creditCategories", EmitDefaultValue = false)]
        public List<EdFiCourseTranscriptCreditCategory> CreditCategories { get; set; }

        /// <summary>
        /// An unordered collection of courseTranscriptEarnedAdditionalCredits. The number of additional credits a student attempted and could earn for successfully completing a given course.
        /// </summary>
        /// <value>An unordered collection of courseTranscriptEarnedAdditionalCredits. The number of additional credits a student attempted and could earn for successfully completing a given course.</value>
        [DataMember(Name = "earnedAdditionalCredits", EmitDefaultValue = false)]
        public List<EdFiCourseTranscriptEarnedAdditionalCredits> EarnedAdditionalCredits { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [DataMember(Name = "earnedCreditConversion", EmitDefaultValue = true)]
        public double? EarnedCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name = "earnedCredits", IsRequired = true, EmitDefaultValue = true)]
        public double EarnedCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name = "earnedCreditTypeDescriptor", EmitDefaultValue = true)]
        public string EarnedCreditTypeDescriptor { get; set; }

        /// <summary>
        /// Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available.
        /// </summary>
        /// <value>Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available.</value>
        [DataMember(Name = "externalEducationOrganizationNameOfInstitution", EmitDefaultValue = true)]
        public string ExternalEducationOrganizationNameOfInstitution { get; set; }

        /// <summary>
        /// The final indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>The final indicator of student performance in a class as submitted by the instructor.</value>
        [DataMember(Name = "finalLetterGradeEarned", EmitDefaultValue = true)]
        public string FinalLetterGradeEarned { get; set; }

        /// <summary>
        /// The final indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>The final indicator of student performance in a class as submitted by the instructor.</value>
        [DataMember(Name = "finalNumericGradeEarned", EmitDefaultValue = true)]
        public double? FinalNumericGradeEarned { get; set; }

        /// <summary>
        /// The method the credits were earned.
        /// </summary>
        /// <value>The method the credits were earned.</value>
        [DataMember(Name = "methodCreditEarnedDescriptor", EmitDefaultValue = true)]
        public string MethodCreditEarnedDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of courseTranscriptPartialCourseTranscriptAwards. A collection of partial credits and/or grades a student earned against the course over the session, used when awards of credit are incremental.
        /// </summary>
        /// <value>An unordered collection of courseTranscriptPartialCourseTranscriptAwards. A collection of partial credits and/or grades a student earned against the course over the session, used when awards of credit are incremental.</value>
        [DataMember(Name = "partialCourseTranscriptAwards", EmitDefaultValue = false)]
        public List<EdFiCourseTranscriptPartialCourseTranscriptAwards> PartialCourseTranscriptAwards { get; set; }

        /// <summary>
        /// Student&#39;s grade level at time of course.
        /// </summary>
        /// <value>Student&#39;s grade level at time of course.</value>
        [DataMember(Name = "whenTakenGradeLevelDescriptor", EmitDefaultValue = true)]
        public string WhenTakenGradeLevelDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name = "_etag", EmitDefaultValue = false)]
        public string Etag { get; set; }

        /// <summary>
        /// Extensions to the CourseTranscript entity.
        /// </summary>
        /// <value>Extensions to the CourseTranscript entity.</value>
        [DataMember(Name = "_ext", EmitDefaultValue = false)]
        public Object Ext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiCourseTranscript {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CourseAttemptResultDescriptor: ").Append(CourseAttemptResultDescriptor).Append("\n");
            sb.Append("  CourseReference: ").Append(CourseReference).Append("\n");
            sb.Append("  ExternalEducationOrganizationReference: ").Append(ExternalEducationOrganizationReference).Append("\n");
            sb.Append("  StudentAcademicRecordReference: ").Append(StudentAcademicRecordReference).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  AlternativeCourseCode: ").Append(AlternativeCourseCode).Append("\n");
            sb.Append("  AlternativeCourseIdentificationCodes: ").Append(AlternativeCourseIdentificationCodes).Append("\n");
            sb.Append("  AlternativeCourseTitle: ").Append(AlternativeCourseTitle).Append("\n");
            sb.Append("  AssigningOrganizationIdentificationCode: ").Append(AssigningOrganizationIdentificationCode).Append("\n");
            sb.Append("  AttemptedCreditConversion: ").Append(AttemptedCreditConversion).Append("\n");
            sb.Append("  AttemptedCredits: ").Append(AttemptedCredits).Append("\n");
            sb.Append("  AttemptedCreditTypeDescriptor: ").Append(AttemptedCreditTypeDescriptor).Append("\n");
            sb.Append("  CourseCatalogURL: ").Append(CourseCatalogURL).Append("\n");
            sb.Append("  CourseRepeatCodeDescriptor: ").Append(CourseRepeatCodeDescriptor).Append("\n");
            sb.Append("  CourseTitle: ").Append(CourseTitle).Append("\n");
            sb.Append("  CreditCategories: ").Append(CreditCategories).Append("\n");
            sb.Append("  EarnedAdditionalCredits: ").Append(EarnedAdditionalCredits).Append("\n");
            sb.Append("  EarnedCreditConversion: ").Append(EarnedCreditConversion).Append("\n");
            sb.Append("  EarnedCredits: ").Append(EarnedCredits).Append("\n");
            sb.Append("  EarnedCreditTypeDescriptor: ").Append(EarnedCreditTypeDescriptor).Append("\n");
            sb.Append("  ExternalEducationOrganizationNameOfInstitution: ").Append(ExternalEducationOrganizationNameOfInstitution).Append("\n");
            sb.Append("  FinalLetterGradeEarned: ").Append(FinalLetterGradeEarned).Append("\n");
            sb.Append("  FinalNumericGradeEarned: ").Append(FinalNumericGradeEarned).Append("\n");
            sb.Append("  MethodCreditEarnedDescriptor: ").Append(MethodCreditEarnedDescriptor).Append("\n");
            sb.Append("  PartialCourseTranscriptAwards: ").Append(PartialCourseTranscriptAwards).Append("\n");
            sb.Append("  WhenTakenGradeLevelDescriptor: ").Append(WhenTakenGradeLevelDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CourseAttemptResultDescriptor (string) maxLength
            if (this.CourseAttemptResultDescriptor != null && this.CourseAttemptResultDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CourseAttemptResultDescriptor, length must be less than 306.", new [] { "CourseAttemptResultDescriptor" });
            }

            // AlternativeCourseCode (string) maxLength
            if (this.AlternativeCourseCode != null && this.AlternativeCourseCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AlternativeCourseCode, length must be less than 60.", new [] { "AlternativeCourseCode" });
            }

            // AlternativeCourseTitle (string) maxLength
            if (this.AlternativeCourseTitle != null && this.AlternativeCourseTitle.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AlternativeCourseTitle, length must be less than 60.", new [] { "AlternativeCourseTitle" });
            }

            // AssigningOrganizationIdentificationCode (string) maxLength
            if (this.AssigningOrganizationIdentificationCode != null && this.AssigningOrganizationIdentificationCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for AssigningOrganizationIdentificationCode, length must be less than 60.", new [] { "AssigningOrganizationIdentificationCode" });
            }

            // AttemptedCreditTypeDescriptor (string) maxLength
            if (this.AttemptedCreditTypeDescriptor != null && this.AttemptedCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for AttemptedCreditTypeDescriptor, length must be less than 306.", new [] { "AttemptedCreditTypeDescriptor" });
            }

            // CourseCatalogURL (string) maxLength
            if (this.CourseCatalogURL != null && this.CourseCatalogURL.Length > 255)
            {
                yield return new ValidationResult("Invalid value for CourseCatalogURL, length must be less than 255.", new [] { "CourseCatalogURL" });
            }

            // CourseRepeatCodeDescriptor (string) maxLength
            if (this.CourseRepeatCodeDescriptor != null && this.CourseRepeatCodeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CourseRepeatCodeDescriptor, length must be less than 306.", new [] { "CourseRepeatCodeDescriptor" });
            }

            // CourseTitle (string) maxLength
            if (this.CourseTitle != null && this.CourseTitle.Length > 60)
            {
                yield return new ValidationResult("Invalid value for CourseTitle, length must be less than 60.", new [] { "CourseTitle" });
            }

            // EarnedCreditTypeDescriptor (string) maxLength
            if (this.EarnedCreditTypeDescriptor != null && this.EarnedCreditTypeDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for EarnedCreditTypeDescriptor, length must be less than 306.", new [] { "EarnedCreditTypeDescriptor" });
            }

            // ExternalEducationOrganizationNameOfInstitution (string) maxLength
            if (this.ExternalEducationOrganizationNameOfInstitution != null && this.ExternalEducationOrganizationNameOfInstitution.Length > 75)
            {
                yield return new ValidationResult("Invalid value for ExternalEducationOrganizationNameOfInstitution, length must be less than 75.", new [] { "ExternalEducationOrganizationNameOfInstitution" });
            }

            // FinalLetterGradeEarned (string) maxLength
            if (this.FinalLetterGradeEarned != null && this.FinalLetterGradeEarned.Length > 20)
            {
                yield return new ValidationResult("Invalid value for FinalLetterGradeEarned, length must be less than 20.", new [] { "FinalLetterGradeEarned" });
            }

            // MethodCreditEarnedDescriptor (string) maxLength
            if (this.MethodCreditEarnedDescriptor != null && this.MethodCreditEarnedDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for MethodCreditEarnedDescriptor, length must be less than 306.", new [] { "MethodCreditEarnedDescriptor" });
            }

            // WhenTakenGradeLevelDescriptor (string) maxLength
            if (this.WhenTakenGradeLevelDescriptor != null && this.WhenTakenGradeLevelDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for WhenTakenGradeLevelDescriptor, length must be less than 306.", new [] { "WhenTakenGradeLevelDescriptor" });
            }

            yield break;
        }
    }

}
