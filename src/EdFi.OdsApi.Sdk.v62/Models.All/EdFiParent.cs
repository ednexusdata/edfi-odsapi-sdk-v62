// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v62.Client;

namespace EdFi.OdsApi.Sdk.v62.Models.All
{
    /// <summary>
    /// EdFiParent
    /// </summary>
    public partial class EdFiParent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiParent" /> class.
        /// </summary>
        /// <param name="parentUniqueId">A unique alphanumeric code assigned to a parent.</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</param>
        /// <param name="lastSurname">The name borne in common by members of a family.</param>
        /// <param name="id">id</param>
        /// <param name="personReference">personReference</param>
        /// <param name="addresses">An unordered collection of parentAddresses. Parent&#39;s address, if different from the student address.</param>
        /// <param name="electronicMails">An unordered collection of parentElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</param>
        /// <param name="highestCompletedLevelOfEducationDescriptor">The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).</param>
        /// <param name="internationalAddresses">An unordered collection of parentInternationalAddresses. The set of elements that describes an international address.</param>
        /// <param name="languages">An unordered collection of parentLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface.</param>
        /// <param name="maidenName">The individual&#39;s maiden name.</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony.</param>
        /// <param name="otherNames">An unordered collection of parentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.</param>
        /// <param name="personalIdentificationDocuments">An unordered collection of parentPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the individual.</param>
        /// <param name="sexDescriptor">A person&#39;s gender.</param>
        /// <param name="telephones">An unordered collection of parentTelephones. The 10-digit telephone number, including the area code, for the person.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource.</param>
        /// <param name="ext">Extensions to the Parent entity.</param>
        [JsonConstructor]
        public EdFiParent(string parentUniqueId, string firstName, string lastSurname, Option<string?> id = default, Option<EdFiPersonReference?> personReference = default, Option<List<EdFiParentAddress>?> addresses = default, Option<List<EdFiParentElectronicMail>?> electronicMails = default, Option<string?> generationCodeSuffix = default, Option<string?> highestCompletedLevelOfEducationDescriptor = default, Option<List<EdFiParentInternationalAddress>?> internationalAddresses = default, Option<List<EdFiParentLanguage>?> languages = default, Option<string?> loginId = default, Option<string?> maidenName = default, Option<string?> middleName = default, Option<List<EdFiParentOtherName>?> otherNames = default, Option<List<EdFiParentPersonalIdentificationDocument>?> personalIdentificationDocuments = default, Option<string?> personalTitlePrefix = default, Option<string?> sexDescriptor = default, Option<List<EdFiParentTelephone>?> telephones = default, Option<string?> etag = default, Option<Object?> ext = default)
        {
            ParentUniqueId = parentUniqueId;
            FirstName = firstName;
            LastSurname = lastSurname;
            IdOption = id;
            PersonReferenceOption = personReference;
            AddressesOption = addresses;
            ElectronicMailsOption = electronicMails;
            GenerationCodeSuffixOption = generationCodeSuffix;
            HighestCompletedLevelOfEducationDescriptorOption = highestCompletedLevelOfEducationDescriptor;
            InternationalAddressesOption = internationalAddresses;
            LanguagesOption = languages;
            LoginIdOption = loginId;
            MaidenNameOption = maidenName;
            MiddleNameOption = middleName;
            OtherNamesOption = otherNames;
            PersonalIdentificationDocumentsOption = personalIdentificationDocuments;
            PersonalTitlePrefixOption = personalTitlePrefix;
            SexDescriptorOption = sexDescriptor;
            TelephonesOption = telephones;
            EtagOption = etag;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A unique alphanumeric code assigned to a parent.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a parent.</value>
        [JsonPropertyName("parentUniqueId")]
        public string ParentUniqueId { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [JsonPropertyName("lastSurname")]
        public string LastSurname { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PersonReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiPersonReference?> PersonReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets PersonReference
        /// </summary>
        [JsonPropertyName("personReference")]
        public EdFiPersonReference? PersonReference { get { return this.PersonReferenceOption; } set { this.PersonReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Addresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiParentAddress>?> AddressesOption { get; private set; }

        /// <summary>
        /// An unordered collection of parentAddresses. Parent&#39;s address, if different from the student address.
        /// </summary>
        /// <value>An unordered collection of parentAddresses. Parent&#39;s address, if different from the student address.</value>
        [JsonPropertyName("addresses")]
        public List<EdFiParentAddress>? Addresses { get { return this.AddressesOption; } set { this.AddressesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ElectronicMails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiParentElectronicMail>?> ElectronicMailsOption { get; private set; }

        /// <summary>
        /// An unordered collection of parentElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
        /// </summary>
        /// <value>An unordered collection of parentElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.</value>
        [JsonPropertyName("electronicMails")]
        public List<EdFiParentElectronicMail>? ElectronicMails { get { return this.ElectronicMailsOption; } set { this.ElectronicMailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of GenerationCodeSuffix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GenerationCodeSuffixOption { get; private set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [JsonPropertyName("generationCodeSuffix")]
        public string? GenerationCodeSuffix { get { return this.GenerationCodeSuffixOption; } set { this.GenerationCodeSuffixOption = new(value); } }

        /// <summary>
        /// Used to track the state of HighestCompletedLevelOfEducationDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HighestCompletedLevelOfEducationDescriptorOption { get; private set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        /// <value>The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).</value>
        [JsonPropertyName("highestCompletedLevelOfEducationDescriptor")]
        public string? HighestCompletedLevelOfEducationDescriptor { get { return this.HighestCompletedLevelOfEducationDescriptorOption; } set { this.HighestCompletedLevelOfEducationDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of InternationalAddresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiParentInternationalAddress>?> InternationalAddressesOption { get; private set; }

        /// <summary>
        /// An unordered collection of parentInternationalAddresses. The set of elements that describes an international address.
        /// </summary>
        /// <value>An unordered collection of parentInternationalAddresses. The set of elements that describes an international address.</value>
        [JsonPropertyName("internationalAddresses")]
        public List<EdFiParentInternationalAddress>? InternationalAddresses { get { return this.InternationalAddressesOption; } set { this.InternationalAddressesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Languages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiParentLanguage>?> LanguagesOption { get; private set; }

        /// <summary>
        /// An unordered collection of parentLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.
        /// </summary>
        /// <value>An unordered collection of parentLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.</value>
        [JsonPropertyName("languages")]
        public List<EdFiParentLanguage>? Languages { get { return this.LanguagesOption; } set { this.LanguagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of LoginId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LoginIdOption { get; private set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        /// <value>The login ID for the user; used for security access control interface.</value>
        [JsonPropertyName("loginId")]
        public string? LoginId { get { return this.LoginIdOption; } set { this.LoginIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaidenName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MaidenNameOption { get; private set; }

        /// <summary>
        /// The individual&#39;s maiden name.
        /// </summary>
        /// <value>The individual&#39;s maiden name.</value>
        [JsonPropertyName("maidenName")]
        public string? MaidenName { get { return this.MaidenNameOption; } set { this.MaidenNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of MiddleName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MiddleNameOption { get; private set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [JsonPropertyName("middleName")]
        public string? MiddleName { get { return this.MiddleNameOption; } set { this.MiddleNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of OtherNames
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiParentOtherName>?> OtherNamesOption { get; private set; }

        /// <summary>
        /// An unordered collection of parentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.
        /// </summary>
        /// <value>An unordered collection of parentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.</value>
        [JsonPropertyName("otherNames")]
        public List<EdFiParentOtherName>? OtherNames { get { return this.OtherNamesOption; } set { this.OtherNamesOption = new(value); } }

        /// <summary>
        /// Used to track the state of PersonalIdentificationDocuments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiParentPersonalIdentificationDocument>?> PersonalIdentificationDocumentsOption { get; private set; }

        /// <summary>
        /// An unordered collection of parentPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.
        /// </summary>
        /// <value>An unordered collection of parentPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</value>
        [JsonPropertyName("personalIdentificationDocuments")]
        public List<EdFiParentPersonalIdentificationDocument>? PersonalIdentificationDocuments { get { return this.PersonalIdentificationDocumentsOption; } set { this.PersonalIdentificationDocumentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PersonalTitlePrefix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PersonalTitlePrefixOption { get; private set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the individual.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the individual.</value>
        [JsonPropertyName("personalTitlePrefix")]
        public string? PersonalTitlePrefix { get { return this.PersonalTitlePrefixOption; } set { this.PersonalTitlePrefixOption = new(value); } }

        /// <summary>
        /// Used to track the state of SexDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SexDescriptorOption { get; private set; }

        /// <summary>
        /// A person&#39;s gender.
        /// </summary>
        /// <value>A person&#39;s gender.</value>
        [JsonPropertyName("sexDescriptor")]
        public string? SexDescriptor { get { return this.SexDescriptorOption; } set { this.SexDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Telephones
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiParentTelephone>?> TelephonesOption { get; private set; }

        /// <summary>
        /// An unordered collection of parentTelephones. The 10-digit telephone number, including the area code, for the person.
        /// </summary>
        /// <value>An unordered collection of parentTelephones. The 10-digit telephone number, including the area code, for the person.</value>
        [JsonPropertyName("telephones")]
        public List<EdFiParentTelephone>? Telephones { get { return this.TelephonesOption; } set { this.TelephonesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Etag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EtagOption { get; private set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [JsonPropertyName("_etag")]
        public string? Etag { get { return this.EtagOption; } set { this.EtagOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the Parent entity.
        /// </summary>
        /// <value>Extensions to the Parent entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiParent {\n");
            sb.Append("  ParentUniqueId: ").Append(ParentUniqueId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PersonReference: ").Append(PersonReference).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  ElectronicMails: ").Append(ElectronicMails).Append("\n");
            sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            sb.Append("  HighestCompletedLevelOfEducationDescriptor: ").Append(HighestCompletedLevelOfEducationDescriptor).Append("\n");
            sb.Append("  InternationalAddresses: ").Append(InternationalAddresses).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  MaidenName: ").Append(MaidenName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  OtherNames: ").Append(OtherNames).Append("\n");
            sb.Append("  PersonalIdentificationDocuments: ").Append(PersonalIdentificationDocuments).Append("\n");
            sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ParentUniqueId (string) maxLength
            if (this.ParentUniqueId != null && this.ParentUniqueId.Length > 32)
            {
                yield return new ValidationResult("Invalid value for ParentUniqueId, length must be less than 32.", new [] { "ParentUniqueId" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for FirstName, length must be less than 75.", new [] { "FirstName" });
            }

            // LastSurname (string) maxLength
            if (this.LastSurname != null && this.LastSurname.Length > 75)
            {
                yield return new ValidationResult("Invalid value for LastSurname, length must be less than 75.", new [] { "LastSurname" });
            }

            // GenerationCodeSuffix (string) maxLength
            if (this.GenerationCodeSuffix != null && this.GenerationCodeSuffix.Length > 10)
            {
                yield return new ValidationResult("Invalid value for GenerationCodeSuffix, length must be less than 10.", new [] { "GenerationCodeSuffix" });
            }

            // HighestCompletedLevelOfEducationDescriptor (string) maxLength
            if (this.HighestCompletedLevelOfEducationDescriptor != null && this.HighestCompletedLevelOfEducationDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for HighestCompletedLevelOfEducationDescriptor, length must be less than 306.", new [] { "HighestCompletedLevelOfEducationDescriptor" });
            }

            // LoginId (string) maxLength
            if (this.LoginId != null && this.LoginId.Length > 60)
            {
                yield return new ValidationResult("Invalid value for LoginId, length must be less than 60.", new [] { "LoginId" });
            }

            // MaidenName (string) maxLength
            if (this.MaidenName != null && this.MaidenName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for MaidenName, length must be less than 75.", new [] { "MaidenName" });
            }

            // MiddleName (string) maxLength
            if (this.MiddleName != null && this.MiddleName.Length > 75)
            {
                yield return new ValidationResult("Invalid value for MiddleName, length must be less than 75.", new [] { "MiddleName" });
            }

            // PersonalTitlePrefix (string) maxLength
            if (this.PersonalTitlePrefix != null && this.PersonalTitlePrefix.Length > 30)
            {
                yield return new ValidationResult("Invalid value for PersonalTitlePrefix, length must be less than 30.", new [] { "PersonalTitlePrefix" });
            }

            // SexDescriptor (string) maxLength
            if (this.SexDescriptor != null && this.SexDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for SexDescriptor, length must be less than 306.", new [] { "SexDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiParent" />
    /// </summary>
    public class EdFiParentJsonConverter : JsonConverter<EdFiParent>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiParent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiParent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> parentUniqueId = default;
            Option<string?> firstName = default;
            Option<string?> lastSurname = default;
            Option<string?> id = default;
            Option<EdFiPersonReference?> personReference = default;
            Option<List<EdFiParentAddress>?> addresses = default;
            Option<List<EdFiParentElectronicMail>?> electronicMails = default;
            Option<string?> generationCodeSuffix = default;
            Option<string?> highestCompletedLevelOfEducationDescriptor = default;
            Option<List<EdFiParentInternationalAddress>?> internationalAddresses = default;
            Option<List<EdFiParentLanguage>?> languages = default;
            Option<string?> loginId = default;
            Option<string?> maidenName = default;
            Option<string?> middleName = default;
            Option<List<EdFiParentOtherName>?> otherNames = default;
            Option<List<EdFiParentPersonalIdentificationDocument>?> personalIdentificationDocuments = default;
            Option<string?> personalTitlePrefix = default;
            Option<string?> sexDescriptor = default;
            Option<List<EdFiParentTelephone>?> telephones = default;
            Option<string?> etag = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "parentUniqueId":
                            parentUniqueId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastSurname":
                            lastSurname = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "personReference":
                            personReference = new Option<EdFiPersonReference?>(JsonSerializer.Deserialize<EdFiPersonReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "addresses":
                            addresses = new Option<List<EdFiParentAddress>?>(JsonSerializer.Deserialize<List<EdFiParentAddress>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "electronicMails":
                            electronicMails = new Option<List<EdFiParentElectronicMail>?>(JsonSerializer.Deserialize<List<EdFiParentElectronicMail>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "generationCodeSuffix":
                            generationCodeSuffix = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "highestCompletedLevelOfEducationDescriptor":
                            highestCompletedLevelOfEducationDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "internationalAddresses":
                            internationalAddresses = new Option<List<EdFiParentInternationalAddress>?>(JsonSerializer.Deserialize<List<EdFiParentInternationalAddress>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "languages":
                            languages = new Option<List<EdFiParentLanguage>?>(JsonSerializer.Deserialize<List<EdFiParentLanguage>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "loginId":
                            loginId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "maidenName":
                            maidenName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "middleName":
                            middleName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "otherNames":
                            otherNames = new Option<List<EdFiParentOtherName>?>(JsonSerializer.Deserialize<List<EdFiParentOtherName>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "personalIdentificationDocuments":
                            personalIdentificationDocuments = new Option<List<EdFiParentPersonalIdentificationDocument>?>(JsonSerializer.Deserialize<List<EdFiParentPersonalIdentificationDocument>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "personalTitlePrefix":
                            personalTitlePrefix = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sexDescriptor":
                            sexDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "telephones":
                            telephones = new Option<List<EdFiParentTelephone>?>(JsonSerializer.Deserialize<List<EdFiParentTelephone>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_etag":
                            etag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!parentUniqueId.IsSet)
                throw new ArgumentException("Property is required for class EdFiParent.", nameof(parentUniqueId));

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class EdFiParent.", nameof(firstName));

            if (!lastSurname.IsSet)
                throw new ArgumentException("Property is required for class EdFiParent.", nameof(lastSurname));

            if (parentUniqueId.IsSet && parentUniqueId.Value == null)
                throw new ArgumentNullException(nameof(parentUniqueId), "Property is not nullable for class EdFiParent.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class EdFiParent.");

            if (lastSurname.IsSet && lastSurname.Value == null)
                throw new ArgumentNullException(nameof(lastSurname), "Property is not nullable for class EdFiParent.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EdFiParent.");

            if (personReference.IsSet && personReference.Value == null)
                throw new ArgumentNullException(nameof(personReference), "Property is not nullable for class EdFiParent.");

            if (addresses.IsSet && addresses.Value == null)
                throw new ArgumentNullException(nameof(addresses), "Property is not nullable for class EdFiParent.");

            if (electronicMails.IsSet && electronicMails.Value == null)
                throw new ArgumentNullException(nameof(electronicMails), "Property is not nullable for class EdFiParent.");

            if (internationalAddresses.IsSet && internationalAddresses.Value == null)
                throw new ArgumentNullException(nameof(internationalAddresses), "Property is not nullable for class EdFiParent.");

            if (languages.IsSet && languages.Value == null)
                throw new ArgumentNullException(nameof(languages), "Property is not nullable for class EdFiParent.");

            if (otherNames.IsSet && otherNames.Value == null)
                throw new ArgumentNullException(nameof(otherNames), "Property is not nullable for class EdFiParent.");

            if (personalIdentificationDocuments.IsSet && personalIdentificationDocuments.Value == null)
                throw new ArgumentNullException(nameof(personalIdentificationDocuments), "Property is not nullable for class EdFiParent.");

            if (telephones.IsSet && telephones.Value == null)
                throw new ArgumentNullException(nameof(telephones), "Property is not nullable for class EdFiParent.");

            if (etag.IsSet && etag.Value == null)
                throw new ArgumentNullException(nameof(etag), "Property is not nullable for class EdFiParent.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiParent.");

            return new EdFiParent(parentUniqueId.Value!, firstName.Value!, lastSurname.Value!, id, personReference, addresses, electronicMails, generationCodeSuffix, highestCompletedLevelOfEducationDescriptor, internationalAddresses, languages, loginId, maidenName, middleName, otherNames, personalIdentificationDocuments, personalTitlePrefix, sexDescriptor, telephones, etag, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiParent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiParent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiParent edFiParent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiParent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiParent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiParent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiParent edFiParent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiParent.ParentUniqueId == null)
                throw new ArgumentNullException(nameof(edFiParent.ParentUniqueId), "Property is required for class EdFiParent.");

            if (edFiParent.FirstName == null)
                throw new ArgumentNullException(nameof(edFiParent.FirstName), "Property is required for class EdFiParent.");

            if (edFiParent.LastSurname == null)
                throw new ArgumentNullException(nameof(edFiParent.LastSurname), "Property is required for class EdFiParent.");

            if (edFiParent.IdOption.IsSet && edFiParent.Id == null)
                throw new ArgumentNullException(nameof(edFiParent.Id), "Property is required for class EdFiParent.");

            if (edFiParent.PersonReferenceOption.IsSet && edFiParent.PersonReference == null)
                throw new ArgumentNullException(nameof(edFiParent.PersonReference), "Property is required for class EdFiParent.");

            if (edFiParent.AddressesOption.IsSet && edFiParent.Addresses == null)
                throw new ArgumentNullException(nameof(edFiParent.Addresses), "Property is required for class EdFiParent.");

            if (edFiParent.ElectronicMailsOption.IsSet && edFiParent.ElectronicMails == null)
                throw new ArgumentNullException(nameof(edFiParent.ElectronicMails), "Property is required for class EdFiParent.");

            if (edFiParent.InternationalAddressesOption.IsSet && edFiParent.InternationalAddresses == null)
                throw new ArgumentNullException(nameof(edFiParent.InternationalAddresses), "Property is required for class EdFiParent.");

            if (edFiParent.LanguagesOption.IsSet && edFiParent.Languages == null)
                throw new ArgumentNullException(nameof(edFiParent.Languages), "Property is required for class EdFiParent.");

            if (edFiParent.OtherNamesOption.IsSet && edFiParent.OtherNames == null)
                throw new ArgumentNullException(nameof(edFiParent.OtherNames), "Property is required for class EdFiParent.");

            if (edFiParent.PersonalIdentificationDocumentsOption.IsSet && edFiParent.PersonalIdentificationDocuments == null)
                throw new ArgumentNullException(nameof(edFiParent.PersonalIdentificationDocuments), "Property is required for class EdFiParent.");

            if (edFiParent.TelephonesOption.IsSet && edFiParent.Telephones == null)
                throw new ArgumentNullException(nameof(edFiParent.Telephones), "Property is required for class EdFiParent.");

            if (edFiParent.EtagOption.IsSet && edFiParent.Etag == null)
                throw new ArgumentNullException(nameof(edFiParent.Etag), "Property is required for class EdFiParent.");

            if (edFiParent.ExtOption.IsSet && edFiParent.Ext == null)
                throw new ArgumentNullException(nameof(edFiParent.Ext), "Property is required for class EdFiParent.");

            writer.WriteString("parentUniqueId", edFiParent.ParentUniqueId);

            writer.WriteString("firstName", edFiParent.FirstName);

            writer.WriteString("lastSurname", edFiParent.LastSurname);

            if (edFiParent.IdOption.IsSet)
                writer.WriteString("id", edFiParent.Id);

            if (edFiParent.PersonReferenceOption.IsSet)
            {
                writer.WritePropertyName("personReference");
                JsonSerializer.Serialize(writer, edFiParent.PersonReference, jsonSerializerOptions);
            }
            if (edFiParent.AddressesOption.IsSet)
            {
                writer.WritePropertyName("addresses");
                JsonSerializer.Serialize(writer, edFiParent.Addresses, jsonSerializerOptions);
            }
            if (edFiParent.ElectronicMailsOption.IsSet)
            {
                writer.WritePropertyName("electronicMails");
                JsonSerializer.Serialize(writer, edFiParent.ElectronicMails, jsonSerializerOptions);
            }
            if (edFiParent.GenerationCodeSuffixOption.IsSet)
                if (edFiParent.GenerationCodeSuffixOption.Value != null)
                    writer.WriteString("generationCodeSuffix", edFiParent.GenerationCodeSuffix);
                else
                    writer.WriteNull("generationCodeSuffix");

            if (edFiParent.HighestCompletedLevelOfEducationDescriptorOption.IsSet)
                if (edFiParent.HighestCompletedLevelOfEducationDescriptorOption.Value != null)
                    writer.WriteString("highestCompletedLevelOfEducationDescriptor", edFiParent.HighestCompletedLevelOfEducationDescriptor);
                else
                    writer.WriteNull("highestCompletedLevelOfEducationDescriptor");

            if (edFiParent.InternationalAddressesOption.IsSet)
            {
                writer.WritePropertyName("internationalAddresses");
                JsonSerializer.Serialize(writer, edFiParent.InternationalAddresses, jsonSerializerOptions);
            }
            if (edFiParent.LanguagesOption.IsSet)
            {
                writer.WritePropertyName("languages");
                JsonSerializer.Serialize(writer, edFiParent.Languages, jsonSerializerOptions);
            }
            if (edFiParent.LoginIdOption.IsSet)
                if (edFiParent.LoginIdOption.Value != null)
                    writer.WriteString("loginId", edFiParent.LoginId);
                else
                    writer.WriteNull("loginId");

            if (edFiParent.MaidenNameOption.IsSet)
                if (edFiParent.MaidenNameOption.Value != null)
                    writer.WriteString("maidenName", edFiParent.MaidenName);
                else
                    writer.WriteNull("maidenName");

            if (edFiParent.MiddleNameOption.IsSet)
                if (edFiParent.MiddleNameOption.Value != null)
                    writer.WriteString("middleName", edFiParent.MiddleName);
                else
                    writer.WriteNull("middleName");

            if (edFiParent.OtherNamesOption.IsSet)
            {
                writer.WritePropertyName("otherNames");
                JsonSerializer.Serialize(writer, edFiParent.OtherNames, jsonSerializerOptions);
            }
            if (edFiParent.PersonalIdentificationDocumentsOption.IsSet)
            {
                writer.WritePropertyName("personalIdentificationDocuments");
                JsonSerializer.Serialize(writer, edFiParent.PersonalIdentificationDocuments, jsonSerializerOptions);
            }
            if (edFiParent.PersonalTitlePrefixOption.IsSet)
                if (edFiParent.PersonalTitlePrefixOption.Value != null)
                    writer.WriteString("personalTitlePrefix", edFiParent.PersonalTitlePrefix);
                else
                    writer.WriteNull("personalTitlePrefix");

            if (edFiParent.SexDescriptorOption.IsSet)
                if (edFiParent.SexDescriptorOption.Value != null)
                    writer.WriteString("sexDescriptor", edFiParent.SexDescriptor);
                else
                    writer.WriteNull("sexDescriptor");

            if (edFiParent.TelephonesOption.IsSet)
            {
                writer.WritePropertyName("telephones");
                JsonSerializer.Serialize(writer, edFiParent.Telephones, jsonSerializerOptions);
            }
            if (edFiParent.EtagOption.IsSet)
                writer.WriteString("_etag", edFiParent.Etag);

            if (edFiParent.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiParent.Ext, jsonSerializerOptions);
            }
        }
    }
}
