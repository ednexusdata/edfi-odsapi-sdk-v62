// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v62.Client;

namespace EdFi.OdsApi.Sdk.v62.Models.All
{
    /// <summary>
    /// EdFiStudentCTEProgramAssociationCTEProgram
    /// </summary>
    public partial class EdFiStudentCTEProgramAssociationCTEProgram : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentCTEProgramAssociationCTEProgram" /> class.
        /// </summary>
        /// <param name="careerPathwayDescriptor">A sequence of courses within an area of interest that is a student&#39;s educational road map to a chosen career.</param>
        /// <param name="cipCode">Number and description of the CIP code associated with the student&#39;s CTE program.</param>
        /// <param name="cteProgramCompletionIndicator">A boolean indicator of whether the student has completed the CTE program.</param>
        /// <param name="primaryCTEProgramIndicator">A boolean indicator of whether this CTE program is the student&#39;s primary CTE program.</param>
        /// <param name="ext">Extensions to the StudentCTEProgramAssociationCTEProgram entity.</param>
        [JsonConstructor]
        public EdFiStudentCTEProgramAssociationCTEProgram(string careerPathwayDescriptor, Option<string?> cipCode = default, Option<bool?> cteProgramCompletionIndicator = default, Option<bool?> primaryCTEProgramIndicator = default, Option<Object?> ext = default)
        {
            CareerPathwayDescriptor = careerPathwayDescriptor;
            CipCodeOption = cipCode;
            CteProgramCompletionIndicatorOption = cteProgramCompletionIndicator;
            PrimaryCTEProgramIndicatorOption = primaryCTEProgramIndicator;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A sequence of courses within an area of interest that is a student&#39;s educational road map to a chosen career.
        /// </summary>
        /// <value>A sequence of courses within an area of interest that is a student&#39;s educational road map to a chosen career.</value>
        [JsonPropertyName("careerPathwayDescriptor")]
        public string CareerPathwayDescriptor { get; set; }

        /// <summary>
        /// Used to track the state of CipCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CipCodeOption { get; private set; }

        /// <summary>
        /// Number and description of the CIP code associated with the student&#39;s CTE program.
        /// </summary>
        /// <value>Number and description of the CIP code associated with the student&#39;s CTE program.</value>
        [JsonPropertyName("cipCode")]
        public string? CipCode { get { return this.CipCodeOption; } set { this.CipCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CteProgramCompletionIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CteProgramCompletionIndicatorOption { get; private set; }

        /// <summary>
        /// A boolean indicator of whether the student has completed the CTE program.
        /// </summary>
        /// <value>A boolean indicator of whether the student has completed the CTE program.</value>
        [JsonPropertyName("cteProgramCompletionIndicator")]
        public bool? CteProgramCompletionIndicator { get { return this.CteProgramCompletionIndicatorOption; } set { this.CteProgramCompletionIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrimaryCTEProgramIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PrimaryCTEProgramIndicatorOption { get; private set; }

        /// <summary>
        /// A boolean indicator of whether this CTE program is the student&#39;s primary CTE program.
        /// </summary>
        /// <value>A boolean indicator of whether this CTE program is the student&#39;s primary CTE program.</value>
        [JsonPropertyName("primaryCTEProgramIndicator")]
        public bool? PrimaryCTEProgramIndicator { get { return this.PrimaryCTEProgramIndicatorOption; } set { this.PrimaryCTEProgramIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the StudentCTEProgramAssociationCTEProgram entity.
        /// </summary>
        /// <value>Extensions to the StudentCTEProgramAssociationCTEProgram entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiStudentCTEProgramAssociationCTEProgram {\n");
            sb.Append("  CareerPathwayDescriptor: ").Append(CareerPathwayDescriptor).Append("\n");
            sb.Append("  CipCode: ").Append(CipCode).Append("\n");
            sb.Append("  CteProgramCompletionIndicator: ").Append(CteProgramCompletionIndicator).Append("\n");
            sb.Append("  PrimaryCTEProgramIndicator: ").Append(PrimaryCTEProgramIndicator).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CareerPathwayDescriptor (string) maxLength
            if (this.CareerPathwayDescriptor != null && this.CareerPathwayDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for CareerPathwayDescriptor, length must be less than 306.", new [] { "CareerPathwayDescriptor" });
            }

            // CipCode (string) maxLength
            if (this.CipCode != null && this.CipCode.Length > 120)
            {
                yield return new ValidationResult("Invalid value for CipCode, length must be less than 120.", new [] { "CipCode" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiStudentCTEProgramAssociationCTEProgram" />
    /// </summary>
    public class EdFiStudentCTEProgramAssociationCTEProgramJsonConverter : JsonConverter<EdFiStudentCTEProgramAssociationCTEProgram>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiStudentCTEProgramAssociationCTEProgram" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiStudentCTEProgramAssociationCTEProgram Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> careerPathwayDescriptor = default;
            Option<string?> cipCode = default;
            Option<bool?> cteProgramCompletionIndicator = default;
            Option<bool?> primaryCTEProgramIndicator = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "careerPathwayDescriptor":
                            careerPathwayDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cipCode":
                            cipCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "cteProgramCompletionIndicator":
                            cteProgramCompletionIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "primaryCTEProgramIndicator":
                            primaryCTEProgramIndicator = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!careerPathwayDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiStudentCTEProgramAssociationCTEProgram.", nameof(careerPathwayDescriptor));

            if (careerPathwayDescriptor.IsSet && careerPathwayDescriptor.Value == null)
                throw new ArgumentNullException(nameof(careerPathwayDescriptor), "Property is not nullable for class EdFiStudentCTEProgramAssociationCTEProgram.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiStudentCTEProgramAssociationCTEProgram.");

            return new EdFiStudentCTEProgramAssociationCTEProgram(careerPathwayDescriptor.Value!, cipCode, cteProgramCompletionIndicator, primaryCTEProgramIndicator, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiStudentCTEProgramAssociationCTEProgram" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentCTEProgramAssociationCTEProgram"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiStudentCTEProgramAssociationCTEProgram edFiStudentCTEProgramAssociationCTEProgram, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiStudentCTEProgramAssociationCTEProgram, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiStudentCTEProgramAssociationCTEProgram" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiStudentCTEProgramAssociationCTEProgram"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiStudentCTEProgramAssociationCTEProgram edFiStudentCTEProgramAssociationCTEProgram, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiStudentCTEProgramAssociationCTEProgram.CareerPathwayDescriptor == null)
                throw new ArgumentNullException(nameof(edFiStudentCTEProgramAssociationCTEProgram.CareerPathwayDescriptor), "Property is required for class EdFiStudentCTEProgramAssociationCTEProgram.");

            if (edFiStudentCTEProgramAssociationCTEProgram.ExtOption.IsSet && edFiStudentCTEProgramAssociationCTEProgram.Ext == null)
                throw new ArgumentNullException(nameof(edFiStudentCTEProgramAssociationCTEProgram.Ext), "Property is required for class EdFiStudentCTEProgramAssociationCTEProgram.");

            writer.WriteString("careerPathwayDescriptor", edFiStudentCTEProgramAssociationCTEProgram.CareerPathwayDescriptor);

            if (edFiStudentCTEProgramAssociationCTEProgram.CipCodeOption.IsSet)
                if (edFiStudentCTEProgramAssociationCTEProgram.CipCodeOption.Value != null)
                    writer.WriteString("cipCode", edFiStudentCTEProgramAssociationCTEProgram.CipCode);
                else
                    writer.WriteNull("cipCode");

            if (edFiStudentCTEProgramAssociationCTEProgram.CteProgramCompletionIndicatorOption.IsSet)
                if (edFiStudentCTEProgramAssociationCTEProgram.CteProgramCompletionIndicatorOption.Value != null)
                    writer.WriteBoolean("cteProgramCompletionIndicator", edFiStudentCTEProgramAssociationCTEProgram.CteProgramCompletionIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("cteProgramCompletionIndicator");

            if (edFiStudentCTEProgramAssociationCTEProgram.PrimaryCTEProgramIndicatorOption.IsSet)
                if (edFiStudentCTEProgramAssociationCTEProgram.PrimaryCTEProgramIndicatorOption.Value != null)
                    writer.WriteBoolean("primaryCTEProgramIndicator", edFiStudentCTEProgramAssociationCTEProgram.PrimaryCTEProgramIndicatorOption.Value!.Value);
                else
                    writer.WriteNull("primaryCTEProgramIndicator");

            if (edFiStudentCTEProgramAssociationCTEProgram.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiStudentCTEProgramAssociationCTEProgram.Ext, jsonSerializerOptions);
            }
        }
    }
}
