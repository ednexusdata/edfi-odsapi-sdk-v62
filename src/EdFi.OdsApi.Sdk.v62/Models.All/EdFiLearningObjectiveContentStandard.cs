// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v62.Client;

namespace EdFi.OdsApi.Sdk.v62.Models.All
{
    /// <summary>
    /// EdFiLearningObjectiveContentStandard
    /// </summary>
    public partial class EdFiLearningObjectiveContentStandard : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningObjectiveContentStandard" /> class.
        /// </summary>
        /// <param name="title">The name of the content standard, for example Common Core.</param>
        /// <param name="publicationStatusDescriptor">The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).</param>
        /// <param name="beginDate">The beginning of the period during which this learning standard document is intended for use.</param>
        /// <param name="endDate">The end of the period during which this learning standard document is intended for use.</param>
        /// <param name="publicationDate">The date on which this content was first published.</param>
        /// <param name="publicationYear">The year at which this content was first published.</param>
        /// <param name="uri">An unambiguous reference to the standards using a network-resolvable URI.</param>
        /// <param name="varVersion">The version identifier for the content.</param>
        /// <param name="mandatingEducationOrganizationReference">mandatingEducationOrganizationReference</param>
        /// <param name="authors">An unordered collection of learningObjectiveContentStandardAuthors. The person or organization chiefly responsible for the intellectual content of the standard.</param>
        /// <param name="ext">Extensions to the LearningObjectiveContentStandard entity.</param>
        [JsonConstructor]
        public EdFiLearningObjectiveContentStandard(string title, Option<string?> publicationStatusDescriptor = default, Option<DateOnly?> beginDate = default, Option<DateOnly?> endDate = default, Option<DateOnly?> publicationDate = default, Option<int?> publicationYear = default, Option<string?> uri = default, Option<string?> varVersion = default, Option<EdFiEducationOrganizationReference?> mandatingEducationOrganizationReference = default, Option<List<EdFiLearningObjectiveContentStandardAuthor>?> authors = default, Option<Object?> ext = default)
        {
            Title = title;
            PublicationStatusDescriptorOption = publicationStatusDescriptor;
            BeginDateOption = beginDate;
            EndDateOption = endDate;
            PublicationDateOption = publicationDate;
            PublicationYearOption = publicationYear;
            UriOption = uri;
            VarVersionOption = varVersion;
            MandatingEducationOrganizationReferenceOption = mandatingEducationOrganizationReference;
            AuthorsOption = authors;
            ExtOption = ext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The name of the content standard, for example Common Core.
        /// </summary>
        /// <value>The name of the content standard, for example Common Core.</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Used to track the state of PublicationStatusDescriptor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PublicationStatusDescriptorOption { get; private set; }

        /// <summary>
        /// The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
        /// </summary>
        /// <value>The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).</value>
        [JsonPropertyName("publicationStatusDescriptor")]
        public string? PublicationStatusDescriptor { get { return this.PublicationStatusDescriptorOption; } set { this.PublicationStatusDescriptorOption = new(value); } }

        /// <summary>
        /// Used to track the state of BeginDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> BeginDateOption { get; private set; }

        /// <summary>
        /// The beginning of the period during which this learning standard document is intended for use.
        /// </summary>
        /// <value>The beginning of the period during which this learning standard document is intended for use.</value>
        [JsonPropertyName("beginDate")]
        public DateOnly? BeginDate { get { return this.BeginDateOption; } set { this.BeginDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// The end of the period during which this learning standard document is intended for use.
        /// </summary>
        /// <value>The end of the period during which this learning standard document is intended for use.</value>
        [JsonPropertyName("endDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublicationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> PublicationDateOption { get; private set; }

        /// <summary>
        /// The date on which this content was first published.
        /// </summary>
        /// <value>The date on which this content was first published.</value>
        [JsonPropertyName("publicationDate")]
        public DateOnly? PublicationDate { get { return this.PublicationDateOption; } set { this.PublicationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublicationYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PublicationYearOption { get; private set; }

        /// <summary>
        /// The year at which this content was first published.
        /// </summary>
        /// <value>The year at which this content was first published.</value>
        [JsonPropertyName("publicationYear")]
        public int? PublicationYear { get { return this.PublicationYearOption; } set { this.PublicationYearOption = new(value); } }

        /// <summary>
        /// Used to track the state of Uri
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UriOption { get; private set; }

        /// <summary>
        /// An unambiguous reference to the standards using a network-resolvable URI.
        /// </summary>
        /// <value>An unambiguous reference to the standards using a network-resolvable URI.</value>
        [JsonPropertyName("uri")]
        public string? Uri { get { return this.UriOption; } set { this.UriOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// The version identifier for the content.
        /// </summary>
        /// <value>The version identifier for the content.</value>
        [JsonPropertyName("version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of MandatingEducationOrganizationReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EdFiEducationOrganizationReference?> MandatingEducationOrganizationReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets MandatingEducationOrganizationReference
        /// </summary>
        [JsonPropertyName("mandatingEducationOrganizationReference")]
        public EdFiEducationOrganizationReference? MandatingEducationOrganizationReference { get { return this.MandatingEducationOrganizationReferenceOption; } set { this.MandatingEducationOrganizationReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Authors
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EdFiLearningObjectiveContentStandardAuthor>?> AuthorsOption { get; private set; }

        /// <summary>
        /// An unordered collection of learningObjectiveContentStandardAuthors. The person or organization chiefly responsible for the intellectual content of the standard.
        /// </summary>
        /// <value>An unordered collection of learningObjectiveContentStandardAuthors. The person or organization chiefly responsible for the intellectual content of the standard.</value>
        [JsonPropertyName("authors")]
        public List<EdFiLearningObjectiveContentStandardAuthor>? Authors { get { return this.AuthorsOption; } set { this.AuthorsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExtOption { get; private set; }

        /// <summary>
        /// Extensions to the LearningObjectiveContentStandard entity.
        /// </summary>
        /// <value>Extensions to the LearningObjectiveContentStandard entity.</value>
        [JsonPropertyName("_ext")]
        public Object? Ext { get { return this.ExtOption; } set { this.ExtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiLearningObjectiveContentStandard {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  PublicationStatusDescriptor: ").Append(PublicationStatusDescriptor).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  PublicationDate: ").Append(PublicationDate).Append("\n");
            sb.Append("  PublicationYear: ").Append(PublicationYear).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  MandatingEducationOrganizationReference: ").Append(MandatingEducationOrganizationReference).Append("\n");
            sb.Append("  Authors: ").Append(Authors).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 75)
            {
                yield return new ValidationResult("Invalid value for Title, length must be less than 75.", new [] { "Title" });
            }

            // PublicationStatusDescriptor (string) maxLength
            if (this.PublicationStatusDescriptor != null && this.PublicationStatusDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for PublicationStatusDescriptor, length must be less than 306.", new [] { "PublicationStatusDescriptor" });
            }

            // Uri (string) maxLength
            if (this.Uri != null && this.Uri.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Uri, length must be less than 255.", new [] { "Uri" });
            }

            // VarVersion (string) maxLength
            if (this.VarVersion != null && this.VarVersion.Length > 50)
            {
                yield return new ValidationResult("Invalid value for VarVersion, length must be less than 50.", new [] { "VarVersion" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiLearningObjectiveContentStandard" />
    /// </summary>
    public class EdFiLearningObjectiveContentStandardJsonConverter : JsonConverter<EdFiLearningObjectiveContentStandard>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize PublicationDate
        /// </summary>
        public static string PublicationDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EdFiLearningObjectiveContentStandard" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiLearningObjectiveContentStandard Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> publicationStatusDescriptor = default;
            Option<DateOnly?> beginDate = default;
            Option<DateOnly?> endDate = default;
            Option<DateOnly?> publicationDate = default;
            Option<int?> publicationYear = default;
            Option<string?> uri = default;
            Option<string?> varVersion = default;
            Option<EdFiEducationOrganizationReference?> mandatingEducationOrganizationReference = default;
            Option<List<EdFiLearningObjectiveContentStandardAuthor>?> authors = default;
            Option<Object?> ext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "publicationStatusDescriptor":
                            publicationStatusDescriptor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "beginDate":
                            beginDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "publicationDate":
                            publicationDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "publicationYear":
                            publicationYear = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "uri":
                            uri = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "mandatingEducationOrganizationReference":
                            mandatingEducationOrganizationReference = new Option<EdFiEducationOrganizationReference?>(JsonSerializer.Deserialize<EdFiEducationOrganizationReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "authors":
                            authors = new Option<List<EdFiLearningObjectiveContentStandardAuthor>?>(JsonSerializer.Deserialize<List<EdFiLearningObjectiveContentStandardAuthor>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_ext":
                            ext = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class EdFiLearningObjectiveContentStandard.", nameof(title));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class EdFiLearningObjectiveContentStandard.");

            if (mandatingEducationOrganizationReference.IsSet && mandatingEducationOrganizationReference.Value == null)
                throw new ArgumentNullException(nameof(mandatingEducationOrganizationReference), "Property is not nullable for class EdFiLearningObjectiveContentStandard.");

            if (authors.IsSet && authors.Value == null)
                throw new ArgumentNullException(nameof(authors), "Property is not nullable for class EdFiLearningObjectiveContentStandard.");

            if (ext.IsSet && ext.Value == null)
                throw new ArgumentNullException(nameof(ext), "Property is not nullable for class EdFiLearningObjectiveContentStandard.");

            return new EdFiLearningObjectiveContentStandard(title.Value!, publicationStatusDescriptor, beginDate, endDate, publicationDate, publicationYear, uri, varVersion, mandatingEducationOrganizationReference, authors, ext);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiLearningObjectiveContentStandard" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLearningObjectiveContentStandard"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiLearningObjectiveContentStandard edFiLearningObjectiveContentStandard, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiLearningObjectiveContentStandard, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiLearningObjectiveContentStandard" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiLearningObjectiveContentStandard"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiLearningObjectiveContentStandard edFiLearningObjectiveContentStandard, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiLearningObjectiveContentStandard.Title == null)
                throw new ArgumentNullException(nameof(edFiLearningObjectiveContentStandard.Title), "Property is required for class EdFiLearningObjectiveContentStandard.");

            if (edFiLearningObjectiveContentStandard.MandatingEducationOrganizationReferenceOption.IsSet && edFiLearningObjectiveContentStandard.MandatingEducationOrganizationReference == null)
                throw new ArgumentNullException(nameof(edFiLearningObjectiveContentStandard.MandatingEducationOrganizationReference), "Property is required for class EdFiLearningObjectiveContentStandard.");

            if (edFiLearningObjectiveContentStandard.AuthorsOption.IsSet && edFiLearningObjectiveContentStandard.Authors == null)
                throw new ArgumentNullException(nameof(edFiLearningObjectiveContentStandard.Authors), "Property is required for class EdFiLearningObjectiveContentStandard.");

            if (edFiLearningObjectiveContentStandard.ExtOption.IsSet && edFiLearningObjectiveContentStandard.Ext == null)
                throw new ArgumentNullException(nameof(edFiLearningObjectiveContentStandard.Ext), "Property is required for class EdFiLearningObjectiveContentStandard.");

            writer.WriteString("title", edFiLearningObjectiveContentStandard.Title);

            if (edFiLearningObjectiveContentStandard.PublicationStatusDescriptorOption.IsSet)
                if (edFiLearningObjectiveContentStandard.PublicationStatusDescriptorOption.Value != null)
                    writer.WriteString("publicationStatusDescriptor", edFiLearningObjectiveContentStandard.PublicationStatusDescriptor);
                else
                    writer.WriteNull("publicationStatusDescriptor");

            if (edFiLearningObjectiveContentStandard.BeginDateOption.IsSet)
                if (edFiLearningObjectiveContentStandard.BeginDateOption.Value != null)
                    writer.WriteString("beginDate", edFiLearningObjectiveContentStandard.BeginDateOption.Value!.Value.ToString(BeginDateFormat));
                else
                    writer.WriteNull("beginDate");

            if (edFiLearningObjectiveContentStandard.EndDateOption.IsSet)
                if (edFiLearningObjectiveContentStandard.EndDateOption.Value != null)
                    writer.WriteString("endDate", edFiLearningObjectiveContentStandard.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("endDate");

            if (edFiLearningObjectiveContentStandard.PublicationDateOption.IsSet)
                if (edFiLearningObjectiveContentStandard.PublicationDateOption.Value != null)
                    writer.WriteString("publicationDate", edFiLearningObjectiveContentStandard.PublicationDateOption.Value!.Value.ToString(PublicationDateFormat));
                else
                    writer.WriteNull("publicationDate");

            if (edFiLearningObjectiveContentStandard.PublicationYearOption.IsSet)
                if (edFiLearningObjectiveContentStandard.PublicationYearOption.Value != null)
                    writer.WriteNumber("publicationYear", edFiLearningObjectiveContentStandard.PublicationYearOption.Value!.Value);
                else
                    writer.WriteNull("publicationYear");

            if (edFiLearningObjectiveContentStandard.UriOption.IsSet)
                if (edFiLearningObjectiveContentStandard.UriOption.Value != null)
                    writer.WriteString("uri", edFiLearningObjectiveContentStandard.Uri);
                else
                    writer.WriteNull("uri");

            if (edFiLearningObjectiveContentStandard.VarVersionOption.IsSet)
                if (edFiLearningObjectiveContentStandard.VarVersionOption.Value != null)
                    writer.WriteString("version", edFiLearningObjectiveContentStandard.VarVersion);
                else
                    writer.WriteNull("version");

            if (edFiLearningObjectiveContentStandard.MandatingEducationOrganizationReferenceOption.IsSet)
            {
                writer.WritePropertyName("mandatingEducationOrganizationReference");
                JsonSerializer.Serialize(writer, edFiLearningObjectiveContentStandard.MandatingEducationOrganizationReference, jsonSerializerOptions);
            }
            if (edFiLearningObjectiveContentStandard.AuthorsOption.IsSet)
            {
                writer.WritePropertyName("authors");
                JsonSerializer.Serialize(writer, edFiLearningObjectiveContentStandard.Authors, jsonSerializerOptions);
            }
            if (edFiLearningObjectiveContentStandard.ExtOption.IsSet)
            {
                writer.WritePropertyName("_ext");
                JsonSerializer.Serialize(writer, edFiLearningObjectiveContentStandard.Ext, jsonSerializerOptions);
            }
        }
    }
}
