// <auto-generated>
/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.OdsApi.Sdk.v62.Client;

namespace EdFi.OdsApi.Sdk.v62.Models.All
{
    /// <summary>
    /// EdFiGradingPeriodReference
    /// </summary>
    public partial class EdFiGradingPeriodReference : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradingPeriodReference" /> class.
        /// </summary>
        /// <param name="gradingPeriodDescriptor">The name of the period for which grades are reported.</param>
        /// <param name="periodSequence">The sequential order of this period relative to other periods.</param>
        /// <param name="schoolId">The identifier assigned to a school.</param>
        /// <param name="schoolYear">The identifier for the grading period school year.</param>
        /// <param name="link">link</param>
        [JsonConstructor]
        public EdFiGradingPeriodReference(string gradingPeriodDescriptor, int periodSequence, int schoolId, int schoolYear, Option<Link?> link = default)
        {
            GradingPeriodDescriptor = gradingPeriodDescriptor;
            PeriodSequence = periodSequence;
            SchoolId = schoolId;
            SchoolYear = schoolYear;
            LinkOption = link;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The name of the period for which grades are reported.
        /// </summary>
        /// <value>The name of the period for which grades are reported.</value>
        [JsonPropertyName("gradingPeriodDescriptor")]
        public string GradingPeriodDescriptor { get; set; }

        /// <summary>
        /// The sequential order of this period relative to other periods.
        /// </summary>
        /// <value>The sequential order of this period relative to other periods.</value>
        [JsonPropertyName("periodSequence")]
        public int PeriodSequence { get; set; }

        /// <summary>
        /// The identifier assigned to a school.
        /// </summary>
        /// <value>The identifier assigned to a school.</value>
        [JsonPropertyName("schoolId")]
        public int SchoolId { get; set; }

        /// <summary>
        /// The identifier for the grading period school year.
        /// </summary>
        /// <value>The identifier for the grading period school year.</value>
        [JsonPropertyName("schoolYear")]
        public int SchoolYear { get; set; }

        /// <summary>
        /// Used to track the state of Link
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Link?> LinkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [JsonPropertyName("link")]
        public Link? Link { get { return this.LinkOption; } set { this.LinkOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiGradingPeriodReference {\n");
            sb.Append("  GradingPeriodDescriptor: ").Append(GradingPeriodDescriptor).Append("\n");
            sb.Append("  PeriodSequence: ").Append(PeriodSequence).Append("\n");
            sb.Append("  SchoolId: ").Append(SchoolId).Append("\n");
            sb.Append("  SchoolYear: ").Append(SchoolYear).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GradingPeriodDescriptor (string) maxLength
            if (this.GradingPeriodDescriptor != null && this.GradingPeriodDescriptor.Length > 306)
            {
                yield return new ValidationResult("Invalid value for GradingPeriodDescriptor, length must be less than 306.", new [] { "GradingPeriodDescriptor" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EdFiGradingPeriodReference" />
    /// </summary>
    public class EdFiGradingPeriodReferenceJsonConverter : JsonConverter<EdFiGradingPeriodReference>
    {
        /// <summary>
        /// Deserializes json to <see cref="EdFiGradingPeriodReference" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EdFiGradingPeriodReference Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> gradingPeriodDescriptor = default;
            Option<int?> periodSequence = default;
            Option<int?> schoolId = default;
            Option<int?> schoolYear = default;
            Option<Link?> link = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "gradingPeriodDescriptor":
                            gradingPeriodDescriptor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "periodSequence":
                            periodSequence = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "schoolId":
                            schoolId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "schoolYear":
                            schoolYear = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "link":
                            link = new Option<Link?>(JsonSerializer.Deserialize<Link>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!gradingPeriodDescriptor.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradingPeriodReference.", nameof(gradingPeriodDescriptor));

            if (!periodSequence.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradingPeriodReference.", nameof(periodSequence));

            if (!schoolId.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradingPeriodReference.", nameof(schoolId));

            if (!schoolYear.IsSet)
                throw new ArgumentException("Property is required for class EdFiGradingPeriodReference.", nameof(schoolYear));

            if (gradingPeriodDescriptor.IsSet && gradingPeriodDescriptor.Value == null)
                throw new ArgumentNullException(nameof(gradingPeriodDescriptor), "Property is not nullable for class EdFiGradingPeriodReference.");

            if (periodSequence.IsSet && periodSequence.Value == null)
                throw new ArgumentNullException(nameof(periodSequence), "Property is not nullable for class EdFiGradingPeriodReference.");

            if (schoolId.IsSet && schoolId.Value == null)
                throw new ArgumentNullException(nameof(schoolId), "Property is not nullable for class EdFiGradingPeriodReference.");

            if (schoolYear.IsSet && schoolYear.Value == null)
                throw new ArgumentNullException(nameof(schoolYear), "Property is not nullable for class EdFiGradingPeriodReference.");

            if (link.IsSet && link.Value == null)
                throw new ArgumentNullException(nameof(link), "Property is not nullable for class EdFiGradingPeriodReference.");

            return new EdFiGradingPeriodReference(gradingPeriodDescriptor.Value!, periodSequence.Value!.Value!, schoolId.Value!.Value!, schoolYear.Value!.Value!, link);
        }

        /// <summary>
        /// Serializes a <see cref="EdFiGradingPeriodReference" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiGradingPeriodReference"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EdFiGradingPeriodReference edFiGradingPeriodReference, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, edFiGradingPeriodReference, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EdFiGradingPeriodReference" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="edFiGradingPeriodReference"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EdFiGradingPeriodReference edFiGradingPeriodReference, JsonSerializerOptions jsonSerializerOptions)
        {
            if (edFiGradingPeriodReference.GradingPeriodDescriptor == null)
                throw new ArgumentNullException(nameof(edFiGradingPeriodReference.GradingPeriodDescriptor), "Property is required for class EdFiGradingPeriodReference.");

            if (edFiGradingPeriodReference.LinkOption.IsSet && edFiGradingPeriodReference.Link == null)
                throw new ArgumentNullException(nameof(edFiGradingPeriodReference.Link), "Property is required for class EdFiGradingPeriodReference.");

            writer.WriteString("gradingPeriodDescriptor", edFiGradingPeriodReference.GradingPeriodDescriptor);

            writer.WriteNumber("periodSequence", edFiGradingPeriodReference.PeriodSequence);

            writer.WriteNumber("schoolId", edFiGradingPeriodReference.SchoolId);

            writer.WriteNumber("schoolYear", edFiGradingPeriodReference.SchoolYear);

            if (edFiGradingPeriodReference.LinkOption.IsSet)
            {
                writer.WritePropertyName("link");
                JsonSerializer.Serialize(writer, edFiGradingPeriodReference.Link, jsonSerializerOptions);
            }
        }
    }
}
